# ========================================
# üèóÔ∏è REFACTORING SIGNAL_GENERATOR ARCHITECTURE
# ========================================

"""
PLAN DE REFACTORING SIGNAL_GENERATOR.PY (2788 lignes ‚Üí modulaire)

OBJECTIF: D√©couper le gros fichier en modules sp√©cialis√©s tout en gardant
         l'interface publique identique pour ne rien casser.

STRAT√âGIE: Le fichier signal_generator.py devient une "vitrine" qui importe
          et r√©exporte tout depuis les nouveaux modules.
"""

# ========================================
# üìÅ NOUVELLE STRUCTURE DE FICHIERS
# ========================================

"""
strategies/
‚îú‚îÄ‚îÄ signal_generator.py              # üé≠ VITRINE (imports/exports seulement)
‚îú‚îÄ‚îÄ signal_core/                     # üìÅ Nouveau dossier
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py                  # Re-exports tout
‚îÇ   ‚îú‚îÄ‚îÄ base_types.py                # Enums, dataclasses, constantes
‚îÇ   ‚îú‚îÄ‚îÄ signal_generator_core.py     # Classe SignalGenerator principale
‚îÇ   ‚îú‚îÄ‚îÄ signal_components.py         # SignalComponents, FinalSignal
‚îÇ   ‚îú‚îÄ‚îÄ technique_analyzers.py       # MTF, Smart Money, ML, Gamma
‚îÇ   ‚îú‚îÄ‚îÄ confidence_calculator.py     # Calculs de confidence
‚îÇ   ‚îú‚îÄ‚îÄ quality_validator.py         # Validation qualit√© signaux
‚îÇ   ‚îú‚îÄ‚îÄ stats_tracker.py            # Statistiques et tracking
‚îÇ   ‚îî‚îÄ‚îÄ factory_functions.py        # Functions create_*, generate_*
"""

# ========================================
# üìÑ 1. strategies/signal_generator.py (NOUVELLE VITRINE)
# ========================================

signal_generator_vitrine = '''
"""
MIA_IA_SYSTEM - Signal Generator (VITRINE)
[BRAIN] CERVEAU CENTRAL du syst√®me de trading
Version: Production Ready v3.6 - REFACTORIS√â

üé≠ VITRINE: Ce fichier importe et r√©exporte tout depuis signal_core/
          pour maintenir la compatibilit√© parfaite avec le code existant.

Tous les imports existants continuent de fonctionner :
- from strategies.signal_generator import SignalGenerator
- from strategies.signal_generator import create_signal_generator  
- from strategies.signal_generator import FinalSignal, SignalComponents
- etc.
"""

# ========================================
# üé≠ IMPORTS DEPUIS LES NOUVEAUX MODULES
# ========================================

# Import de tout depuis signal_core
from .signal_core import *

# Import sp√©cifique pour clart√© (optionnel)
from .signal_core.signal_generator_core import SignalGenerator
from .signal_core.signal_components import FinalSignal, SignalComponents  
from .signal_core.base_types import (
    SignalDecision, SignalSource, QualityLevel,
    MIN_BATTLE_NAVALE_SIGNAL_LONG, MIN_BATTLE_NAVALE_SIGNAL_SHORT,
    MIN_MTF_ELITE_SCORE, MIN_SMART_MONEY_CONFIDENCE,
    MIN_ML_ENSEMBLE_CONFIDENCE, GAMMA_PEAK_FACTOR
)
from .signal_core.factory_functions import (
    create_signal_generator, generate_trading_signal
)

# ========================================
# üéØ RE-EXPORTS POUR COMPATIBILIT√â
# ========================================

# Tous les exports du fichier original restent identiques
__all__ = [
    # Classes principales
    'SignalGenerator',
    'FinalSignal', 
    'SignalComponents',
    
    # Enums
    'SignalDecision',
    'SignalSource',
    'QualityLevel',
    
    # Factory functions
    'create_signal_generator',
    'generate_trading_signal',
    
    # Constantes
    'MIN_BATTLE_NAVALE_SIGNAL_LONG',
    'MIN_BATTLE_NAVALE_SIGNAL_SHORT',
    'MIN_CONFLUENCE_SCORE',
    'MIN_MTF_ELITE_SCORE',
    'MIN_MTF_STANDARD_SCORE',
    'MIN_SMART_MONEY_CONFIDENCE',
    'MIN_SMART_MONEY_INSTITUTIONAL_SCORE', 
    'SMART_MONEY_ALIGNMENT_BONUS',
    'MIN_ML_ENSEMBLE_CONFIDENCE',
    'ML_ENSEMBLE_BOOST_FACTOR',
    'ML_ENSEMBLE_POSITION_BONUS',
    'GAMMA_EXPIRY_WEEK_FACTOR',
    'GAMMA_PEAK_FACTOR',
    'GAMMA_MODERATE_FACTOR',
    'GAMMA_NORMAL_FACTOR',
    'GAMMA_POST_EXPIRY_FACTOR'
]

# ========================================
# üß™ TEST DE COMPATIBILIT√â
# ========================================

if __name__ == "__main__":
    # Test que tous les imports fonctionnent encore
    print("üß™ Test compatibilit√© signal_generator refactoris√©...")
    
    # Test cr√©ation
    generator = create_signal_generator()
    print(f"‚úÖ SignalGenerator cr√©√©: {type(generator).__name__}")
    
    # Test constantes
    print(f"‚úÖ Constantes disponibles: LONG={MIN_BATTLE_NAVALE_SIGNAL_LONG}")
    
    # Test enums
    print(f"‚úÖ Enums disponibles: {[e.value for e in SignalDecision][:3]}...")
    
    print("üé≠ Vitrine signal_generator.py fonctionne parfaitement!")
'''

# ========================================
# üìÑ 2. strategies/signal_core/__init__.py  
# ========================================

signal_core_init = '''
"""
Signal Core Package - Re-exports centralis√©s
"""

# Import de tous les modules
from .base_types import *
from .signal_components import *
from .signal_generator_core import *
from .technique_analyzers import *
from .confidence_calculator import *
from .quality_validator import *
from .stats_tracker import *
from .factory_functions import *

# Assurer que tous les exports sont disponibles
__all__ = [
    # De base_types
    'SignalDecision', 'SignalSource', 'QualityLevel',
    'MIN_BATTLE_NAVALE_SIGNAL_LONG', 'MIN_BATTLE_NAVALE_SIGNAL_SHORT',
    'MIN_MTF_ELITE_SCORE', 'MIN_SMART_MONEY_CONFIDENCE', 
    'MIN_ML_ENSEMBLE_CONFIDENCE', 'GAMMA_PEAK_FACTOR',
    
    # De signal_components  
    'SignalComponents', 'FinalSignal',
    
    # De signal_generator_core
    'SignalGenerator',
    
    # De factory_functions
    'create_signal_generator', 'generate_trading_signal',
    
    # Et tous les autres exports...
]
'''

# ========================================
# üìÑ 3. strategies/signal_core/base_types.py
# ========================================

base_types_module = '''
"""
Types de base, enums et constantes pour Signal Generator
Extrait des lignes 1-200 du fichier original
"""

import time
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum
import pandas as pd

# Imports core
from core.base_types import (
    MarketData, OrderFlowData, TradingSignal,
    SignalType, MarketRegime, ES_TICK_SIZE, ES_TICK_VALUE
)

# ===== CONSTANTES GLOBAUX =====

# PRIORIT√â #2: CONSTANTES SEUILS GLOBAUX
MIN_BATTLE_NAVALE_SIGNAL_LONG = 0.25
MIN_BATTLE_NAVALE_SIGNAL_SHORT = -0.25

# Seuils confluence
MIN_CONFLUENCE_SCORE = 0.60
MIN_CONFLUENCE_PREMIUM = 0.80
MIN_CONFLUENCE_STRONG = 0.70

# PHASE 3: SEUILS MTF ELITE
MIN_MTF_ELITE_SCORE = 0.75
MIN_MTF_STANDARD_SCORE = 0.35

# TECHNIQUE #2: SEUILS SMART MONEY  
MIN_SMART_MONEY_CONFIDENCE = 0.6
MIN_SMART_MONEY_INSTITUTIONAL_SCORE = 0.7
SMART_MONEY_ALIGNMENT_BONUS = 1.15

# TECHNIQUE #3: SEUILS ML ENSEMBLE
MIN_ML_ENSEMBLE_CONFIDENCE = 0.70
ML_ENSEMBLE_BOOST_FACTOR = 1.08
ML_ENSEMBLE_POSITION_BONUS = 1.15

# TECHNIQUE #4: SEUILS GAMMA CYCLES
GAMMA_EXPIRY_WEEK_FACTOR = 0.7
GAMMA_PEAK_FACTOR = 1.3
GAMMA_MODERATE_FACTOR = 1.1
GAMMA_NORMAL_FACTOR = 1.0
GAMMA_POST_EXPIRY_FACTOR = 1.05

# ===== ENUMS =====

class SignalDecision(Enum):
    """D√©cisions finales possibles"""
    EXECUTE_LONG = "execute_long"
    EXECUTE_SHORT = "execute_short"
    EXIT_POSITION = "exit_position"
    WAIT_BETTER_SETUP = "wait_better_setup"
    NO_TRADE = "no_trade"

class SignalSource(Enum):
    """Source du signal"""
    BATTLE_NAVALE = "battle_navale"
    TREND_STRATEGY = "trend_strategy"
    RANGE_STRATEGY = "range_strategy"
    ML_PREDICTION = "ml_prediction"
    MANUAL_OVERRIDE = "manual_override"
    MTF_ELITE_CONFLUENCE = "mtf_elite_confluence"
    SMART_MONEY_INSTITUTIONAL = "smart_money_institutional"
    ML_ENSEMBLE_VALIDATED = "ml_ensemble_validated"
    GAMMA_CYCLE_OPTIMIZED = "gamma_cycle_optimized"

class QualityLevel(Enum):
    """Niveau de qualit√© du signal"""
    PREMIUM = "premium"
    STRONG = "strong"
    MODERATE = "moderate"
    WEAK = "weak"
    REJECTED = "rejected"
    ELITE = "elite"
    INSTITUTIONAL = "institutional"
    ML_VALIDATED = "ml_validated"
    GAMMA_OPTIMIZED = "gamma_optimized"
    ULTIMATE_ELITE = "ultimate_elite"

# ===== EXPORTS =====
__all__ = [
    'SignalDecision', 'SignalSource', 'QualityLevel',
    'MIN_BATTLE_NAVALE_SIGNAL_LONG', 'MIN_BATTLE_NAVALE_SIGNAL_SHORT',
    'MIN_CONFLUENCE_SCORE', 'MIN_MTF_ELITE_SCORE', 'MIN_SMART_MONEY_CONFIDENCE',
    'MIN_ML_ENSEMBLE_CONFIDENCE', 'GAMMA_PEAK_FACTOR'
]
'''

# ========================================
# üìÑ 4. strategies/signal_core/signal_components.py  
# ========================================

signal_components_module = '''
"""
Classes SignalComponents et FinalSignal
Extrait des lignes 200