#!/usr/bin/env python3
"""
üîß DEBUG TEST - Identification probl√®mes importation
Test minimal pour identifier les erreurs d'import
"""

import sys
import traceback
from pathlib import Path

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

def test_imports():
    """Test des imports critiques un par un"""
    print("üîß TEST IMPORTS CRITIQUES")
    print("=" * 50)
    
    # Test 1: Core logger
    try:
        from core.logger import get_logger
        print("‚úÖ Core logger: OK")
    except Exception as e:
        print(f"‚ùå Core logger: {e}")
        traceback.print_exc()
    
    # Test 2: Core base_types
    try:
        from core.base_types import MarketData
        print("‚úÖ Core base_types: OK")
    except Exception as e:
        print(f"‚ùå Core base_types: {e}")
        traceback.print_exc()
    
    # Test 3: IBKR Connector
    try:
        from core.ibkr_connector import create_ibkr_connector
        print("‚úÖ IBKR Connector: OK")
    except Exception as e:
        print(f"‚ùå IBKR Connector: {e}")
        traceback.print_exc()
    
    # Test 4: Advanced Features
    try:
        from features.advanced import get_advanced_features_status
        print("‚úÖ Advanced Features: OK")
    except Exception as e:
        print(f"‚ùå Advanced Features: {e}")
        traceback.print_exc()
    
    # Test 5: Delta Divergence sp√©cifiquement
    try:
        from features.advanced.delta_divergence import create_delta_divergence_detector
        print("‚úÖ Delta Divergence: OK")
    except Exception as e:
        print(f"‚ùå Delta Divergence: {e}")
        traceback.print_exc()
    
    # Test 6: Tick Momentum sp√©cifiquement
    try:
        from features.advanced.tick_momentum import create_tick_momentum_calculator
        print("‚úÖ Tick Momentum: OK")
    except Exception as e:
        print(f"‚ùå Tick Momentum: {e}")
        traceback.print_exc()
    
    # Test 7: Sierra Config
    try:
        from config.sierra_config import create_paper_trading_config
        print("‚úÖ Sierra Config: OK")
    except Exception as e:
        print(f"‚ùå Sierra Config: {e}")
        traceback.print_exc()
    
    # Test 8: Automation Main
    try:
        from automation_main import MIAAutomationSystem, AutomationConfig
        print("‚úÖ Automation Main: OK")
    except Exception as e:
        print(f"‚ùå Automation Main: {e}")
        traceback.print_exc()

def test_advanced_features_detailed():
    """Test d√©taill√© des features avanc√©es"""
    print("\nüîß TEST FEATURES AVANC√âES D√âTAILL√â")
    print("=" * 50)
    
    try:
        from features.advanced import get_advanced_features_status
        status = get_advanced_features_status()
        print(f"‚úÖ Status: {status['success_rate']}")
        print(f"‚úÖ Available: {status['available_features']}")
        print(f"‚ùå Failed: {status['unavailable_features']}")
        
        if status['import_errors']:
            print("üìã Erreurs d'import:")
            for feature, error in status['import_errors'].items():
                print(f"   {feature}: {error}")
                
    except Exception as e:
        print(f"‚ùå Test features avanc√©es: {e}")
        traceback.print_exc()

def test_simulation_mode():
    """Test mode simulation"""
    print("\nüîß TEST MODE SIMULATION")
    print("=" * 50)
    
    try:
        # Test cr√©ation IBKR en mode simulation
        from core.ibkr_connector import create_ibkr_connector
        
        ibkr = create_ibkr_connector({
            'ibkr_host': '127.0.0.1',
            'ibkr_port': 7497,
            'ibkr_client_id': 1,
            'simulation_mode': True
        })
        
        print("‚úÖ IBKR Connector cr√©√© en mode simulation")
        
        # Test features avanc√©es
        from features.advanced import get_all_advanced_features
        features = get_all_advanced_features()
        print(f"‚úÖ Features avanc√©es charg√©es: {len(features)}")
        
        for name, feature in features.items():
            print(f"   - {name}: {type(feature).__name__}")
            
    except Exception as e:
        print(f"‚ùå Test simulation: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    test_imports()
    test_advanced_features_detailed()
    test_simulation_mode()
    
    print("\nüéØ DEBUG COMPLET")
    print("=" * 50) 