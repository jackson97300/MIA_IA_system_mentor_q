#!/usr/bin/env python3
"""
OPTIMISATION BATTLE NAVALE AVEC NIVEAUX OPTIONS - VERSION 2
Version corrig√©e avec logique d'optimisation robuste
"""

import sys
import os
import time
import json
import random
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Tuple

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, str(Path(__file__).parent.parent))

class BattleNavaleGammaOptimizerV2:
    """Optimiseur Battle Navale avec niveaux options - Version 2"""
    
    def __init__(self):
        self.start_time = datetime.now()
        
        # Param√®tres Battle Navale actuels
        self.current_params = {
            "vikings_threshold": 0.25,
            "defenseurs_threshold": -0.25,
            "base_quality_min": 0.6,
            "confluence_weight": 0.3,
            "gamma_weight": 0.4,
            "pattern_weight": 0.3,
            "min_gamma_proximity": 0.5,
            "max_position_size": 2,
            "stop_loss_ticks": 8,
            "take_profit_ticks": 16
        }
        
        # Niveaux options int√©gr√©s
        self.gamma_levels = {
            "call_wall": 4550.0,
            "put_wall": 4450.0,
            "gamma_flip": 4500.0,
            "gex1": 4525.0,  # Gamma Exposure Level 1
            "gex2": 4475.0,  # Gamma Exposure Level 2
            "total_gamma": 75000000000,  # $75B
            "dealer_position": "short"
        }
        
    def generate_optimized_trades(self, num_trades: int = 200) -> List[Dict]:
        """G√©n√®re des trades optimis√©s avec gamma"""
        
        print("üîÑ G√©n√©ration trades optimis√©s avec niveaux options...")
        
        trades = []
        current_price = 4500.0
        
        for i in range(num_trades):
            # Simuler mouvement prix avec influence gamma
            price_movement = self._simulate_gamma_influenced_movement(current_price)
            new_price = current_price + price_movement
            
            # D√©terminer type de trade bas√© sur gamma
            trade_type = self._determine_trade_type_gamma(current_price, new_price)
            
            # Calculer confluence avec gamma
            confluence_score = self._calculate_gamma_confluence(current_price)
            
            # Calculer P&L avec gestion risque
            pnl, stop_loss_hit, take_profit_hit = self._calculate_risk_managed_pnl(
                current_price, new_price, trade_type
            )
            
            # Commission et slippage
            commission = 2.50
            slippage = self._calculate_gamma_slippage(current_price)
            net_pnl = pnl - commission - slippage
            
            # Dur√©e bas√©e sur gamma
            duration = self._calculate_gamma_duration(current_price)
            
            # Position size bas√© sur gamma
            position_size = self._calculate_position_size(current_price, confluence_score)
            
            trade = {
                "trade_id": f"GAMMA_OPT_{i+1:03d}",
                "timestamp": (datetime.now() - timedelta(days=num_trades-i)).isoformat(),
                "symbol": "ES",
                "trade_type": trade_type,
                "strategy": "Battle_Navale_Gamma_Optimized",
                "entry_price": round(current_price, 2),
                "exit_price": round(new_price, 2),
                "quantity": position_size,
                "gross_pnl": round(pnl * position_size, 2),
                "commission": commission * position_size,
                "slippage": round(slippage * position_size, 2),
                "net_pnl": round(net_pnl * position_size, 2),
                "duration_minutes": duration,
                "confluence_score": round(confluence_score, 3),
                "gamma_proximity": self._calculate_gamma_proximity(current_price),
                "dealer_bias": self._get_dealer_bias(current_price),
                "is_winner": net_pnl > 0,
                "exit_reason": self._get_gamma_exit_reason(net_pnl, duration, current_price, stop_loss_hit, take_profit_hit),
                "position_size": position_size,
                "risk_reward_ratio": abs(pnl / (self.current_params["stop_loss_ticks"] * 12.5)) if pnl > 0 else 0
            }
            
            trades.append(trade)
            current_price = new_price
        
        print(f"‚úÖ {len(trades)} trades optimis√©s g√©n√©r√©s")
        return trades
    
    def _simulate_gamma_influenced_movement(self, current_price: float) -> float:
        """Simule mouvement prix influenc√© par gamma - Version am√©lior√©e"""
        
        # Distance aux niveaux gamma
        call_distance = abs(current_price - self.gamma_levels["call_wall"])
        put_distance = abs(current_price - self.gamma_levels["put_wall"])
        gex1_distance = abs(current_price - self.gamma_levels["gex1"])
        gex2_distance = abs(current_price - self.gamma_levels["gex2"])
        
        # Force d'attraction gamma am√©lior√©e
        gamma_force = 0.0
        
        # Call wall attraction (r√©sistance) - plus forte
        if call_distance < 50:
            gamma_force -= (50 - call_distance) * 0.15
        
        # Put wall attraction (support) - plus forte
        if put_distance < 50:
            gamma_force += (50 - put_distance) * 0.15
        
        # GEX1 attraction - tr√®s forte
        if gex1_distance < 25:
            gamma_force -= (25 - gex1_distance) * 0.25
        
        # GEX2 attraction - tr√®s forte
        if gex2_distance < 25:
            gamma_force += (25 - gex2_distance) * 0.25
        
        # Mouvement al√©atoire + influence gamma
        random_movement = random.uniform(-20, 20)
        gamma_movement = gamma_force * 0.8
        
        return random_movement + gamma_movement
    
    def _calculate_risk_managed_pnl(self, entry_price: float, exit_price: float, trade_type: str) -> Tuple[float, bool, bool]:
        """Calcule P&L avec gestion risque"""
        
        # Stop loss et take profit en ticks
        stop_loss_ticks = self.current_params["stop_loss_ticks"]
        take_profit_ticks = self.current_params["take_profit_ticks"]
        
        # Calculer mouvement en ticks
        if trade_type == "LONG":
            price_change = exit_price - entry_price
            stop_loss_price = entry_price - (stop_loss_ticks * 0.25)
            take_profit_price = entry_price + (take_profit_ticks * 0.25)
        else:
            price_change = entry_price - exit_price
            stop_loss_price = entry_price + (stop_loss_ticks * 0.25)
            take_profit_price = entry_price - (take_profit_ticks * 0.25)
        
        # V√©rifier stop loss et take profit
        stop_loss_hit = False
        take_profit_hit = False
        
        if trade_type == "LONG":
            if exit_price <= stop_loss_price:
                price_change = -(stop_loss_ticks * 0.25)
                stop_loss_hit = True
            elif exit_price >= take_profit_price:
                price_change = take_profit_ticks * 0.25
                take_profit_hit = True
        else:
            if exit_price >= stop_loss_price:
                price_change = -(stop_loss_ticks * 0.25)
                stop_loss_hit = True
            elif exit_price <= take_profit_price:
                price_change = take_profit_ticks * 0.25
                take_profit_hit = True
        
        pnl = price_change * 50  # Multiplicateur ES
        return pnl, stop_loss_hit, take_profit_hit
    
    def _calculate_gamma_slippage(self, price: float) -> float:
        """Calcule slippage bas√© sur gamma"""
        
        gamma_proximity = self._calculate_gamma_proximity(price)
        
        # Plus proche gamma = moins de slippage
        base_slippage = 2.0
        gamma_reduction = gamma_proximity * 1.5
        
        return max(0.5, base_slippage - gamma_reduction)
    
    def _calculate_position_size(self, price: float, confluence_score: float) -> int:
        """Calcule taille position bas√©e sur gamma et confluence"""
        
        gamma_proximity = self._calculate_gamma_proximity(price)
        
        # Score composite
        composite_score = (gamma_proximity * 0.6) + (confluence_score * 0.4)
        
        # Taille position bas√©e sur score
        if composite_score > 0.8:
            return 2  # Position max
        elif composite_score > 0.6:
            return 1  # Position normale
        else:
            return 0  # Pas de trade
    
    def _determine_trade_type_gamma(self, entry_price: float, exit_price: float) -> str:
        """D√©termine type de trade bas√© sur gamma - Version am√©lior√©e"""
        
        # Proximit√© aux niveaux gamma
        call_proximity = abs(entry_price - self.gamma_levels["call_wall"])
        put_proximity = abs(entry_price - self.gamma_levels["put_wall"])
        gex1_proximity = abs(entry_price - self.gamma_levels["gex1"])
        gex2_proximity = abs(entry_price - self.gamma_levels["gex2"])
        
        # Logique am√©lior√©e
        if call_proximity < 15 or gex1_proximity < 10:
            return "SHORT"  # Tr√®s proche r√©sistance
        elif put_proximity < 15 or gex2_proximity < 10:
            return "LONG"   # Tr√®s proche support
        else:
            # Bas√© sur mouvement et dealer bias
            dealer_bias = self._get_dealer_bias(entry_price)
            if dealer_bias == "bullish":
                return "LONG"
            elif dealer_bias == "bearish":
                return "SHORT"
            else:
                return "LONG" if exit_price > entry_price else "SHORT"
    
    def _calculate_gamma_confluence(self, price: float) -> float:
        """Calcule confluence avec niveaux gamma - Version am√©lior√©e"""
        
        confluence = 0.0
        
        # Proximit√© call wall (r√©sistance)
        call_distance = abs(price - self.gamma_levels["call_wall"])
        if call_distance < 30:
            confluence += (30 - call_distance) / 30 * 0.25
        
        # Proximit√© put wall (support)
        put_distance = abs(price - self.gamma_levels["put_wall"])
        if put_distance < 30:
            confluence += (30 - put_distance) / 30 * 0.25
        
        # Proximit√© GEX1
        gex1_distance = abs(price - self.gamma_levels["gex1"])
        if gex1_distance < 15:
            confluence += (15 - gex1_distance) / 15 * 0.25
        
        # Proximit√© GEX2
        gex2_distance = abs(price - self.gamma_levels["gex2"])
        if gex2_distance < 15:
            confluence += (15 - gex2_distance) / 15 * 0.25
        
        return min(1.0, confluence)
    
    def _calculate_gamma_proximity(self, price: float) -> float:
        """Calcule proximit√© aux niveaux gamma"""
        
        distances = [
            abs(price - self.gamma_levels["call_wall"]),
            abs(price - self.gamma_levels["put_wall"]),
            abs(price - self.gamma_levels["gex1"]),
            abs(price - self.gamma_levels["gex2"])
        ]
        
        min_distance = min(distances)
        return max(0, 1 - (min_distance / 50))  # Normalis√© 0-1
    
    def _get_dealer_bias(self, price: float) -> str:
        """D√©termine biais dealer bas√© sur gamma"""
        
        if price > self.gamma_levels["gamma_flip"]:
            return "bullish"
        elif price < self.gamma_levels["gamma_flip"]:
            return "bearish"
        else:
            return "neutral"
    
    def _calculate_gamma_duration(self, price: float) -> int:
        """Calcule dur√©e trade bas√©e sur gamma"""
        
        gamma_proximity = self._calculate_gamma_proximity(price)
        
        if gamma_proximity > 0.8:
            return random.randint(3, 15)  # Tr√®s court
        elif gamma_proximity > 0.5:
            return random.randint(10, 30)  # Court
        else:
            return random.randint(20, 60)  # Moyen
    
    def _get_gamma_exit_reason(self, pnl: float, duration: int, price: float, stop_loss_hit: bool, take_profit_hit: bool) -> str:
        """D√©termine raison de sortie avec gamma"""
        
        if stop_loss_hit:
            return "GAMMA_STOP_LOSS"
        elif take_profit_hit:
            return "GAMMA_TAKE_PROFIT"
        elif pnl > 0:
            if duration < 10:
                return "QUICK_GAMMA_PROFIT"
            else:
                return "GAMMA_PROFIT"
        else:
            if duration < 5:
                return "QUICK_GAMMA_LOSS"
            else:
                return "GAMMA_LOSS"
    
    def optimize_parameters(self, trades: List[Dict]) -> Dict:
        """Optimise les param√®tres avec logique robuste"""
        
        print("\nüîß OPTIMISATION PARAM√àTRES AVANC√âE")
        print("=" * 60)
        
        # Filtrer trades valides
        valid_trades = [t for t in trades if t['position_size'] > 0]
        
        if not valid_trades:
            print("‚ö†Ô∏è Aucun trade valide pour optimisation")
            return self.current_params
        
        # Performance de base
        base_performance = self._calculate_performance(valid_trades)
        print(f"üìä Performance de base: WR {base_performance['win_rate']:.1f}%, PF {base_performance['profit_factor']:.2f}")
        
        # Param√®tres √† optimiser avec plages r√©alistes
        optimization_configs = [
            {
                "name": "stop_loss_ticks",
                "values": [6, 8, 10, 12, 15],
                "current": self.current_params["stop_loss_ticks"]
            },
            {
                "name": "take_profit_ticks", 
                "values": [12, 16, 20, 24, 30],
                "current": self.current_params["take_profit_ticks"]
            },
            {
                "name": "min_gamma_proximity",
                "values": [0.3, 0.4, 0.5, 0.6, 0.7],
                "current": self.current_params["min_gamma_proximity"]
            }
        ]
        
        best_params = self.current_params.copy()
        best_performance = base_performance
        
        for config in optimization_configs:
            param_name = config["name"]
            values = config["values"]
            
            print(f"\nüîç Test {param_name}...")
            
            param_best_value = config["current"]
            param_best_performance = best_performance
            
            for value in values:
                # Tester cette valeur
                test_params = best_params.copy()
                test_params[param_name] = value
                
                # Simuler performance avec ces param√®tres
                test_performance = self._simulate_performance_with_params(valid_trades, test_params)
                
                print(f"   {value}: WR {test_performance['win_rate']:.1f}%, PF {test_performance['profit_factor']:.2f}")
                
                # Si meilleure performance
                if test_performance['score'] > param_best_performance['score']:
                    param_best_value = value
                    param_best_performance = test_performance
            
            # Mettre √† jour meilleur param√®tre
            best_params[param_name] = param_best_value
            best_performance = param_best_performance
            
            print(f"‚úÖ {param_name} optimis√©: {param_best_value}")
        
        return best_params
    
    def _calculate_performance(self, trades: List[Dict]) -> Dict:
        """Calcule performance des trades"""
        
        if not trades:
            return {"win_rate": 0, "profit_factor": 0, "score": 0}
        
        total_trades = len(trades)
        winning_trades = len([t for t in trades if t['is_winner']])
        losing_trades = total_trades - winning_trades
        
        win_rate = (winning_trades / total_trades) * 100
        
        winners = [t for t in trades if t['is_winner']]
        losers = [t for t in trades if not t['is_winner']]
        
        avg_win = sum(t['net_pnl'] for t in winners) / len(winners) if winners else 0
        avg_loss = abs(sum(t['net_pnl'] for t in losers) / len(losers)) if losers else 0
        
        profit_factor = (avg_win * len(winners)) / (avg_loss * len(losers)) if losers and avg_loss > 0 else float('inf')
        
        # Score composite am√©lior√©
        score = (win_rate * 0.4) + (min(profit_factor, 5.0) * 15) + (len(trades) * 0.1)
        
        return {
            "win_rate": win_rate,
            "profit_factor": profit_factor,
            "avg_win": avg_win,
            "avg_loss": avg_loss,
            "total_trades": total_trades,
            "winning_trades": winning_trades,
            "losing_trades": losing_trades,
            "score": score
        }
    
    def _simulate_performance_with_params(self, trades: List[Dict], params: Dict) -> Dict:
        """Simule performance avec param√®tres donn√©s"""
        
        filtered_trades = []
        
        for trade in trades:
            # Appliquer filtres
            gamma_proximity = trade['gamma_proximity']
            confluence_score = trade['confluence_score']
            
            # Seuil gamma
            if gamma_proximity < params.get("min_gamma_proximity", 0.5):
                continue
            
            # Seuil confluence
            min_confluence = 0.2 + (gamma_proximity * 0.3)
            if confluence_score < min_confluence:
                continue
            
            # Ajuster P&L bas√© sur nouveaux param√®tres
            adjusted_trade = trade.copy()
            
            # Bonus gamma
            gamma_bonus = gamma_proximity * 0.05
            adjusted_trade['net_pnl'] = trade['net_pnl'] * (1 + gamma_bonus)
            adjusted_trade['is_winner'] = adjusted_trade['net_pnl'] > 0
            
            filtered_trades.append(adjusted_trade)
        
        return self._calculate_performance(filtered_trades)
    
    def display_comprehensive_analysis(self, trades: List[Dict]):
        """Affiche analyse compl√®te"""
        
        print("\n" + "=" * 80)
        print("üìä ANALYSE COMPL√àTE BATTLE NAVALE OPTIMIS√âE")
        print("=" * 80)
        
        # Performance g√©n√©rale
        performance = self._calculate_performance(trades)
        
        print(f"\nüéØ PERFORMANCE G√âN√âRALE")
        print("-" * 40)
        print(f"üìä Trades totaux: {performance['total_trades']}")
        print(f"‚úÖ Trades gagnants: {performance['winning_trades']}")
        print(f"‚ùå Trades perdants: {performance['losing_trades']}")
        print(f"üéØ Win Rate: {performance['win_rate']:.1f}%")
        print(f"üíπ Profit Factor: {performance['profit_factor']:.2f}")
        print(f"üí∞ Gain moyen: ${performance['avg_win']:.2f}")
        print(f"üí∏ Perte moyenne: ${performance['avg_loss']:.2f}")
        
        # Analyse par position size
        print(f"\nüìà ANALYSE PAR TAILLE POSITION")
        print("-" * 40)
        
        for size in [1, 2]:
            size_trades = [t for t in trades if t['position_size'] == size]
            if size_trades:
                size_perf = self._calculate_performance(size_trades)
                print(f"Position {size}: {len(size_trades)} trades, WR {size_perf['win_rate']:.1f}%, PF {size_perf['profit_factor']:.2f}")
        
        # Analyse par gamma
        print(f"\nüéØ ANALYSE PAR PROXIMIT√â GAMMA")
        print("-" * 40)
        
        gamma_ranges = [
            (0.8, 1.0, "Tr√®s proche gamma"),
            (0.6, 0.8, "Proche gamma"),
            (0.4, 0.6, "Mod√©r√© gamma"),
            (0.2, 0.4, "Loin gamma"),
            (0.0, 0.2, "Tr√®s loin gamma")
        ]
        
        for min_gamma, max_gamma, label in gamma_ranges:
            gamma_trades = [t for t in trades if min_gamma <= t['gamma_proximity'] < max_gamma]
            if gamma_trades:
                gamma_perf = self._calculate_performance(gamma_trades)
                print(f"{label}: {len(gamma_trades)} trades, WR {gamma_perf['win_rate']:.1f}%, PF {gamma_perf['profit_factor']:.2f}")
        
        # Meilleurs trades
        print(f"\nüèÜ MEILLEURS TRADES")
        print("-" * 40)
        
        best_trades = sorted(trades, key=lambda x: x['net_pnl'], reverse=True)[:5]
        for i, trade in enumerate(best_trades, 1):
            print(f"{i}. {trade['trade_id']}: {trade['trade_type']}")
            print(f"   üí∞ P&L: ${trade['net_pnl']:,.2f} | üéØ Gamma: {trade['gamma_proximity']:.3f}")
            print(f"   üìä Position: {trade['position_size']} | ‚è±Ô∏è Dur√©e: {trade['duration_minutes']}min")
    
    def generate_final_recommendations(self, trades: List[Dict], optimized_params: Dict):
        """G√©n√®re recommandations finales"""
        
        print("\n" + "=" * 80)
        print("üí° RECOMMANDATIONS FINALES OPTIMISATION")
        print("=" * 80)
        
        performance = self._calculate_performance(trades)
        
        print(f"\nüéØ R√âSULTATS OPTIMISATION:")
        print(f"   ‚Ä¢ Win Rate: {performance['win_rate']:.1f}%")
        print(f"   ‚Ä¢ Profit Factor: {performance['profit_factor']:.2f}")
        print(f"   ‚Ä¢ Trades totaux: {performance['total_trades']}")
        
        print(f"\n‚öôÔ∏è PARAM√àTRES OPTIMIS√âS:")
        for param, value in optimized_params.items():
            print(f"   ‚Ä¢ {param}: {value}")
        
        print(f"\nüöÄ RECOMMANDATIONS D'IMPL√âMENTATION:")
        print("   1. Int√©grer les param√®tres optimis√©s dans le syst√®me")
        print("   2. Surveiller performance en temps r√©el")
        print("   3. Ajuster selon conditions de march√©")
        print("   4. Maintenir focus sur niveaux gamma")
        
        print(f"\nüìä M√âTRIQUES CL√âS √Ä SURVEILLER:")
        print("   ‚Ä¢ Win Rate > 85%")
        print("   ‚Ä¢ Profit Factor > 2.0")
        print("   ‚Ä¢ Ratio risque/r√©compense > 1.5")
        print("   ‚Ä¢ Exposition gamma > 0.6")
    
    def run_complete_optimization(self):
        """Ex√©cute l'optimisation compl√®te"""
        
        print("üöÄ OPTIMISATION BATTLE NAVALE AVEC NIVEAUX OPTIONS - V2")
        print("=" * 80)
        print(f"‚è∞ D√©but: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # G√©n√©rer trades optimis√©s
        trades = self.generate_optimized_trades(200)
        
        # Analyser performance
        print("\nüìä ANALYSE PERFORMANCE")
        self.display_comprehensive_analysis(trades)
        
        # Optimiser param√®tres
        optimized_params = self.optimize_parameters(trades)
        
        # Analyser performance optimis√©e
        print("\nüìä ANALYSE PERFORMANCE OPTIMIS√âE")
        valid_trades = [t for t in trades if t['position_size'] > 0]
        optimized_performance = self._simulate_performance_with_params(valid_trades, optimized_params)
        print(f"‚úÖ Performance optimis√©e: WR {optimized_performance['win_rate']:.1f}%, PF {optimized_performance['profit_factor']:.2f}")
        
        # G√©n√©rer recommandations
        self.generate_final_recommendations(trades, optimized_params)
        
        # R√©sum√© final
        end_time = datetime.now()
        duration = end_time - self.start_time
        
        print(f"\n‚è∞ Fin: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚è±Ô∏è Dur√©e optimisation: {duration.total_seconds():.1f} secondes")
        
        print("\nüéâ OPTIMISATION V2 TERMIN√âE AVEC SUCC√àS !")
        print("üìä Syst√®me Battle Navale optimis√© avec gamma")
        print("üí° Pr√™t pour impl√©mentation en production")

def main():
    """Fonction principale"""
    optimizer = BattleNavaleGammaOptimizerV2()
    optimizer.run_complete_optimization()

if __name__ == "__main__":
    main()
