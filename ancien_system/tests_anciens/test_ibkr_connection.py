#!/usr/bin/env python3
"""
Test de connexion IBKR Gateway - Lundi 00h20 Session Asie
"""

import sys
import os
import time
import logging
from datetime import datetime

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.ibkr_beta_connector import IBKRBetaConnector, IBKRBetaConfig

# Configuration logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/ibkr_connection_test.log')
    ]
)

logger = logging.getLogger(__name__)

def test_ibkr_connection():
    """Test complet de la connexion IBKR"""
    
    print("üöÄ TEST CONNEXION IBKR GATEWAY - LUNDI 00H20")
    print("=" * 60)
    print(f"‚è∞ Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåç Session: ASIE (ouverte)")
    print("=" * 60)
    
    # Configuration
    config = IBKRBetaConfig()
    connector = IBKRBetaConnector(config)
    
    try:
        # 1. Test de connexion de base
        print("\n1Ô∏è‚É£ TEST CONNEXION DE BASE")
        print("-" * 30)
        
        if connector.connect():
            print("‚úÖ Connexion au Gateway r√©ussie")
        else:
            print("‚ùå √âchec connexion au Gateway")
            print("üîß V√©rifiez que IBKR Gateway est d√©marr√© sur https://localhost:5000")
            return False
        
        # 2. Test d'authentification
        print("\n2Ô∏è‚É£ TEST AUTHENTIFICATION")
        print("-" * 30)
        print("üîê Authentification requise...")
        print("üåê Ouvrez votre navigateur et allez sur: https://localhost:5000")
        print("üìù Connectez-vous avec vos identifiants IBKR")
        print("‚è≥ Attente de l'authentification...")
        
        if connector.authenticate():
            print("‚úÖ Authentification r√©ussie!")
        else:
            print("‚ùå √âchec authentification")
            return False
        
        # 3. Test informations compte
        print("\n3Ô∏è‚É£ TEST INFORMATIONS COMPTE")
        print("-" * 30)
        
        account_info = connector.get_account_info()
        if account_info:
            print("‚úÖ Informations compte r√©cup√©r√©es")
            print(f"üìä Compte: {account_info.get('accounts', [])}")
        else:
            print("‚ùå Impossible de r√©cup√©rer les informations compte")
        
        # 4. Test positions
        print("\n4Ô∏è‚É£ TEST POSITIONS")
        print("-" * 30)
        
        positions = connector.get_positions()
        if positions:
            print(f"‚úÖ {len(positions)} positions trouv√©es")
            for pos in positions:
                print(f"   üìà {pos.get('contractDesc', 'N/A')}: {pos.get('position', 0)}")
        else:
            print("‚úÖ Aucune position ouverte")
        
        # 5. Test recherche ES futures
        print("\n5Ô∏è‚É£ TEST RECHERCHE ES FUTURES")
        print("-" * 30)
        
        es_conid = connector.get_es_futures_conid()
        if es_conid:
            print(f"‚úÖ ES Futures trouv√©: CONID {es_conid}")
            
            # 6. Test donn√©es de march√© ES
            print("\n6Ô∏è‚É£ TEST DONN√âES DE MARCH√â ES")
            print("-" * 30)
            
            market_data = connector.get_market_data(es_conid)
            if market_data:
                print("‚úÖ Donn√©es de march√© ES r√©cup√©r√©es")
                print(f"   üìä Donn√©es: {market_data}")
            else:
                print("‚ùå Impossible de r√©cup√©rer les donn√©es ES")
        else:
            print("‚ùå ES Futures non trouv√©")
        
        # 7. Test donn√©es historiques
        print("\n7Ô∏è‚É£ TEST DONN√âES HISTORIQUES")
        print("-" * 30)
        
        if es_conid:
            historical_data = connector.get_historical_data(es_conid, period="1d", bar="1min")
            if historical_data:
                print(f"‚úÖ {len(historical_data)} barres historiques r√©cup√©r√©es")
                if historical_data:
                    latest_bar = historical_data[-1]
                    print(f"   üìä Derni√®re barre: {latest_bar}")
            else:
                print("‚ùå Impossible de r√©cup√©rer les donn√©es historiques")
        
        # 8. Test WebSocket (optionnel)
        print("\n8Ô∏è‚É£ TEST WEBSOCKET")
        print("-" * 30)
        
        if connector.connect_websocket():
            print("‚úÖ WebSocket connect√©")
            print("üì° Pr√™t pour les donn√©es temps r√©el")
        else:
            print("‚ö†Ô∏è WebSocket non disponible (optionnel)")
        
        # R√©sum√© final
        print("\n" + "=" * 60)
        print("üéâ TEST CONNEXION TERMIN√â")
        print("=" * 60)
        print("‚úÖ Syst√®me pr√™t pour la session Asie!")
        print("üìä Donn√©es disponibles: OHLC, Volume, Bid/Ask")
        print("üîó Connexion stable √©tablie")
        print("üöÄ MIA_IA_SYSTEM op√©rationnel")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur critique: {e}")
        logger.error(f"Erreur test connexion: {e}")
        return False
        
    finally:
        connector.disconnect()

def main():
    """Fonction principale"""
    
    # Cr√©er le dossier logs si n√©cessaire
    os.makedirs('logs', exist_ok=True)
    
    print("üîß D√©marrage test connexion IBKR...")
    
    success = test_ibkr_connection()
    
    if success:
        print("\nüéØ PROCHAINES √âTAPES:")
        print("1. Lancer la collecte de donn√©es")
        print("2. Activer les strat√©gies")
        print("3. D√©marrer le monitoring")
        print("4. Surveiller les performances")
    else:
        print("\n‚ö†Ô∏è PROBL√àMES D√âTECT√âS:")
        print("1. V√©rifier IBKR Gateway")
        print("2. Contr√¥ler l'authentification")
        print("3. V√©rifier la connectivit√© r√©seau")
        print("4. Consulter les logs pour d√©tails")

if __name__ == "__main__":
    main()
