#!/usr/bin/env python3
"""
Test SPX Final - MIA_IA_SYSTEM
===============================
Test final SPX avec Client ID 999.
"""

import time
from ib_insync import IB, Stock, Option

def test_spx_final():
    """Test SPX final"""
    print("üöÄ TEST SPX FINAL")
    print("=" * 50)
    
    # Connexion TWS Real avec Client ID 999
    ib = IB()
    
    try:
        print("1Ô∏è‚É£ Connexion TWS Real (Client ID 999)...")
        ib.connect('127.0.0.1', 7496, clientId=999)
        print("‚úÖ Connexion TWS Real OK")
        
        # 2. Test SPX Index
        print("\n2Ô∏è‚É£ Test SPX Index...")
        spx_index = Stock('SPX', 'CBOE', 'USD')
        ib.qualifyContracts(spx_index)
        spx_ticker = ib.reqMktData(spx_index)
        
        print("   ‚è≥ Attente donn√©es SPX Index...")
        time.sleep(5)
        
        if spx_ticker.marketPrice():
            print(f"‚úÖ Prix SPX Index: {spx_ticker.marketPrice()}")
        else:
            print("‚ùå Pas de prix SPX Index")
            
        if spx_ticker.bid:
            print(f"‚úÖ Bid SPX Index: {spx_ticker.bid}")
        else:
            print("‚ùå Pas de bid SPX Index")
            
        if spx_ticker.ask:
            print(f"‚úÖ Ask SPX Index: {spx_ticker.ask}")
        else:
            print("‚ùå Pas de ask SPX Index")
        
        # 3. Test SPX Options
        print("\n3Ô∏è‚É£ Test SPX Options...")
        try:
            # Test SPX Call Option
            spx_call = Option('SPX', '202412', 4500, 'C', 'CBOE')
            ib.qualifyContracts(spx_call)
            print("‚úÖ Contrat SPX Call qualifi√©")
            
            spx_call_ticker = ib.reqMktData(spx_call)
            time.sleep(3)
            
            if spx_call_ticker.marketPrice():
                print(f"‚úÖ Prix SPX Call: {spx_call_ticker.marketPrice()}")
            else:
                print("‚ùå Pas de prix SPX Call")
                
        except Exception as e:
            print(f"‚ùå Erreur SPX Options: {e}")
        
        # 4. Test SPY
        print("\n4Ô∏è‚É£ Test SPY...")
        try:
            spy_contract = Stock('SPY', 'SMART', 'USD')
            ib.qualifyContracts(spy_contract)
            spy_ticker = ib.reqMktData(spy_contract)
            time.sleep(3)
            
            if spy_ticker.marketPrice():
                print(f"‚úÖ Prix SPY: {spy_ticker.marketPrice()}")
            else:
                print("‚ùå Pas de prix SPY")
                
        except Exception as e:
            print(f"‚ùå Erreur SPY: {e}")
        
        # 5. R√©sum√© final
        print("\n5Ô∏è‚É£ R√âSUM√â FINAL")
        print("=" * 30)
        
        spx_data_available = (spx_ticker.marketPrice() or spx_ticker.bid or spx_ticker.ask)
        
        if spx_data_available:
            print("‚úÖ SPX Index: FONCTIONNEL")
            print("üéâ SUCC√àS ! SPX fonctionne !")
            print("\nüí° Votre syst√®me MIA_IA_SYSTEM peut fonctionner !")
        else:
            print("‚ùå SPX Index: MANQUANT")
            print("üí° V√©rifiez les souscriptions OPRA")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        print("\n6Ô∏è‚É£ D√©connexion...")
        ib.disconnect()
        print("‚úÖ D√©connexion propre")

if __name__ == "__main__":
    try:
        test_spx_final()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrompu")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()


