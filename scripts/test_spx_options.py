#!/usr/bin/env python3
"""
Test SPX Options - MIA_IA_SYSTEM
=================================

Test SPX Options pour votre syst√®me.

USAGE:
python scripts/test_spx_options.py
"""

import sys
import os
import time
from datetime import datetime

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

def test_spx_options():
    """Test SPX Options"""
    
    print("üöÄ TEST SPX OPTIONS")
    print("=" * 30)
    print(f"‚è∞ D√©but: {datetime.now().strftime('%H:%M:%S')}")
    
    try:
        # Import direct ib_insync
        from ib_insync import IB, Option, Stock
        
        # 1. Connexion TWS R√©el
        print("\n1Ô∏è‚É£ Connexion TWS R√©el...")
        ib = IB()
        ib.connect('127.0.0.1', 7496, clientId=1, timeout=10)
        
        if ib.isConnected():
            print("‚úÖ Connexion TWS R√©el OK")
        else:
            print("‚ùå √âchec connexion TWS R√©el")
            return
        
        # 2. Test SPX Options
        print("\n2Ô∏è‚É£ Test SPX Options...")
        
        # Test SPX Call Option
        spx_call = Option('SPX', '202412', 4500, 'C', 'CBOE')
        ib.qualifyContracts(spx_call)
        print("‚úÖ Contrat SPX Call qualifi√©")
        
        # Test SPX Put Option
        spx_put = Option('SPX', '202412', 4500, 'P', 'CBOE')
        ib.qualifyContracts(spx_put)
        print("‚úÖ Contrat SPX Put qualifi√©")
        
        # 3. Demande donn√©es SPX Options
        print("\n3Ô∏è‚É£ Demande donn√©es SPX...")
        spx_call_ticker = ib.reqMktData(spx_call)
        spx_put_ticker = ib.reqMktData(spx_put)
        
        # Attendre max 10 secondes
        print("   ‚è≥ Attente donn√©es SPX...")
        for i in range(10):
            time.sleep(1)
            if (spx_call_ticker.marketPrice() or spx_call_ticker.bid or spx_call_ticker.ask or
                spx_put_ticker.marketPrice() or spx_put_ticker.bid or spx_put_ticker.ask):
                break
            print(f"   ‚è≥ {i+1}/10 secondes...")
        
        # 4. Affichage r√©sultats SPX Call
        print("\n4Ô∏è‚É£ R√©sultats SPX Call:")
        if spx_call_ticker.marketPrice():
            print(f"‚úÖ Prix SPX Call: {spx_call_ticker.marketPrice()}")
        else:
            print("‚ùå Pas de prix SPX Call")
            
        if spx_call_ticker.bid:
            print(f"‚úÖ Bid SPX Call: {spx_call_ticker.bid}")
        else:
            print("‚ùå Pas de bid SPX Call")
            
        if spx_call_ticker.ask:
            print(f"‚úÖ Ask SPX Call: {spx_call_ticker.ask}")
        else:
            print("‚ùå Pas de ask SPX Call")
        
        # 5. Affichage r√©sultats SPX Put
        print("\n5Ô∏è‚É£ R√©sultats SPX Put:")
        if spx_put_ticker.marketPrice():
            print(f"‚úÖ Prix SPX Put: {spx_put_ticker.marketPrice()}")
        else:
            print("‚ùå Pas de prix SPX Put")
            
        if spx_put_ticker.bid:
            print(f"‚úÖ Bid SPX Put: {spx_put_ticker.bid}")
        else:
            print("‚ùå Pas de bid SPX Put")
            
        if spx_put_ticker.ask:
            print(f"‚úÖ Ask SPX Put: {spx_put_ticker.ask}")
        else:
            print("‚ùå Pas de ask SPX Put")
        
        # 6. Test SPX Index
        print("\n6Ô∏è‚É£ Test SPX Index...")
        spx_index = Stock('SPX', 'CBOE', 'USD')
        ib.qualifyContracts(spx_index)
        spx_index_ticker = ib.reqMktData(spx_index)
        
        time.sleep(3)
        
        if spx_index_ticker.marketPrice():
            print(f"‚úÖ Prix SPX Index: {spx_index_ticker.marketPrice()}")
        else:
            print("‚ùå Pas de prix SPX Index")
        
        # 7. Test Put/Call Ratio
        print("\n7Ô∏è‚É£ Test Put/Call Ratio...")
        try:
            # Calculer le ratio Put/Call basique
            put_volume = spx_put_ticker.volume if spx_put_ticker.volume else 0
            call_volume = spx_call_ticker.volume if spx_call_ticker.volume else 0
            
            if call_volume > 0:
                put_call_ratio = put_volume / call_volume
                print(f"‚úÖ Put/Call Ratio: {put_call_ratio:.3f}")
            else:
                print("‚ùå Pas de donn√©es volume pour Put/Call Ratio")
        except Exception as e:
            print(f"‚ùå Erreur Put/Call Ratio: {e}")
        
        # 8. R√©sum√© final
        print("\n" + "=" * 30)
        print("üìä R√âSUM√â SPX OPTIONS")
        print("=" * 30)
        print("‚úÖ Connexion: OK")
        print("‚úÖ TWS: Connect√©")
        print("‚úÖ Mode: R√âEL")
        
        spx_data_available = (spx_call_ticker.marketPrice() or spx_call_ticker.bid or spx_call_ticker.ask or
                             spx_put_ticker.marketPrice() or spx_put_ticker.bid or spx_put_ticker.ask)
        
        if spx_data_available:
            print("‚úÖ Donn√©es SPX: R√âCUP√âR√âES")
            print("üéâ SUCC√àS ! SPX Options fonctionne !")
        else:
            print("‚ùå Donn√©es SPX: MANQUANTES")
            
        print(f"‚è∞ Fin: {datetime.now().strftime('%H:%M:%S')}")
        
        # D√©connexion
        ib.disconnect()
        print("‚úÖ D√©connexion propre")
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    try:
        test_spx_options()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrompu")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()


