
#!/usr/bin/env python3
"""
Relance automatique MIA_IA_SYSTEM apr√®s corrections
"""

import os
import sys
import time
import subprocess
from datetime import datetime

def relancer_systeme():
    """Relancer le syst√®me apr√®s corrections"""
    
    print("üöÄ Relance automatique MIA_IA_SYSTEM...")
    
    # 1. Ex√©cuter les corrections
    print("\nüìã Ex√©cution des corrections...")
    
    corrections = [
        "python corriger_ohlc_auto.py",
        "python optimiser_tws.py", 
        "python verifier_volumes.py"
    ]
    
    for correction in corrections:
        try:
            print(f"   üîß Ex√©cution: {correction}")
            result = subprocess.run(correction, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"   ‚úÖ Succ√®s: {correction}")
            else:
                print(f"   ‚ö†Ô∏è Erreur: {correction}")
        except Exception as e:
            print(f"   ‚ùå Exception: {correction} - {e}")
    
    # 2. Attendre un peu
    print("\n‚è∞ Attente 10 secondes...")
    time.sleep(10)
    
    # 3. Relancer le syst√®me
    print("\nüöÄ Relance du syst√®me...")
    
    restart_commands = [
        "python lance_mia_ia_tws.py",
        "python launch_24_7_orderflow_trading.py"
    ]
    
    for command in restart_commands:
        if os.path.exists(command.split()[1]):
            try:
                print(f"   üöÄ Lancement: {command}")
                subprocess.Popen(command, shell=True)
                print(f"   ‚úÖ Syst√®me relanc√©: {command}")
                break
            except Exception as e:
                print(f"   ‚ùå Erreur relance: {command} - {e}")
    
    print("\n‚úÖ Relance automatique termin√©e")

if __name__ == "__main__":
    relancer_systeme()
