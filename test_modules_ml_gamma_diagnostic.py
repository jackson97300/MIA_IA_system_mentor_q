#!/usr/bin/env python3
"""
üîç DIAGNOSTIC ML ENSEMBLE & GAMMA CYCLES - MIA_IA_SYSTEM
==========================================================

Diagnostic sp√©cifique pour identifier et r√©soudre les probl√®mes avec:
- ML Ensemble Filter
- Gamma Cycles Analyzer

Author: MIA_IA_SYSTEM
Version: Diagnostic v1.0
Date: Juillet 2025
"""

import sys
import traceback
import time
from pathlib import Path
from datetime import datetime

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

print("üîç === DIAGNOSTIC ML ENSEMBLE & GAMMA CYCLES ===")
print("üéØ Identification des probl√®mes d'import et d'int√©gration")
print("=" * 60)

# Test 1: V√©rification des imports de base
print("\nüìã TEST 1: IMPORTS DE BASE")
print("-" * 40)

try:
    import numpy as np
    print("‚úÖ NumPy disponible")
except ImportError as e:
    print(f"‚ùå NumPy manquant: {e}")
    print("üí° Solution: pip install numpy")

try:
    import pandas as pd
    print("‚úÖ Pandas disponible")
except ImportError as e:
    print(f"‚ùå Pandas manquant: {e}")
    print("üí° Solution: pip install pandas")

try:
    import sklearn
    print("‚úÖ Scikit-learn disponible")
except ImportError as e:
    print(f"‚ùå Scikit-learn manquant: {e}")
    print("üí° Solution: pip install scikit-learn")

try:
    import xgboost as xgb
    print("‚úÖ XGBoost disponible")
except ImportError as e:
    print(f"‚ùå XGBoost manquant: {e}")
    print("üí° Solution: pip install xgboost")

# Test 2: Diagnostic ML Ensemble Filter
print("\nü§ñ TEST 2: ML ENSEMBLE FILTER")
print("-" * 40)

try:
    print("üîç Tentative d'import ML Ensemble Filter...")
    from ml.ensemble_filter import MLEnsembleFilter, EnsembleConfig, EnsemblePrediction
    print("‚úÖ Import ML Ensemble Filter r√©ussi")
    
    # Test cr√©ation instance
    try:
        config = EnsembleConfig()
        print("‚úÖ EnsembleConfig cr√©√©")
    except Exception as e:
        print(f"‚ùå Erreur EnsembleConfig: {e}")
        config = None
    
    try:
        ml_filter = MLEnsembleFilter(config)
        print("‚úÖ MLEnsembleFilter cr√©√©")
        
        # Test pr√©diction basique
        test_features = {
            "confluence_score": 0.75,
            "momentum_flow": 0.8,
            "trend_alignment": 0.7,
            "volume_profile": 0.6
        }
        
        try:
            prediction = ml_filter.predict_signal_quality(test_features)
            print(f"‚úÖ Pr√©diction ML r√©ussie: confidence={prediction.confidence:.3f}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur pr√©diction ML: {e}")
            
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation MLEnsembleFilter: {e}")
        print(f"üìã Traceback: {traceback.format_exc()}")
        
except ImportError as e:
    print(f"‚ùå Import ML Ensemble Filter √©chou√©: {e}")
    print(f"üìã Traceback: {traceback.format_exc()}")

# Test 3: Diagnostic Gamma Cycles Analyzer
print("\nüìä TEST 3: GAMMA CYCLES ANALYZER")
print("-" * 40)

try:
    print("üîç Tentative d'import Gamma Cycles...")
    from ml.gamma_cycles import (
        GammaCyclesAnalyzer, 
        GammaCycleConfig, 
        GammaCycleAnalysis, 
        GammaPhase
    )
    print("‚úÖ Import Gamma Cycles r√©ussi")
    
    # Test cr√©ation instance
    try:
        gamma_config = GammaCycleConfig()
        print("‚úÖ GammaCycleConfig cr√©√©")
    except Exception as e:
        print(f"‚ùå Erreur GammaCycleConfig: {e}")
        gamma_config = None
    
    try:
        gamma_analyzer = GammaCyclesAnalyzer(gamma_config)
        print("‚úÖ GammaCyclesAnalyzer cr√©√©")
        
        # Test analyse basique
        try:
            analysis = gamma_analyzer.analyze_gamma_cycle()
            print(f"‚úÖ Analyse Gamma r√©ussie: phase={analysis.gamma_phase.value}")
            print(f"   Facteur ajustement: {analysis.adjustment_factor:.2f}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur analyse Gamma: {e}")
            
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation GammaCyclesAnalyzer: {e}")
        print(f"üìã Traceback: {traceback.format_exc()}")
        
except ImportError as e:
    print(f"‚ùå Import Gamma Cycles √©chou√©: {e}")
    print(f"üìã Traceback: {traceback.format_exc()}")

# Test 4: V√©rification des d√©pendances ML
print("\nüîß TEST 4: D√âPENDANCES ML")
print("-" * 40)

try:
    # V√©rifier si les dossiers n√©cessaires existent
    models_path = Path("ml/models")
    if models_path.exists():
        print(f"‚úÖ Dossier mod√®les existe: {models_path}")
    else:
        print(f"‚ö†Ô∏è Dossier mod√®les manquant: {models_path}")
        print("üí° Le syst√®me cr√©era automatiquement les mod√®les de base")
    
    # V√©rifier les fichiers de configuration
    config_files = [
        "ml/ensemble_filter.py",
        "ml/gamma_cycles.py"
    ]
    
    for config_file in config_files:
        if Path(config_file).exists():
            print(f"‚úÖ Fichier existe: {config_file}")
        else:
            print(f"‚ùå Fichier manquant: {config_file}")
            
except Exception as e:
    print(f"‚ùå Erreur v√©rification d√©pendances: {e}")

# Test 5: Test d'int√©gration dans automation_main
print("\nüöÄ TEST 5: INT√âGRATION AUTOMATION_MAIN")
print("-" * 40)

try:
    from automation_main import MIAAutomationSystem, AutomationConfig
    
    # Configuration de test
    config = AutomationConfig(
        ml_ensemble_enabled=True,
        gamma_cycles_enabled=True
    )
    
    print("‚úÖ Import automation_main r√©ussi")
    
    try:
        system = MIAAutomationSystem(config)
        print("‚úÖ MIAAutomationSystem cr√©√©")
        
        # V√©rifier les composants ML
        if hasattr(system, 'ml_filter') and system.ml_filter:
            print("‚úÖ ML Filter int√©gr√© dans le syst√®me")
        else:
            print("‚ö†Ô∏è ML Filter non disponible dans le syst√®me")
            
        if hasattr(system, 'gamma_analyzer') and system.gamma_analyzer:
            print("‚úÖ Gamma Analyzer int√©gr√© dans le syst√®me")
        else:
            print("‚ö†Ô∏è Gamma Analyzer non disponible dans le syst√®me")
            
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation syst√®me: {e}")
        print(f"üìã Traceback: {traceback.format_exc()}")
        
except ImportError as e:
    print(f"‚ùå Import automation_main √©chou√©: {e}")

# Test 6: Test de simulation avec fallback
print("\nüéØ TEST 6: SIMULATION AVEC FALLBACK")
print("-" * 40)

try:
    # Test avec classes mock si n√©cessaire
    class MockMLEnsembleFilter:
        def __init__(self):
            self.is_trained = True
        def predict_signal_quality(self, features):
            class MockPrediction:
                def __init__(self):
                    self.confidence = 0.75
                    self.signal_approved = True
                    self.models_used = ["mock"]
                    self.processing_time_ms = 10.0
            return MockPrediction()
    
    class MockGammaCyclesAnalyzer:
        def __init__(self, config):
            self.config = config
        def analyze_gamma_cycle(self):
            class MockAnalysis:
                def __init__(self):
                    self.gamma_phase = type('GammaPhase', (), {'value': 'normal'})()
                    self.adjustment_factor = 1.0
                    self.volatility_expectation = "normal"
            return MockAnalysis()
    
    # Test avec mocks
    mock_ml = MockMLEnsembleFilter()
    mock_gamma = MockGammaCyclesAnalyzer(None)
    
    # Test pr√©diction mock
    test_features = {"confluence_score": 0.8}
    mock_prediction = mock_ml.predict_signal_quality(test_features)
    print(f"‚úÖ Mock ML: confidence={mock_prediction.confidence:.3f}")
    
    # Test analyse mock
    mock_analysis = mock_gamma.analyze_gamma_cycle()
    print(f"‚úÖ Mock Gamma: phase={mock_analysis.gamma_phase.value}")
    
    print("‚úÖ Simulation avec fallback r√©ussie")
    
except Exception as e:
    print(f"‚ùå Erreur simulation fallback: {e}")

# R√©sultats finaux
print("\n" + "=" * 60)
print("üéØ R√âSULTATS DU DIAGNOSTIC")
print("=" * 60)

print("""
üìä R√âSUM√â DES PROBL√àMES IDENTIFI√âS:

1. IMPORTS DE BASE:
   - V√©rifier que numpy, pandas, scikit-learn, xgboost sont install√©s
   - Commandes: pip install numpy pandas scikit-learn xgboost

2. ML ENSEMBLE FILTER:
   - Probl√®me possible: d√©pendances ML manquantes
   - Solution: installer les packages ML requis
   - Fallback disponible si probl√®me persiste

3. GAMMA CYCLES ANALYZER:
   - Probl√®me possible: imports circulaires ou d√©pendances
   - Solution: v√©rifier la structure des imports
   - Fallback disponible si probl√®me persiste

4. INT√âGRATION:
   - Les modules sont int√©gr√©s dans automation_main.py
   - Fallback gracieux en cas de probl√®me
   - Syst√®me fonctionne m√™me si modules ML indisponibles

üí° SOLUTIONS RECOMMAND√âES:

1. Installer les d√©pendances ML:
   pip install numpy pandas scikit-learn xgboost

2. V√©rifier la structure des imports dans ml/

3. Utiliser les fallbacks si probl√®mes persistants

4. Le syst√®me fonctionne m√™me sans ML - mode d√©grad√© disponible
""")

print("\nüèÜ DIAGNOSTIC TERMIN√â !")
print("üöÄ Le syst√®me MIA_IA reste op√©rationnel m√™me avec les probl√®mes ML identifi√©s !") 