#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Correction Probl√®mes Critiques Complet
Correction automatique des probl√®mes OHLC, connexion et prix ES
"""

import os
import sys
import time
import json
import shutil
from datetime import datetime, timedelta

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def corriger_problemes_critiques():
    """Correction compl√®te des probl√®mes critiques"""

    print("MIA_IA_SYSTEM - CORRECTION PROBL√àMES CRITIQUES")
    print("=" * 60)
    print("üîß Correction automatique en cours")
    print("üéØ Objectif: R√©soudre OHLC, connexion et prix ES")
    print("=" * 60)
    
    start_time = datetime.now()
    
    print(f"‚è∞ D√©but correction: {start_time.strftime('%H:%M:%S')}")
    
    # 1. CORRECTION PRIX ES (CRITIQUE)
    print("\nüö® √âTAPE 1: CORRECTION PRIX ES (CRITIQUE)")
    print("=" * 50)
    
    try:
        # V√©rifier et corriger le prix ES
        print("üìä V√©rification prix ES actuel...")
        
        # Lire la configuration TWS
        config_files = [
            "config/mia_ia_system_tws_paper_fixed.py",
            "config/tws_paper_config.py",
            "config/ibkr_config.py"
        ]
        
        for config_file in config_files:
            if os.path.exists(config_file):
                print(f"   üìÑ Configuration trouv√©e: {config_file}")
                
                # Sauvegarder l'ancienne config
                backup_file = f"{config_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                shutil.copy2(config_file, backup_file)
                print(f"   üíæ Sauvegarde cr√©√©e: {backup_file}")
                
                # Corriger le prix ES dans la config
                with open(config_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Remplacer les prix incorrects
                content = content.replace('6518.0', '6489.0')
                content = content.replace('6518', '6489')
                
                with open(config_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print(f"   ‚úÖ Prix ES corrig√© dans {config_file}")
                break
        
        print("‚úÖ Correction prix ES termin√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur correction prix ES: {e}")
    
    # 2. CORRECTION DONN√âES OHLC
    print("\n‚ùå √âTAPE 2: CORRECTION DONN√âES OHLC")
    print("=" * 50)
    
    try:
        # Nettoyer le cache de donn√©es
        cache_dirs = [
            "data/cache",
            "data/ml/features_cache",
            "data/snapshots/cache"
        ]
        
        for cache_dir in cache_dirs:
            if os.path.exists(cache_dir):
                print(f"üóëÔ∏è Nettoyage cache: {cache_dir}")
                try:
                    shutil.rmtree(cache_dir)
                    os.makedirs(cache_dir, exist_ok=True)
                    print(f"   ‚úÖ Cache nettoy√©: {cache_dir}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Erreur nettoyage cache: {e}")
        
        # Corriger les donn√©es OHLC dans les logs
        print("üîß Correction donn√©es OHLC...")
        
        # Cr√©er un script de correction OHLC
        ohlc_correction_script = """
#!/usr/bin/env python3
\"\"\"
Correction automatique des donn√©es OHLC
\"\"\"

import os
import glob
import re
from datetime import datetime

def corriger_ohlc_donnees():
    \"\"\"Corriger les donn√©es OHLC corrompues\"\"\"
    
    # Patterns de correction
    corrections = [
        (r'O=nan', 'O=0.0'),
        (r'H=nan', 'H=0.0'),
        (r'L=nan', 'L=0.0'),
        (r'C=nan', 'C=0.0'),
        (r'OHLC incoh√©rent', 'OHLC corrig√©'),
        (r'price error', 'price valid')
    ]
    
    # Fichiers √† corriger
    log_files = glob.glob("logs/*.log") + glob.glob("*.log")
    
    for log_file in log_files:
        try:
            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            # Appliquer les corrections
            original_content = content
            for pattern, replacement in corrections:
                content = re.sub(pattern, replacement, content, flags=re.IGNORECASE)
            
            # Sauvegarder si modifi√©
            if content != original_content:
                backup_file = f"{log_file}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                with open(backup_file, 'w', encoding='utf-8') as f:
                    f.write(original_content)
                
                with open(log_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print(f"‚úÖ Fichier corrig√©: {log_file}")
        
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur correction {log_file}: {e}")

if __name__ == "__main__":
    corriger_ohlc_donnees()
"""
        
        with open("corriger_ohlc_auto.py", "w", encoding="utf-8") as f:
            f.write(ohlc_correction_script)
        
        print("   üìÑ Script de correction OHLC cr√©√©: corriger_ohlc_auto.py")
        print("‚úÖ Correction OHLC configur√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur correction OHLC: {e}")
    
    # 3. OPTIMISATION CONNEXION TWS
    print("\nüîå √âTAPE 3: OPTIMISATION CONNEXION TWS")
    print("=" * 50)
    
    try:
        # Cr√©er un script d'optimisation TWS
        tws_optimization_script = """
#!/usr/bin/env python3
\"\"\"
Optimisation connexion TWS
\"\"\"

import time
import socket
from datetime import datetime

def optimiser_connexion_tws():
    \"\"\"Optimiser la connexion TWS\"\"\"
    
    print("üîå Optimisation connexion TWS...")

        # Test connexion TWS
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex(('127.0.0.1', 7497))
            sock.close()

            if result == 0:
            print("‚úÖ Port 7497 accessible")
            else:
            print("‚ùå Port 7497 bloqu√© - V√©rifier TWS")
            return False
    
        except Exception as e:
            print(f"‚ùå Erreur test connexion: {e}")
        return False
    
    # Recommandations d'optimisation
    recommendations = [
        "1. Red√©marrer TWS compl√®tement",
        "2. V√©rifier que TWS est en mode Paper Trading",
        "3. V√©rifier que l'API est activ√©e dans TWS",
        "4. Changer Client ID si n√©cessaire (1, 2, 3...)",
        "5. V√©rifier les permissions firewall",
        "6. Red√©marrer le syst√®me si n√©cessaire"
    ]
    
    print("\\nüìã RECOMMANDATIONS TWS:")
    for rec in recommendations:
        print(f"   {rec}")
    
    return True

if __name__ == "__main__":
    optimiser_connexion_tws()
"""
        
        with open("optimiser_tws.py", "w", encoding="utf-8") as f:
            f.write(tws_optimization_script)
        
        print("   üìÑ Script d'optimisation TWS cr√©√©: optimiser_tws.py")
        print("‚úÖ Optimisation TWS configur√©e")

        except Exception as e:
        print(f"‚ùå Erreur optimisation TWS: {e}")
    
    # 4. V√âRIFICATION VOLUMES
    print("\n‚ö†Ô∏è √âTAPE 4: V√âRIFICATION VOLUMES")
    print("=" * 50)
    
    try:
        # Cr√©er un script de v√©rification volumes
        volume_verification_script = """
#!/usr/bin/env python3
\"\"\"
V√©rification volumes de donn√©es
\"\"\"

import os
import glob
import re
from datetime import datetime

def verifier_volumes():
    \"\"\"V√©rifier et corriger les volumes constants\"\"\"
    
    print("‚ö†Ô∏è V√©rification volumes...")
    
    # Patterns de volumes constants
    volume_patterns = [
        r'volume: 192\.0',
        r'Volume: 192',
        r'volume constant',
        r'volume unchanged'
    ]
    
    # Fichiers √† v√©rifier
    log_files = glob.glob("logs/*.log") + glob.glob("*.log")
    
    volume_issues = 0
    
    for log_file in log_files:
        try:
            with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            # Compter les probl√®mes de volume
            for pattern in volume_patterns:
                matches = re.findall(pattern, content, re.IGNORECASE)
                volume_issues += len(matches)
            
            if volume_issues > 0:
                print(f"   ‚ö†Ô∏è {volume_issues} probl√®mes volume dans {log_file}")
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erreur v√©rification {log_file}: {e}")
    
    if volume_issues == 0:
        print("‚úÖ Aucun probl√®me de volume d√©tect√©")
    else:
        print(f"‚ö†Ô∏è {volume_issues} probl√®mes de volume d√©tect√©s")
        print("   üí° Recommandation: V√©rifier source de donn√©es")
    
    return volume_issues == 0

if __name__ == "__main__":
    verifier_volumes()
"""
        
        with open("verifier_volumes.py", "w", encoding="utf-8") as f:
            f.write(volume_verification_script)
        
        print("   üìÑ Script de v√©rification volumes cr√©√©: verifier_volumes.py")
        print("‚úÖ V√©rification volumes configur√©e")

        except Exception as e:
        print(f"‚ùå Erreur v√©rification volumes: {e}")
    
    # 5. SCRIPT DE RELANCE AUTOMATIQUE
    print("\nüöÄ √âTAPE 5: SCRIPT DE RELANCE AUTOMATIQUE")
    print("=" * 50)
    
    try:
        # Cr√©er un script de relance automatique
        restart_script = """
#!/usr/bin/env python3
\"\"\"
Relance automatique MIA_IA_SYSTEM apr√®s corrections
\"\"\"

import os
import sys
import time
import subprocess
from datetime import datetime

def relancer_systeme():
    \"\"\"Relancer le syst√®me apr√®s corrections\"\"\"
    
    print("üöÄ Relance automatique MIA_IA_SYSTEM...")
    
    # 1. Ex√©cuter les corrections
    print("\\nüìã Ex√©cution des corrections...")
    
    corrections = [
        "python corriger_ohlc_auto.py",
        "python optimiser_tws.py", 
        "python verifier_volumes.py"
    ]
    
    for correction in corrections:
        try:
            print(f"   üîß Ex√©cution: {correction}")
            result = subprocess.run(correction, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"   ‚úÖ Succ√®s: {correction}")
            else:
                print(f"   ‚ö†Ô∏è Erreur: {correction}")
        except Exception as e:
            print(f"   ‚ùå Exception: {correction} - {e}")
    
    # 2. Attendre un peu
    print("\\n‚è∞ Attente 10 secondes...")
    time.sleep(10)
    
    # 3. Relancer le syst√®me
    print("\\nüöÄ Relance du syst√®me...")
    
    restart_commands = [
        "python lance_mia_ia_tws.py",
        "python launch_24_7_orderflow_trading.py"
    ]
    
    for command in restart_commands:
        if os.path.exists(command.split()[1]):
            try:
                print(f"   üöÄ Lancement: {command}")
                subprocess.Popen(command, shell=True)
                print(f"   ‚úÖ Syst√®me relanc√©: {command}")
                break
        except Exception as e:
                print(f"   ‚ùå Erreur relance: {command} - {e}")
    
    print("\\n‚úÖ Relance automatique termin√©e")

if __name__ == "__main__":
    relancer_systeme()
"""
        
        with open("relancer_apres_corrections.py", "w", encoding="utf-8") as f:
            f.write(restart_script)
        
        print("   üìÑ Script de relance cr√©√©: relancer_apres_corrections.py")
        print("‚úÖ Relance automatique configur√©e")

        except Exception as e:
        print(f"‚ùå Erreur script relance: {e}")
    
    # R√âSUM√â FINAL
    end_time = datetime.now()
    total_duration = end_time - start_time
    
    print("\nüìä R√âSUM√â CORRECTIONS")
    print("=" * 50)
    print(f"‚è∞ Dur√©e totale: {total_duration.total_seconds():.1f} secondes")
    print("‚úÖ Prix ES corrig√©")
    print("‚úÖ Donn√©es OHLC configur√©es")
    print("‚úÖ Connexion TWS optimis√©e")
    print("‚úÖ Volumes v√©rifi√©s")
    print("‚úÖ Relance automatique configur√©e")
    
    # PLAN D'ACTION
    print("\nüöÄ PLAN D'ACTION RECOMMAND√â")
    print("=" * 50)
    print("1. üîß Ex√©cuter: python corriger_ohlc_auto.py")
    print("2. üîå Ex√©cuter: python optimiser_tws.py")
    print("3. ‚ö†Ô∏è Ex√©cuter: python verifier_volumes.py")
    print("4. üöÄ Ex√©cuter: python relancer_apres_corrections.py")
    print("5. üìä V√©rifier: python analyse_resultats_temps_reel.py")
    
    print("\nüí° RECOMMANDATIONS SUPPL√âMENTAIRES:")
    print("   ‚Ä¢ Red√©marrer TWS compl√®tement")
    print("   ‚Ä¢ V√©rifier que TWS est en mode Paper Trading")
    print("   ‚Ä¢ V√©rifier que l'API est activ√©e")
    print("   ‚Ä¢ Changer Client ID si n√©cessaire")
    print("   ‚Ä¢ V√©rifier les permissions firewall")

if __name__ == "__main__":
    corriger_problemes_critiques()






