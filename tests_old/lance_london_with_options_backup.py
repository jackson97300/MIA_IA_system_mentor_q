#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Lancement Session London avec Options Backup
Utilise les donn√©es options sauvegard√©es du 11 ao√ªt pour la session London
"""

import os
import sys
import json
import pandas as pd
from datetime import datetime, timedelta
from pathlib import Path

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.logger import get_logger
from data.options_data_manager import OPTIONS_DATA_MANAGER

logger = get_logger(__name__)

def load_options_backup():
    """Charger les donn√©es options sauvegard√©es"""
    backup_path = Path("data/backups/options_spx_20250811_152715")
    
    if not backup_path.exists():
        logger.error("‚ùå Backup options non trouv√©")
        return None
    
    # Charger les donn√©es finales
    final_file = backup_path / "options_snapshots" / "spx_final_20250811.json"
    
    if final_file.exists():
        try:
            with open(final_file, 'r') as f:
                data = json.load(f)
            logger.info(f"‚úÖ Donn√©es options charg√©es: {final_file}")
            return data
        except Exception as e:
            logger.error(f"‚ùå Erreur chargement: {e}")
            return None
    else:
        logger.error(f"‚ùå Fichier final non trouv√©: {final_file}")
        return None

def create_session_config(options_data):
    """Cr√©er la configuration de session avec les donn√©es options"""
    
    session_config = {
        "session_info": {
            "session": "LONDON",
            "start_time": datetime.now().isoformat(),
            "options_source": "backup_20250811",
            "valid_until": "2025-08-12T15:30:00"
        },
        "options_data": options_data,
        "trading_config": {
            "session": "london",
            "focus": "Trend continuation",
            "risk_level": "High",
            "volume": "Elev√©",
            "key_levels": [
                "Gamma Exposure",
                "Pin Risk", 
                "Dealer Positioning"
            ]
        },
        "gamma_levels_proximity": {
            "enabled": True,
            "source": "backup",
            "weight": 0.28  # 28% comme dans le syst√®me
        }
    }
    
    return session_config

def save_session_config(config):
    """Sauvegarder la configuration de session"""
    session_dir = Path("data/preparation/sessions_20250812")
    session_dir.mkdir(parents=True, exist_ok=True)
    
    config_file = session_dir / "london_session_config.json"
    
    with open(config_file, 'w') as f:
        json.dump(config, f, indent=2)
    
    logger.info(f"‚úÖ Configuration session sauvegard√©e: {config_file}")
    return config_file

def launch_london_session():
    """Lancer la session London avec options backup"""
    
    logger.info("üöÄ Lancement Session London avec Options Backup")
    
    # 1. Charger les donn√©es options sauvegard√©es
    options_data = load_options_backup()
    if not options_data:
        logger.error("‚ùå Impossible de charger les donn√©es options")
        return False
    
    # 2. Cr√©er la configuration de session
    session_config = create_session_config(options_data)
    
    # 3. Sauvegarder la configuration
    config_file = save_session_config(session_config)
    
    # 4. Lancer le syst√®me principal avec la configuration
    logger.info("üéØ Lancement du syst√®me principal...")
    
    # Importer et lancer le syst√®me principal
    try:
        from launch_24_7_orderflow_trading import main
        
        # Passer les arguments pour le mode London avec options
        sys.argv = [
            'launch_24_7_orderflow_trading.py',
            '--live',  # Mode paper trading
            '--session', 'london',
            '--options-backup', str(config_file)
        ]
        
        main()
        
    except ImportError as e:
        logger.error(f"‚ùå Erreur import syst√®me principal: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur lancement: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = launch_london_session()
    
    if success:
        logger.info("‚úÖ Session London lanc√©e avec succ√®s avec options backup")
    else:
        logger.error("‚ùå √âchec lancement session London")
        sys.exit(1)






