#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Machine Learning Package
üß† MOD√àLES ML PROGRESSIFS & PR√âDICTIFS
Version: Production Ready - CORRIG√â
Performance: Training rapide, validation robuste, monitoring continu

CORRECTIONS APPLIQU√âES:
- Fix SyntaxError ligne 39
- Import logging correctement plac√©
- Remplacement des print() par logger

MODULES DISPONIBLES :
- simple_model : Mod√®le lin√©aire de base pour signals trading
- data_processor : Pr√©paration donn√©es ML avec feature engineering
- model_validator : Validation mod√®les (overfitting, stabilit√©, performance)
- model_trainer : Training progressif avec early stopping & monitoring
"""

import sys
import logging

if sys.platform == "win32":

# Configure logging
logger = logging.getLogger(__name__)

# === IMPORTS CONDITIONNELS AVEC GESTION ERREURS ===

# Simple Model
try:
    from .simple_model import (
        SimpleLinearModel,
        ModelType,
        ModelStatus,
        ModelPerformance,
        ModelConfig,
        TrainingResult,
        create_signal_classifier,
        create_profitability_predictor,
        create_signal_strength_model,
        test_simple_model
    )
    SIMPLE_MODEL_AVAILABLE = True
    logger.debug("simple_model import√© avec succ√®s")
except ImportError as e:
    logger.warning(f"simple_model import failed: {e}")
    SIMPLE_MODEL_AVAILABLE = False

# Data Processor
try:
    from .data_processor import (
        MLDataProcessor,
        ProcessedDataset,
        DataQualityReport,
        FeatureStats,
        ProcessingConfig,
        DataQuality,
        FeatureType,
        ScalingMethod,
        SplitMethod,
        create_ml_data_processor,
        create_battle_navale_processor,
        test_ml_data_processor
    )
    DATA_PROCESSOR_AVAILABLE = True
    logger.debug("data_processor import√© avec succ√®s")
except ImportError as e:
    logger.warning(f"data_processor import failed: {e}")
    DATA_PROCESSOR_AVAILABLE = False

# Model Validator
try:
    from .model_validator import (
        ModelValidator,
        ValidationReport,
        CrossValidationResult,
        OutOfSampleResult,
        FeatureImportanceAnalysis,
        OverfittingAnalysis,
        ModelStabilityTest,
        ValidationMethod,
        ValidationLevel,
        OverfittingLevel,
        ModelHealth,
        create_model_validator,
        create_rigorous_validator,
        create_exhaustive_validator,
        test_model_validator
    )
    MODEL_VALIDATOR_AVAILABLE = True
    logger.debug("model_validator import√© avec succ√®s")
except ImportError as e:
    logger.warning(f"model_validator import failed: {e}")
    MODEL_VALIDATOR_AVAILABLE = False

# Model Trainer
try:
    from .model_trainer import (
        ModelTrainer,
        TrainingSession,
        TrainingConfig,
        TrainingStatus,
        TrainingMode,
        TrainingPlan,
        ModelRegistry,
        TrainingResult as TrainerResult,
        create_model_trainer,
        create_battle_navale_trainer,
        test_model_trainer
    )
    MODEL_TRAINER_AVAILABLE = True
    logger.debug("model_trainer import√© avec succ√®s")
except ImportError as e:
    logger.warning(f"model_trainer import failed: {e}")
    MODEL_TRAINER_AVAILABLE = False

# === ALIAS POUR COMPATIBILIT√â ===
# Maintien compatibilit√© avec imports existants
if SIMPLE_MODEL_AVAILABLE:
    SimpleMLModel = SimpleLinearModel  # Alias principal

# Version info
__version__ = "1.0.0"
__author__ = "MIA Trading System - ML Team"

# === EXPORTS DYNAMIQUES ===

__all__ = []

# Simple Model exports
if SIMPLE_MODEL_AVAILABLE:
    __all__.extend([
        'SimpleMLModel',  # Alias
        'SimpleLinearModel',
        'ModelType',
        'ModelStatus',
        'ModelPerformance',
        'ModelConfig',
        'TrainingResult',
        'create_signal_classifier',
        'create_profitability_predictor',
        'create_signal_strength_model',
        'test_simple_model'
    ])

# Data Processor exports
if DATA_PROCESSOR_AVAILABLE:
    __all__.extend([
        'MLDataProcessor',
        'ProcessedDataset',
        'DataQualityReport',
        'FeatureStats',
        'ProcessingConfig',
        'DataQuality',
        'FeatureType',
        'ScalingMethod',
        'SplitMethod',
        'create_ml_data_processor',
        'create_battle_navale_processor',
        'test_ml_data_processor'
    ])

# Model Validator exports
if MODEL_VALIDATOR_AVAILABLE:
    __all__.extend([
        'ModelValidator',
        'ValidationReport',
        'CrossValidationResult',
        'OutOfSampleResult',
        'FeatureImportanceAnalysis',
        'OverfittingAnalysis',
        'ModelStabilityTest',
        'ValidationMethod',
        'ValidationLevel',
        'OverfittingLevel',
        'ModelHealth',
        'create_model_validator',
        'create_rigorous_validator',
        'create_exhaustive_validator',
        'test_model_validator'
    ])

# Model Trainer exports
if MODEL_TRAINER_AVAILABLE:
    __all__.extend([
        'ModelTrainer',
        'TrainingSession',
        'TrainingConfig',
        'TrainingStatus',
        'TrainingMode',
        'TrainingPlan',
        'ModelRegistry',
        'TrainerResult',
        'create_model_trainer',
        'create_battle_navale_trainer',
        'test_model_trainer'
    ])

# === STATUS FUNCTIONS ===

def get_ml_package_status():
    """Status du package ML"""
    return {
        'simple_model_available': SIMPLE_MODEL_AVAILABLE,
        'data_processor_available': DATA_PROCESSOR_AVAILABLE,
        'model_validator_available': MODEL_VALIDATOR_AVAILABLE,
        'model_trainer_available': MODEL_TRAINER_AVAILABLE,
        'version': __version__,
        'total_components': len(__all__)
    }

def test_ml_module():
    """Test du module ML complet"""
    logger.info("üß™ Test ML Module...")
    
    status = get_ml_package_status()
    logger.info(f"ML Package v{status['version']} - {status['total_components']} composants")
    
    if not any([SIMPLE_MODEL_AVAILABLE, DATA_PROCESSOR_AVAILABLE, 
                MODEL_VALIDATOR_AVAILABLE, MODEL_TRAINER_AVAILABLE]):
        logger.error("‚ùå Aucun module ML disponible!")
        return False
    
    # Test imports basiques
    if SIMPLE_MODEL_AVAILABLE:
        try:
            model = create_signal_classifier()
            logger.info("‚úÖ Simple Model: OK")
        except Exception as e:
            logger.error(f"‚ùå Simple Model test failed: {e}")
    
    if DATA_PROCESSOR_AVAILABLE:
        logger.info("‚úÖ Data Processor: Disponible")
    
    if MODEL_VALIDATOR_AVAILABLE:
        logger.info("‚úÖ Model Validator: Disponible")
    
    if MODEL_TRAINER_AVAILABLE:
        logger.info("‚úÖ Model Trainer: Disponible")
    
    return True

# === INITIALISATION ===

# Log au chargement
logger.info(f"ML Package v{__version__} charg√© - ML Progressive Strategy")

# Afficher status des modules
status = get_ml_package_status()
if status['total_components'] > 0:
    logger.info(f"Modules ML disponibles: {status['total_components']} composants")
else:
    logger.warning("Aucun module ML charg√© - V√©rifier les imports")

# Test automatique en mode debug
if __name__ == "__main__":
    test_ml_module()