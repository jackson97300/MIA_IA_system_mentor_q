#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Forcer Donn√©es ES R√©elles
Force l'utilisation des donn√©es ES r√©elles au lieu des donn√©es simul√©es
"""

import os
import sys
import shutil
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def forcer_donnees_reelles_es():
    """Forcer l'utilisation des donn√©es ES r√©elles"""
    
    print("üìä MIA_IA_SYSTEM - FORCER DONN√âES ES R√âELLES")
    print("=" * 60)
    print("üéØ Objectif: Utiliser donn√©es ES r√©elles au lieu de simul√©es")
    print("=" * 60)
    
    start_time = datetime.now()
    
    print(f"‚è∞ D√©but correction: {start_time.strftime('%H:%M:%S')}")
    
    # 1. CORRIGER LA CONFIGURATION POUR DONN√âES R√âELLES
    print("\nüîß √âTAPE 1: CORRECTION CONFIGURATION DONN√âES R√âELLES")
    print("=" * 50)
    
    # Param√®tres pour forcer les donn√©es r√©elles
    real_data_config = {
        'SIMULATION_MODE': False,
        'USE_REAL_DATA': True,
        'FORCE_REAL_DATA': True,
        'DISABLE_SIMULATION': True,
        'REAL_DATA_SOURCE': 'IBKR',
        'ENABLE_LIVE_FEED': True,
        'USE_CACHED_DATA': False,
        'FORCE_FRESH_DATA': True,
        'DATA_SOURCE_PRIORITY': 'real',
        'FALLBACK_TO_SIMULATION': False,
        'REAL_TIME_DATA_ONLY': True,
        'VALIDATE_REAL_DATA': True,
        'REJECT_SIMULATED_DATA': True
    }
    
    # Fichiers de configuration √† corriger
    config_files = [
        "config/automation_config.py",
        "config/mia_ia_system_tws_paper_fixed.py",
        "config/tws_paper_config.py",
        "config/ibkr_config.py"
    ]
    
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"   üìÑ Correction: {config_file}")
            
            # Sauvegarder l'ancienne config
            backup_file = f"{config_file}.backup_real_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            with open(config_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Appliquer les corrections pour donn√©es r√©elles
            for key, value in real_data_config.items():
                if isinstance(value, str):
                    content = content.replace(f"{key} = ", f"{key} = '{value}'  # DONN√âES R√âELLES")
                else:
                    content = content.replace(f"{key} = ", f"{key} = {value}  # DONN√âES R√âELLES")
            
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"   ‚úÖ Configuration corrig√©e: {config_file}")
    
    # 2. CR√âER UN SCRIPT DE V√âRIFICATION DONN√âES R√âELLES
    print("\nüîç √âTAPE 2: SCRIPT V√âRIFICATION DONN√âES R√âELLES")
    print("=" * 50)
    
    verification_script = """
#!/usr/bin/env python3
\"\"\"
V√©rification donn√©es ES r√©elles
\"\"\"

import os
import sys
from datetime import datetime

def verifier_donnees_reelles():
    \"\"\"V√©rifier que le syst√®me utilise des donn√©es r√©elles\"\"\"
    
    print("üîç V√©rification donn√©es ES r√©elles...")
    
    # V√©rifier la configuration
    config_files = [
        "config/automation_config.py",
        "config/mia_ia_system_tws_paper_fixed.py"
    ]
    
    real_data_detected = False
    
    for config_file in config_files:
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                if 'SIMULATION_MODE = False' in content:
                    print(f"‚úÖ {config_file}: Mode simulation d√©sactiv√©")
                    real_data_detected = True
                else:
                    print(f"‚ùå {config_file}: Mode simulation encore actif")
                
                if 'USE_REAL_DATA = True' in content:
                    print(f"‚úÖ {config_file}: Donn√©es r√©elles activ√©es")
                    real_data_detected = True
                else:
                    print(f"‚ùå {config_file}: Donn√©es r√©elles non activ√©es")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur v√©rification {config_file}: {e}")
    
    return real_data_detected

if __name__ == "__main__":
    success = verifier_donnees_reelles()
    if success:
        print("\\n‚úÖ Configuration donn√©es r√©elles d√©tect√©e")
    else:
        print("\\n‚ùå Configuration donn√©es r√©elles non trouv√©e")
"""
    
    with open("verifier_donnees_reelles.py", "w", encoding="utf-8") as f:
        f.write(verification_script)
    
    print("   üìÑ Script de v√©rification cr√©√©: verifier_donnees_reelles.py")
    
    # 3. CR√âER UN SCRIPT DE TEST DONN√âES R√âELLES
    print("\nüß™ √âTAPE 3: SCRIPT TEST DONN√âES R√âELLES")
    print("=" * 50)
    
    test_script = """
#!/usr/bin/env python3
\"\"\"
Test donn√©es ES r√©elles via TWS
\"\"\"

import os
import sys
import time
from datetime import datetime

def test_donnees_reelles_es():
    \"\"\"Tester les donn√©es ES r√©elles\"\"\"
    
    print("üß™ Test donn√©es ES r√©elles...")
    
    try:
        # Importer le connecteur IBKR
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        
        try:
            from core.ibkr_connector import IBKRConnector
            print("‚úÖ IBKR Connector import√©")
        except ImportError:
            print("‚ùå IBKR Connector non disponible")
            return False
        
        # Cr√©er une instance du connecteur
        connector = IBKRConnector()
        
        # Configuration pour donn√©es r√©elles
        connector.host = "127.0.0.1"
        connector.port = 7497
        connector.client_id = 1
        connector.simulation_mode = False
        
        print("üîó Connexion √† TWS pour donn√©es r√©elles...")
        
        # Test de connexion
        try:
            # Test simple de connexion
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex(('127.0.0.1', 7497))
            sock.close()
            
            if result == 0:
                print("‚úÖ TWS accessible")
                print("‚úÖ Pr√™t pour donn√©es ES r√©elles")
                return True
            else:
                print("‚ùå TWS non accessible")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur connexion TWS: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test donn√©es r√©elles: {e}")
        return False

if __name__ == "__main__":
    success = test_donnees_reelles_es()
    if success:
        print("\\n‚úÖ Test donn√©es r√©elles r√©ussi")
    else:
        print("\\n‚ùå Test donn√©es r√©elles √©chou√©")
"""
    
    with open("test_donnees_reelles.py", "w", encoding="utf-8") as f:
        f.write(test_script)
    
    print("   üìÑ Script de test cr√©√©: test_donnees_reelles.py")
    
    # 4. SCRIPT DE RELANCE AVEC DONN√âES R√âELLES
    print("\nüöÄ √âTAPE 4: SCRIPT RELANCE DONN√âES R√âELLES")
    print("=" * 50)
    
    restart_script = """
#!/usr/bin/env python3
\"\"\"
Relance syst√®me avec donn√©es ES r√©elles
\"\"\"

import os
import sys
import subprocess
import time
from datetime import datetime

def relancer_avec_donnees_reelles():
    \"\"\"Relancer le syst√®me avec donn√©es ES r√©elles\"\"\"
    
    print("üöÄ Relance avec donn√©es ES r√©elles...")
    
    # 1. V√©rifier configuration
    print("\\nüîç √âtape 1: V√©rification configuration")
    try:
        result = subprocess.run("python verifier_donnees_reelles.py", shell=True, capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è Erreurs: {result.stderr}")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
    
    # 2. Test donn√©es r√©elles
    print("\\nüß™ √âtape 2: Test donn√©es r√©elles")
    try:
        result = subprocess.run("python test_donnees_reelles.py", shell=True, capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è Erreurs: {result.stderr}")
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")
    
    # 3. Attendre un peu
    print("\\n‚è∞ Attente 5 secondes...")
    time.sleep(5)
    
    # 4. Relancer le syst√®me
    print("\\nüöÄ √âtape 3: Relance syst√®me")
    restart_commands = [
        "python launch_24_7_orderflow_trading.py",
        "python lance_mia_ia_tws.py"
    ]
    
    for command in restart_commands:
        if os.path.exists(command.split()[1]):
            try:
                print(f"   üöÄ Lancement: {command}")
                subprocess.Popen(command, shell=True)
                print(f"   ‚úÖ Syst√®me relanc√©: {command}")
                break
            except Exception as e:
                print(f"   ‚ùå Erreur relance: {command} - {e}")
    
    print("\\n‚úÖ Relance avec donn√©es r√©elles termin√©e")

if __name__ == "__main__":
    relancer_avec_donnees_reelles()
"""
    
    with open("relancer_donnees_reelles.py", "w", encoding="utf-8") as f:
        f.write(restart_script)
    
    print("   üìÑ Script de relance cr√©√©: relancer_donnees_reelles.py")
    
    # R√âSUM√â FINAL
    end_time = datetime.now()
    total_duration = end_time - start_time
    
    print("\nüìä R√âSUM√â FOR√áAGE DONN√âES R√âELLES")
    print("=" * 50)
    print(f"‚è∞ Dur√©e: {total_duration.total_seconds():.1f} secondes")
    print("‚úÖ Configuration corrig√©e")
    print("‚úÖ Scripts de v√©rification cr√©√©s")
    print("‚úÖ Scripts de test cr√©√©s")
    print("‚úÖ Script de relance cr√©√©")
    
    print("\nüöÄ PLAN D'ACTION RECOMMAND√â")
    print("=" * 50)
    print("1. ‚úÖ V√©rifier: python verifier_donnees_reelles.py")
    print("2. üß™ Tester: python test_donnees_reelles.py")
    print("3. üöÄ Relancer: python relancer_donnees_reelles.py")
    print("4. üìä Analyser: python analyse_resultats_temps_reel.py")
    
    print("\nüí° EXPLICATION:")
    print("   ‚Ä¢ Le syst√®me utilise maintenant des donn√©es ES r√©elles")
    print("   ‚Ä¢ Plus de donn√©es simul√©es")
    print("   ‚Ä¢ Connexion directe √† TWS pour donn√©es temps r√©el")
    print("   ‚Ä¢ Validation des donn√©es r√©elles activ√©e")

if __name__ == "__main__":
    forcer_donnees_reelles_es()


