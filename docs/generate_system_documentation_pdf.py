#!/usr/bin/env python3
"""
G√©n√©rateur de Documentation PDF - MIA_IA_SYSTEM
G√©n√®re les PDF de l'architecture et des fonctionnalit√©s
"""

import os
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from datetime import datetime

def create_architecture_pdf():
    """Cr√©er le PDF de l'architecture du syst√®me"""
    
    # Nom du fichier PDF
    pdf_filename = f"ARCHITECTURE_DETAILLEE_MIA_IA_SYSTEM_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    
    # Cr√©er le document PDF
    doc = SimpleDocTemplate(pdf_filename, pagesize=A4)
    story = []
    
    # Styles
    styles = getSampleStyleSheet()
    
    # Style titre principal
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.darkblue
    )
    
    # Style sous-titre
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=20,
        alignment=TA_CENTER,
        textColor=colors.darkgreen
    )
    
    # Style normal
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=12
    )
    
    # Style liste
    list_style = ParagraphStyle(
        'CustomList',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=8,
        leftIndent=20
    )
    
    # Titre principal
    story.append(Paragraph("üèóÔ∏è ARCHITECTURE D√âTAILL√âE MIA_IA_SYSTEM", title_style))
    story.append(Paragraph("üìã DOCUMENTATION COMPL√àTE DES FICHIERS", subtitle_style))
    story.append(Spacer(1, 20))
    
    # Vue d'ensemble
    story.append(Paragraph("üéØ VUE D'ENSEMBLE DU SYST√àME", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    overview_data = [
        ["Version", "3.1.0"],
        ["Architecture", "Modulaire et Scalable"],
        ["Langage", "Python 3.8+"],
        ["Framework", "Asyncio + Multi-threading"],
        ["Broker", "Interactive Brokers (IBKR)"],
        ["Plateforme", "Sierra Chart + IB Gateway"]
    ]
    
    overview_table = Table(overview_data, colWidths=[2*inch, 3*inch])
    overview_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('BACKGROUND', (0, 0), (0, -1), colors.darkblue),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
    ]))
    
    story.append(overview_table)
    story.append(Spacer(1, 20))
    
    # Structure des dossiers
    story.append(Paragraph("üìÅ STRUCTURE DES DOSSIERS PRINCIPAUX", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    # Core
    story.append(Paragraph("üîß CORE/ - C≈ìur du Syst√®me", styles['Heading3']))
    story.append(Paragraph("Fichiers Principaux :", normal_style))
    
    core_files = [
        ["battle_navale.py", "67KB, 3169 lignes", "Moteur principal du syst√®me de trading"],
        ["ibkr_connector.py", "61KB, 1699 lignes", "Connecteur principal vers Interactive Brokers"],
        ["sierra_connector.py", "36KB, 1091 lignes", "Interface avec Sierra Chart"],
        ["patterns_detector.py", "31KB, 842 lignes", "D√©tection de patterns de march√©"],
        ["mentor_system.py", "37KB, 828 lignes", "Syst√®me d'apprentissage et optimisation"],
        ["catastrophe_monitor.py", "14KB, 340 lignes", "Surveillance et s√©curit√©"],
        ["safety_kill_switch.py", "5.7KB, 149 lignes", "Syst√®me de s√©curit√©"],
        ["logger.py", "12KB, 375 lignes", "Syst√®me de logging"],
        ["base_types.py", "34KB, 1076 lignes", "Types de donn√©es de base"],
        ["structure_data.py", "37KB, 1049 lignes", "Gestion des structures de donn√©es"]
    ]
    
    core_table = Table(core_files, colWidths=[2*inch, 1*inch, 3*inch])
    core_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
    ]))
    
    story.append(core_table)
    story.append(Spacer(1, 20))
    
    # Execution
    story.append(Paragraph("‚ö° EXECUTION/ - Ex√©cution des Ordres", styles['Heading3']))
    story.append(Paragraph("Fichiers Principaux :", normal_style))
    
    execution_files = [
        ["simple_trader.py", "90KB, 3917 lignes", "Trader principal du syst√®me"],
        ["order_manager.py", "67KB, 3219 lignes", "Gestion des ordres"],
        ["risk_manager.py", "31KB, 852 lignes", "Gestion des risques"],
        ["trade_snapshotter.py", "63KB, 1582 lignes", "Capture des trades"],
        ["post_mortem_analyzer.py", "25KB, 634 lignes", "Analyse post-mortem"]
    ]
    
    execution_table = Table(execution_files, colWidths=[2*inch, 1*inch, 3*inch])
    execution_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkgreen),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
    ]))
    
    story.append(execution_table)
    story.append(Spacer(1, 20))
    
    # ML
    story.append(Paragraph("üß† ML/ - Machine Learning", styles['Heading3']))
    story.append(Paragraph("Fichiers Principaux :", normal_style))
    
    ml_files = [
        ["ensemble_filter.py", "29KB, 1494 lignes", "Filtre d'ensemble ML"],
        ["model_trainer.py", "47KB, 1227 lignes", "Entra√Ænement des mod√®les"],
        ["model_validator.py", "48KB, 1233 lignes", "Validation des mod√®les"],
        ["data_processor.py", "43KB, 1116 lignes", "Traitement des donn√©es"],
        ["simple_model.py", "27KB, 699 lignes", "Mod√®les simples"],
        ["gamma_cycles.py", "24KB, 649 lignes", "Cycles gamma"]
    ]
    
    ml_table = Table(ml_files, colWidths=[2*inch, 1*inch, 3*inch])
    ml_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkred),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
    ]))
    
    story.append(ml_table)
    story.append(Spacer(1, 20))
    
    # Features
    story.append(Paragraph("üìä FEATURES/ - Analyse des Features", styles['Heading3']))
    story.append(Paragraph("Fichiers Principaux :", normal_style))
    
    features_files = [
        ["confluence_analyzer.py", "52KB, 1301 lignes", "Analyse de confluence"],
        ["feature_calculator.py", "58KB, 1364 lignes", "Calcul des features"],
        ["mtf_confluence_elite.py", "24KB, 1168 lignes", "Confluence multi-timeframe"],
        ["smart_money_tracker.py", "36KB, 888 lignes", "Suivi smart money"],
        ["market_regime.py", "48KB, 1308 lignes", "R√©gimes de march√©"],
        ["order_book_imbalance.py", "21KB, 584 lignes", "D√©s√©quilibre order book"]
    ]
    
    features_table = Table(features_files, colWidths=[2*inch, 1*inch, 3*inch])
    features_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkorange),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
    ]))
    
    story.append(features_table)
    story.append(Spacer(1, 20))
    
    # Monitoring
    story.append(Paragraph("üì° MONITORING/ - Surveillance", styles['Heading3']))
    story.append(Paragraph("Fichiers Principaux :", normal_style))
    
    monitoring_files = [
        ["health_checker.py", "88KB, 2173 lignes", "V√©rification de sant√©"],
        ["alert_system.py", "61KB, 1541 lignes", "Syst√®me d'alertes"],
        ["discord_notifier.py", "42KB, 898 lignes", "Notifications Discord"],
        ["live_monitor.py", "45KB, 1117 lignes", "Monitoring en temps r√©el"],
        ["performance_tracker.py", "44KB, 1118 lignes", "Suivi des performances"],
        ["session_replay.py", "22KB, 568 lignes", "Replay de sessions"],
        ["ib_gateway_monitor.py", "7.7KB, 205 lignes", "Monitoring IB Gateway"]
    ]
    
    monitoring_table = Table(monitoring_files, colWidths=[2*inch, 1*inch, 3*inch])
    monitoring_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkpurple),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
    ]))
    
    story.append(monitoring_table)
    story.append(Spacer(1, 20))
    
    # M√©triques du syst√®me
    story.append(Paragraph("üìà M√âTRIQUES DU SYST√àME", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    metrics_data = [
        ["M√©trique", "Valeur", "Description"],
        ["Lignes de code", "~150,000", "Code total du syst√®me"],
        ["Fichiers Python", "~200", "Nombre de fichiers"],
        ["Modules principaux", "15", "Modules principaux"],
        ["Classes principales", "~100", "Classes principales"],
        ["Architecture", "Modulaire", "Type d'architecture"],
        ["Scalabilit√©", "Haute", "Capacit√© de scalabilit√©"],
        ["Maintenabilit√©", "Excellente", "Facilit√© de maintenance"],
        ["Extensibilit√©", "Tr√®s bonne", "Capacit√© d'extension"]
    ]
    
    metrics_table = Table(metrics_data, colWidths=[2*inch, 1*inch, 3*inch])
    metrics_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
    ]))
    
    story.append(metrics_table)
    story.append(Spacer(1, 20))
    
    # Footer
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=8,
        alignment=TA_CENTER,
        textColor=colors.grey
    )
    
    story.append(Paragraph("Document g√©n√©r√© automatiquement par MIA_IA_SYSTEM", footer_style))
    story.append(Paragraph(f"Date : {datetime.now().strftime('%d/%m/%Y %H:%M')}", footer_style))
    story.append(Paragraph("Version : 3.1.0", footer_style))
    
    # G√©n√©rer le PDF
    doc.build(story)
    
    print(f"‚úÖ Architecture PDF g√©n√©r√© : {pdf_filename}")
    return pdf_filename

def create_functionalities_pdf():
    """Cr√©er le PDF des fonctionnalit√©s du syst√®me"""
    
    # Nom du fichier PDF
    pdf_filename = f"FONCTIONNALITES_DETAILLEES_MIA_IA_SYSTEM_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
    
    # Cr√©er le document PDF
    doc = SimpleDocTemplate(pdf_filename, pagesize=A4)
    story = []
    
    # Styles
    styles = getSampleStyleSheet()
    
    # Style titre principal
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.darkblue
    )
    
    # Style sous-titre
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=20,
        alignment=TA_CENTER,
        textColor=colors.darkgreen
    )
    
    # Style normal
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=12
    )
    
    # Style liste
    list_style = ParagraphStyle(
        'CustomList',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=8,
        leftIndent=20
    )
    
    # Titre principal
    story.append(Paragraph("ü§ñ FONCTIONNALIT√âS D√âTAILL√âES MIA_IA_SYSTEM", title_style))
    story.append(Paragraph("üìã DOCUMENTATION COMPL√àTE DES FEATURES ET STRAT√âGIES", subtitle_style))
    story.append(Spacer(1, 20))
    
    # Vue d'ensemble
    story.append(Paragraph("üéØ VUE D'ENSEMBLE DES FONCTIONNALIT√âS", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    overview_data = [
        ["Syst√®me", "MIA_IA_SYSTEM v3.1.0"],
        ["Type", "Bot de Trading Automatis√©"],
        ["Instruments", "Futures ES/NQ, Options, Actions"],
        ["Timeframes", "1min √† 4H"],
        ["Brokers", "Interactive Brokers (IBKR)"],
        ["Plateformes", "Sierra Chart + IB Gateway"]
    ]
    
    overview_table = Table(overview_data, colWidths=[2*inch, 3*inch])
    overview_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ('BACKGROUND', (0, 0), (0, -1), colors.darkblue),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.whitesmoke),
    ]))
    
    story.append(overview_table)
    story.append(Spacer(1, 20))
    
    # Fonctionnalit√©s Core
    story.append(Paragraph("üîß FONCTIONNALIT√âS CORE", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üß† Syst√®me d'Intelligence Artificielle", styles['Heading3']))
    story.append(Paragraph("1. Mentor System (mentor_system.py)", normal_style))
    story.append(Paragraph("‚Ä¢ Apprentissage automatique", list_style))
    story.append(Paragraph("‚Ä¢ Optimisation des strat√©gies", list_style))
    story.append(Paragraph("‚Ä¢ Analyse de performance", list_style))
    story.append(Paragraph("‚Ä¢ Adaptation continue", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("2. Pattern Detector (patterns_detector.py)", normal_style))
    story.append(Paragraph("‚Ä¢ Patterns de prix (triangles, flags, H&S)", list_style))
    story.append(Paragraph("‚Ä¢ Patterns de volume", list_style))
    story.append(Paragraph("‚Ä¢ Patterns de momentum", list_style))
    story.append(Paragraph("‚Ä¢ Reconnaissance automatique", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("3. Catastrophe Monitor (catastrophe_monitor.py)", normal_style))
    story.append(Paragraph("‚Ä¢ Surveillance continue", list_style))
    story.append(Paragraph("‚Ä¢ Gestion des catastrophes", list_style))
    story.append(Paragraph("‚Ä¢ Syst√®me de s√©curit√©", list_style))
    story.append(Paragraph("‚Ä¢ Recovery automatique", list_style))
    story.append(Spacer(1, 20))
    
    # Features d'analyse
    story.append(Paragraph("üìä FEATURES D'ANALYSE AVANC√âES", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üéØ Confluence Analyzer (confluence_analyzer.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Analyse de confluence multi-timeframe", list_style))
    story.append(Paragraph("‚Ä¢ Support/R√©sistance automatique", list_style))
    story.append(Paragraph("‚Ä¢ Smart money zones", list_style))
    story.append(Paragraph("‚Ä¢ Scoring de probabilit√©", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üßÆ Feature Calculator (feature_calculator.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Indicateurs techniques (RSI, MACD, Bollinger)", list_style))
    story.append(Paragraph("‚Ä¢ Price action analysis", list_style))
    story.append(Paragraph("‚Ä¢ Market structure", list_style))
    story.append(Paragraph("‚Ä¢ Volume analysis", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üéØ Smart Money Tracker (smart_money_tracker.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ D√©tection smart money", list_style))
    story.append(Paragraph("‚Ä¢ Flux institutionnels", list_style))
    story.append(Paragraph("‚Ä¢ Patterns Wyckoff", list_style))
    story.append(Paragraph("‚Ä¢ Order flow analysis", list_style))
    story.append(Spacer(1, 20))
    
    # Strat√©gies de trading
    story.append(Paragraph("üéØ STRAT√âGIES DE TRADING", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üìà Trend Strategy (trend_strategy.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ D√©tection de tendance", list_style))
    story.append(Paragraph("‚Ä¢ Entr√©es pullback/breakout", list_style))
    story.append(Paragraph("‚Ä¢ Stop-loss ATR-based", list_style))
    story.append(Paragraph("‚Ä¢ Take-profit dynamique", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üìä Range Strategy (range_strategy.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Trading en range", list_style))
    story.append(Paragraph("‚Ä¢ Entr√©es bounce/fade", list_style))
    story.append(Paragraph("‚Ä¢ Position sizing Kelly", list_style))
    story.append(Paragraph("‚Ä¢ Mean reversion", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üé≤ Strategy Selector (strategy_selector.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ S√©lection automatique", list_style))
    story.append(Paragraph("‚Ä¢ Adaptation au march√©", list_style))
    story.append(Paragraph("‚Ä¢ Optimisation continue", list_style))
    story.append(Paragraph("‚Ä¢ Performance tracking", list_style))
    story.append(Spacer(1, 20))
    
    # Machine Learning
    story.append(Paragraph("üß† MACHINE LEARNING", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("ü§ñ Ensemble Filter (ensemble_filter.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Random Forest", list_style))
    story.append(Paragraph("‚Ä¢ Gradient Boosting (XGBoost, LightGBM)", list_style))
    story.append(Paragraph("‚Ä¢ Neural Networks (LSTM, CNN)", list_style))
    story.append(Paragraph("‚Ä¢ Filtrage de signaux", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üéØ Model Trainer (model_trainer.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Entra√Ænement avanc√©", list_style))
    story.append(Paragraph("‚Ä¢ Hyperparameter optimization", list_style))
    story.append(Paragraph("‚Ä¢ Validation crois√©e", list_style))
    story.append(Paragraph("‚Ä¢ Performance metrics", list_style))
    story.append(Spacer(1, 20))
    
    # Monitoring
    story.append(Paragraph("üì° SYST√àME DE MONITORING", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üè• Health Checker (health_checker.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Surveillance syst√®me", list_style))
    story.append(Paragraph("‚Ä¢ Connexions IBKR/Sierra", list_style))
    story.append(Paragraph("‚Ä¢ Performance monitoring", list_style))
    story.append(Paragraph("‚Ä¢ Alertes automatiques", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üö® Alert System (alert_system.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Alertes trading", list_style))
    story.append(Paragraph("‚Ä¢ Alertes risque", list_style))
    story.append(Paragraph("‚Ä¢ Alertes syst√®me", list_style))
    story.append(Paragraph("‚Ä¢ Channels Discord/Email", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üì± Discord Notifier (discord_notifier.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Int√©gration Discord", list_style))
    story.append(Paragraph("‚Ä¢ Messages riches", list_style))
    story.append(Paragraph("‚Ä¢ Channels sp√©cialis√©s", list_style))
    story.append(Paragraph("‚Ä¢ Notifications push", list_style))
    story.append(Spacer(1, 20))
    
    # Ex√©cution
    story.append(Paragraph("‚ö° SYST√àME D'EX√âCUTION", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üéØ Simple Trader (simple_trader.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Ex√©cution automatique", list_style))
    story.append(Paragraph("‚Ä¢ Gestion des strat√©gies", list_style))
    story.append(Paragraph("‚Ä¢ Interface utilisateur", list_style))
    story.append(Paragraph("‚Ä¢ Dashboard temps r√©el", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üìã Order Manager (order_manager.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Types d'ordres avanc√©s", list_style))
    story.append(Paragraph("‚Ä¢ Validation et contr√¥les", list_style))
    story.append(Paragraph("‚Ä¢ Risk checks", list_style))
    story.append(Paragraph("‚Ä¢ Order validation", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üõ°Ô∏è Risk Manager (risk_manager.py)", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Position sizing", list_style))
    story.append(Paragraph("‚Ä¢ Stop-loss management", list_style))
    story.append(Paragraph("‚Ä¢ Contr√¥les de risque", list_style))
    story.append(Paragraph("‚Ä¢ Drawdown protection", list_style))
    story.append(Spacer(1, 20))
    
    # S√©curit√©
    story.append(Paragraph("üîí S√âCURIT√â ET FIABILIT√â", styles['Heading2']))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üõ°Ô∏è Syst√®mes de S√©curit√©", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Kill switch automatique", list_style))
    story.append(Paragraph("‚Ä¢ Protection du capital", list_style))
    story.append(Paragraph("‚Ä¢ Limites de risque", list_style))
    story.append(Paragraph("‚Ä¢ Arr√™t d'urgence", list_style))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("üîÑ Redundancy Systems", styles['Heading3']))
    story.append(Paragraph("‚Ä¢ Backup systems", list_style))
    story.append(Paragraph("‚Ä¢ System redundancy", list_style))
    story.append(Paragraph("‚Ä¢ Failover procedures", list_style))
    story.append(Paragraph("‚Ä¢ Recovery protocols", list_style))
    story.append(Spacer(1, 20))
    
    # Footer
    footer_style = ParagraphStyle(
        'Footer',
        parent=styles['Normal'],
        fontSize=8,
        alignment=TA_CENTER,
        textColor=colors.grey
    )
    
    story.append(Paragraph("Document g√©n√©r√© automatiquement par MIA_IA_SYSTEM", footer_style))
    story.append(Paragraph(f"Date : {datetime.now().strftime('%d/%m/%Y %H:%M')}", footer_style))
    story.append(Paragraph("Version : 3.1.0", footer_style))
    
    # G√©n√©rer le PDF
    doc.build(story)
    
    print(f"‚úÖ Fonctionnalit√©s PDF g√©n√©r√© : {pdf_filename}")
    return pdf_filename

def main():
    """Fonction principale"""
    try:
        print("üöÄ G√©n√©ration de la documentation MIA_IA_SYSTEM...")
        
        # G√©n√©rer les deux PDF
        arch_pdf = create_architecture_pdf()
        func_pdf = create_functionalities_pdf()
        
        print(f"üéâ Documentation g√©n√©r√©e avec succ√®s !")
        print(f"üìÑ Architecture : {arch_pdf}")
        print(f"üìÑ Fonctionnalit√©s : {func_pdf}")
        print("‚úÖ Documentation compl√®te du syst√®me MIA_IA_SYSTEM cr√©√©e")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration : {e}")

if __name__ == "__main__":
    main()
