#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - V√©rification TWS apr√®s red√©marrage
Diagnostic complet de l'√©tat de TWS apr√®s red√©marrage
"""

import os
import sys
import time
import json
import socket
import subprocess
from datetime import datetime, timedelta

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def verifier_port_tws(port=7497, host='127.0.0.1'):
    """V√©rifier si le port TWS est ouvert"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex((host, port))
        sock.close()
        return result == 0
    except Exception as e:
        return False

def verifier_processus_tws():
    """V√©rifier si TWS est en cours d'ex√©cution"""
    try:
        # Windows
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq javaw.exe'], 
                              capture_output=True, text=True, shell=True)
        return 'javaw.exe' in result.stdout
    except Exception as e:
        return False

def verifier_connexion_ibkr():
    """V√©rifier la connexion IBKR"""
    try:
        from config.mia_ia_system_tws_paper_fixed import IB_CONFIG
        from core.ibkr_connector import IBKRConnector
        
        print("üîå Test de connexion IBKR...")
        connector = IBKRConnector(IB_CONFIG)
        
        # Test de connexion
        if connector.connect():
            print("   ‚úÖ Connexion IBKR r√©ussie")
            
            # Test de donn√©es ES
            print("üìä Test de donn√©es ES...")
            es_data = connector.get_market_data('ES', 'ESU25')
            if es_data and 'last' in es_data:
                print(f"   ‚úÖ Donn√©es ES OK - Prix: {es_data['last']}")
                return True
            else:
                print("   ‚ùå Donn√©es ES non disponibles")
                return False
        else:
            print("   ‚ùå √âchec connexion IBKR")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur connexion: {str(e)}")
        return False

def verifier_donnees_critiques():
    """V√©rifier les donn√©es critiques"""
    try:
        from config.mia_ia_system_tws_paper_fixed import IB_CONFIG
        from core.ibkr_connector import IBKRConnector
        
        connector = IBKRConnector(IB_CONFIG)
        
        if not connector.connect():
            return False
            
        print("üìä V√©rification donn√©es critiques...")
        
        # Test ES
        es_data = connector.get_market_data('ES', 'ESU25')
        if es_data:
            print(f"   ‚úÖ ES - Prix: {es_data.get('last', 'N/A')} | Volume: {es_data.get('volume', 'N/A')}")
        else:
            print("   ‚ùå ES - Donn√©es non disponibles")
            
        # Test SPX
        spx_data = connector.get_market_data('SPX', 'SPX')
        if spx_data:
            print(f"   ‚úÖ SPX - Prix: {spx_data.get('last', 'N/A')} | Volume: {spx_data.get('volume', 'N/A')}")
        else:
            print("   ‚ùå SPX - Donn√©es non disponibles")
            
        # Test options SPX
        print("   üîç Test options SPX...")
        options_data = connector.get_options_chain('SPX')
        if options_data:
            print(f"   ‚úÖ Options SPX - {len(options_data)} contrats disponibles")
        else:
            print("   ‚ùå Options SPX - Aucun contrat disponible")
            
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur donn√©es: {str(e)}")
        return False

def verifier_systeme_mia():
    """V√©rifier le syst√®me MIA"""
    try:
        print("ü§ñ Test syst√®me MIA...")
        
        # V√©rifier les modules critiques
        modules_critiques = [
            'core.battle_navale',
            'core.ibkr_connector', 
            'features.confluence_analyzer',
            'strategies.signal_generator'
        ]
        
        for module in modules_critiques:
            try:
                __import__(module)
                print(f"   ‚úÖ {module}")
            except ImportError as e:
                print(f"   ‚ùå {module} - {str(e)}")
                
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur syst√®me MIA: {str(e)}")
        return False

def verifier_tws_apres_redemarrage():
    """V√©rification compl√®te de TWS apr√®s red√©marrage"""
    
    print("üîÑ MIA_IA_SYSTEM - V√âRIFICATION TWS APR√àS RED√âMARRAGE")
    print("=" * 70)
    print("üîç Diagnostic complet de l'√©tat de TWS")
    print("‚è∞ Dur√©e: 2 minutes")
    print("üéØ Objectif: Validation du red√©marrage")
    print("=" * 70)
    
    start_time = datetime.now()
    verification_duration = timedelta(minutes=2)
    
    # Variables de suivi
    tests_reussis = 0
    tests_echecs = 0
    problemes_detectes = []
    
    print(f"‚è∞ D√©but v√©rification: {start_time.strftime('%H:%M:%S')}")
    print(f"‚è∞ Fin pr√©vue: {(start_time + verification_duration).strftime('%H:%M:%S')}")
    
    print("\nüîç V√âRIFICATIONS EN COURS:")
    print("=" * 50)
    
    try:
        while datetime.now() < start_time + verification_duration:
            current_time = datetime.now()
            elapsed = current_time - start_time
            remaining = verification_duration - elapsed
            
            print(f"\n‚è∞ {current_time.strftime('%H:%M:%S')} | "
                  f"√âcoul√©: {elapsed.total_seconds():.0f}s | "
                  f"Reste: {remaining.total_seconds():.0f}s")
            
            # 1. V√âRIFICATION PORT TWS
            print("\nüîå V√©rification port TWS...")
            if verifier_port_tws():
                print("   ‚úÖ Port 7497 ouvert")
                tests_reussis += 1
            else:
                print("   ‚ùå Port 7497 ferm√©")
                tests_echecs += 1
                problemes_detectes.append("Port TWS ferm√©")
            
            # 2. V√âRIFICATION PROCESSUS TWS
            print("üñ•Ô∏è V√©rification processus TWS...")
            if verifier_processus_tws():
                print("   ‚úÖ Processus TWS actif")
                tests_reussis += 1
            else:
                print("   ‚ùå Processus TWS non trouv√©")
                tests_echecs += 1
                problemes_detectes.append("Processus TWS manquant")
            
            # 3. V√âRIFICATION CONNEXION IBKR
            print("üåê V√©rification connexion IBKR...")
            if verifier_connexion_ibkr():
                print("   ‚úÖ Connexion IBKR OK")
                tests_reussis += 1
            else:
                print("   ‚ùå Connexion IBKR √©chou√©e")
                tests_echecs += 1
                problemes_detectes.append("Connexion IBKR √©chou√©e")
            
            # 4. V√âRIFICATION DONN√âES CRITIQUES
            print("üìä V√©rification donn√©es critiques...")
            if verifier_donnees_critiques():
                print("   ‚úÖ Donn√©es critiques OK")
                tests_reussis += 1
            else:
                print("   ‚ùå Donn√©es critiques manquantes")
                tests_echecs += 1
                problemes_detectes.append("Donn√©es critiques manquantes")
            
            # 5. V√âRIFICATION SYST√àME MIA
            print("ü§ñ V√©rification syst√®me MIA...")
            if verifier_systeme_mia():
                print("   ‚úÖ Syst√®me MIA OK")
                tests_reussis += 1
            else:
                print("   ‚ùå Syst√®me MIA d√©faillant")
                tests_echecs += 1
                problemes_detectes.append("Syst√®me MIA d√©faillant")
            
            # STATISTIQUES ACTUELLES
            print(f"\nüìä STATISTIQUES TESTS:")
            print(f"   ‚úÖ Tests r√©ussis: {tests_reussis}")
            print(f"   ‚ùå Tests √©checs: {tests_echecs}")
            print(f"   üìà Taux de r√©ussite: {(tests_reussis/(tests_reussis+tests_echecs)*100):.1f}%" if (tests_reussis+tests_echecs) > 0 else "   üìà Taux de r√©ussite: 0%")
            
            # Attendre avant prochaine v√©rification
            time.sleep(30)
            
    except KeyboardInterrupt:
        print("\nüõë V√©rification arr√™t√©e par l'utilisateur")
    
    # RAPPORT FINAL
    end_time = datetime.now()
    total_duration = end_time - start_time
    
    print("\nüìä RAPPORT FINAL TWS")
    print("=" * 50)
    print(f"‚è∞ Dur√©e totale: {total_duration.total_seconds():.1f} secondes")
    print(f"‚úÖ Tests r√©ussis: {tests_reussis}")
    print(f"‚ùå Tests √©checs: {tests_echecs}")
    print(f"üìà Taux de r√©ussite: {(tests_reussis/(tests_reussis+tests_echecs)*100):.1f}%" if (tests_reussis+tests_echecs) > 0 else "üìà Taux de r√©ussite: 0%")
    
    # √âVALUATION GLOBALE
    print("\nüéØ √âVALUATION GLOBALE")
    print("=" * 50)
    
    if tests_echecs == 0:
        print("üü¢ EXCELLENT - TWS fonctionne parfaitement")
        print("   ‚Ä¢ Tous les tests r√©ussis")
        print("   ‚Ä¢ Syst√®me pr√™t pour le trading")
        print("   ‚Ä¢ Aucune action requise")
    elif tests_echecs <= 2:
        print("üü° BON - TWS fonctionne avec quelques probl√®mes mineurs")
        print("   ‚Ä¢ La plupart des fonctionnalit√©s OK")
        print("   ‚Ä¢ Quelques ajustements n√©cessaires")
        print("   ‚Ä¢ Syst√®me utilisable")
    elif tests_echecs <= 4:
        print("üü† MOYEN - TWS a des probl√®mes significatifs")
        print("   ‚Ä¢ Plusieurs fonctionnalit√©s d√©faillantes")
        print("   ‚Ä¢ Actions correctives n√©cessaires")
        print("   ‚Ä¢ Syst√®me partiellement utilisable")
    else:
        print("üî¥ CRITIQUE - TWS a des probl√®mes majeurs")
        print("   ‚Ä¢ Nombreux √©checs de tests")
        print("   ‚Ä¢ Actions correctives urgentes")
        print("   ‚Ä¢ Syst√®me non utilisable")
    
    # PROBL√àMES D√âTECT√âS
    if problemes_detectes:
        print("\nüö® PROBL√àMES D√âTECT√âS")
        print("=" * 50)
        for i, probleme in enumerate(set(problemes_detectes), 1):
            print(f"{i}. {probleme}")
    
    # RECOMMANDATIONS
    print("\nüöÄ RECOMMANDATIONS")
    print("=" * 50)
    
    if "Port TWS ferm√©" in problemes_detectes:
        print("üîå Port TWS ferm√©:")
        print("   ‚Ä¢ V√©rifier que TWS est d√©marr√©")
        print("   ‚Ä¢ V√©rifier le port 7497")
        print("   ‚Ä¢ Red√©marrer TWS si n√©cessaire")
    
    if "Processus TWS manquant" in problemes_detectes:
        print("üñ•Ô∏è Processus TWS manquant:")
        print("   ‚Ä¢ D√©marrer TWS")
        print("   ‚Ä¢ V√©rifier les param√®tres de connexion")
        print("   ‚Ä¢ Attendre le chargement complet")
    
    if "Connexion IBKR √©chou√©e" in problemes_detectes:
        print("üåê Connexion IBKR √©chou√©e:")
        print("   ‚Ä¢ V√©rifier les param√®tres de connexion")
        print("   ‚Ä¢ V√©rifier le Client ID")
        print("   ‚Ä¢ Red√©marrer TWS")
    
    if "Donn√©es critiques manquantes" in problemes_detectes:
        print("üìä Donn√©es critiques manquantes:")
        print("   ‚Ä¢ V√©rifier les souscriptions de march√©")
        print("   ‚Ä¢ Attendre la r√©ception des donn√©es")
        print("   ‚Ä¢ V√©rifier les contrats")
    
    if "Syst√®me MIA d√©faillant" in problemes_detectes:
        print("ü§ñ Syst√®me MIA d√©faillant:")
        print("   ‚Ä¢ V√©rifier les modules Python")
        print("   ‚Ä¢ Red√©marrer le syst√®me MIA")
        print("   ‚Ä¢ V√©rifier les d√©pendances")
    
    # PLAN D'ACTION
    print("\nüìã PLAN D'ACTION")
    print("=" * 50)
    
    if tests_echecs == 0:
        print("‚úÖ Aucune action requise - TWS fonctionne parfaitement")
    else:
        print("1. üîå V√©rifier et corriger les probl√®mes de connexion")
        print("2. üìä V√©rifier les donn√©es de march√©")
        print("3. ü§ñ V√©rifier le syst√®me MIA")
        print("4. üîÑ Relancer la v√©rification")
        print("5. ‚úÖ Confirmer le bon fonctionnement")

if __name__ == "__main__":
    verifier_tws_apres_redemarrage()

