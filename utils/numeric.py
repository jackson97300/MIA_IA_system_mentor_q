#!/usr/bin/env python3
"""
üî¢ UTILS NUMERIC - MIA_IA_SYSTEM
Fonctions de comparaison flottantes robustes avec EPSILON

Centralise toutes les comparaisons num√©riques pour √©viter les divergences
et assurer la coh√©rence dans tout le syst√®me.
"""

from math import ulp
from typing import Union, Optional

# Constante EPSILON globale pour tout le syst√®me
EPSILON = 1e-7

def _tol(a: float, b: float, eps: float = EPSILON) -> float:
    """
    Calcule la tol√©rance adaptative pour comparaisons flottantes robustes.
    
    Combine :
    - Tol√©rance absolue (eps * 1.1)
    - ULP (Unit in Last Place) pour pr√©cision machine
    - Micro tol√©rance relative pour grandes valeurs
    
    Args:
        a: Premi√®re valeur
        b: Deuxi√®me valeur  
        eps: Tol√©rance de base (d√©faut: EPSILON)
        
    Returns:
        float: Tol√©rance adaptative
    """
    return max(
        eps * 1.1,  # Marge de s√©curit√©
        ulp(a) + ulp(b),  # Pr√©cision machine
        1e-12 * max(1.0, abs(a), abs(b))  # Micro tol√©rance relative
    )

def approx_eq(a: float, b: float, eps: float = EPSILON) -> bool:
    """
    Teste si deux valeurs flottantes sont approximativement √©gales.
    
    Args:
        a: Premi√®re valeur
        b: Deuxi√®me valeur
        eps: Tol√©rance (d√©faut: EPSILON)
        
    Returns:
        bool: True si |a - b| ‚â§ tol√©rance adaptative
    """
    return abs(a - b) <= _tol(a, b, eps)

def approx_le(a: float, b: float, eps: float = EPSILON) -> bool:
    """
    Teste si a ‚â§ b (approximativement).
    
    Args:
        a: Premi√®re valeur
        b: Deuxi√®me valeur
        eps: Tol√©rance (d√©faut: EPSILON)
        
    Returns:
        bool: True si a ‚â§ b + tol√©rance adaptative
    """
    return a <= b + _tol(a, b, eps)

def approx_ge(a: float, b: float, eps: float = EPSILON) -> bool:
    """
    Teste si a ‚â• b (approximativement).
    
    Args:
        a: Premi√®re valeur
        b: Deuxi√®me valeur
        eps: Tol√©rance (d√©faut: EPSILON)
        
    Returns:
        bool: True si a ‚â• b - tol√©rance adaptative
    """
    return a >= b - _tol(a, b, eps)

def approx_lt(a: float, b: float, eps: float = EPSILON) -> bool:
    """
    Teste si a < b (approximativement).
    
    Args:
        a: Premi√®re valeur
        b: Deuxi√®me valeur
        eps: Tol√©rance (d√©faut: EPSILON)
        
    Returns:
        bool: True si a < b - tol√©rance adaptative
    """
    return a < b - _tol(a, b, eps)

def approx_gt(a: float, b: float, eps: float = EPSILON) -> bool:
    """
    Teste si a > b (approximativement).
    
    Args:
        a: Premi√®re valeur
        b: Deuxi√®me valeur
        eps: Tol√©rance (d√©faut: EPSILON)
        
    Returns:
        bool: True si a > b + tol√©rance adaptative
    """
    return a > b + _tol(a, b, eps)

def clamp(value: float, min_val: float, max_val: float) -> float:
    """
    Clampe une valeur entre min_val et max_val.
    
    Args:
        value: Valeur √† clamper
        min_val: Valeur minimum
        max_val: Valeur maximum
        
    Returns:
        float: Valeur clampee dans [min_val, max_val]
    """
    return max(min_val, min(max_val, value))

def is_near_boundary(value: float, boundary: float, threshold: Optional[float] = None) -> bool:
    """
    D√©tecte si une valeur est proche d'une fronti√®re (pour surveillance).
    
    Args:
        value: Valeur √† tester
        boundary: Fronti√®re de r√©f√©rence
        threshold: Seuil de d√©tection (d√©faut: 2 * EPSILON)
        
    Returns:
        bool: True si |value - boundary| < threshold
    """
    if threshold is None:
        threshold = 2 * EPSILON
    return abs(value - boundary) < threshold

def safe_division(numerator: float, denominator: float, default: float = 0.0) -> float:
    """
    Division s√©curis√©e avec valeur par d√©faut si d√©nominateur nul.
    
    Args:
        numerator: Num√©rateur
        denominator: D√©nominateur
        default: Valeur par d√©faut si division impossible
        
    Returns:
        float: R√©sultat de la division ou valeur par d√©faut
    """
    if abs(denominator) < EPSILON:
        return default
    return numerator / denominator

# Fonctions utilitaires pour tests et validation
def validate_range(value: float, min_val: float, max_val: float, name: str = "value") -> None:
    """
    Valide qu'une valeur est dans une plage donn√©e.
    
    Args:
        value: Valeur √† valider
        min_val: Valeur minimum
        max_val: Valeur maximum
        name: Nom de la variable pour les messages d'erreur
        
    Raises:
        ValueError: Si la valeur est hors plage
    """
    if not (approx_ge(value, min_val) and approx_le(value, max_val)):
        raise ValueError(f"{name} = {value} hors plage [{min_val}, {max_val}]")

def validate_positive(value: float, name: str = "value") -> None:
    """
    Valide qu'une valeur est positive.
    
    Args:
        value: Valeur √† valider
        name: Nom de la variable pour les messages d'erreur
        
    Raises:
        ValueError: Si la valeur n'est pas positive
    """
    if not approx_ge(value, 0.0):
        raise ValueError(f"{name} = {value} n'est pas positif")

# Constantes pour tests et validation
NEAR_BOUNDARY_THRESHOLD = 2 * EPSILON  # Seuil pour d√©tection "proche fronti√®re"
VALIDATION_EPSILON = EPSILON  # EPSILON pour validation (peut diff√©rer de EPSILON principal)

if __name__ == "__main__":
    # Tests unitaires rapides
    print("üß™ Tests utils/numeric.py")
    
    # Test approx_eq
    assert approx_eq(0.1, 0.1)
    assert approx_eq(0.0999999, 0.1)  # Cas probl√©matique r√©solu
    assert not approx_eq(0.1, 0.2)
    
    # Test approx_le/approx_ge
    assert approx_le(0.1, 0.1)
    assert approx_le(0.0999999, 0.1)
    assert approx_ge(0.1, 0.1)
    assert approx_ge(0.1000001, 0.1)
    
    # Test clamp
    assert clamp(0.5, 0.0, 1.0) == 0.5
    assert clamp(-0.1, 0.0, 1.0) == 0.0
    assert clamp(1.1, 0.0, 1.0) == 1.0
    
    # Test is_near_boundary
    assert is_near_boundary(0.1, 0.1)
    assert is_near_boundary(0.1000001, 0.1)
    assert not is_near_boundary(0.2, 0.1)
    
    print("‚úÖ Tous les tests pass√©s!")


