#!/usr/bin/env python3
"""
üöÄ TEST CONNEXION IBKR SYNCHRONE - SANS ASYNCIO
===============================================

Test de connexion IBKR en mode synchrone pour √©viter les conflits d'event loop
"""

import sys
from pathlib import Path

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

from core.logger import get_logger

logger = get_logger(__name__)

def test_ibkr_sync():
    """Test connexion IBKR synchrone"""
    logger.info("üöÄ TEST CONNEXION IBKR SYNCHRONE")
    logger.info("=" * 50)
    
    # Configuration
    host = "127.0.0.1"
    port = 7496  # Port TWS mode paper
    client_id = 1
    
    logger.info(f"üîó Configuration:")
    logger.info(f"   üì° Host: {host}")
    logger.info(f"   üîå Port: {port} (TWS PAPER)")
    logger.info(f"   üÜî Client ID: {client_id}")
    logger.info(f"   üí∞ Mode: PAPER TRADING")
    
    try:
        from ib_insync import IB, Contract
        
        logger.info("üì¶ Import ib_insync r√©ussi")
        
        # Cr√©er instance IB
        ib = IB()
        
        logger.info("üîó Tentative connexion TWS...")
        
        # Connexion synchrone
        ib.connect(host, port, clientId=client_id, timeout=30)
        
        if ib.isConnected():
            logger.info("‚úÖ Connexion TWS r√©ussie!")
            
            # Test contrats
            logger.info("üìä Test contrats:")
            
            # Contrat ES
            es_contract = Contract(
                symbol='ES',
                secType='FUT',
                exchange='CME',
                currency='USD',
                lastTradingDay='20241220'
            )
            logger.info("‚úÖ Contrat ES cr√©√©")
            
            # Contrat NQ
            nq_contract = Contract(
                symbol='NQ',
                secType='FUT',
                exchange='CME',
                currency='USD',
                lastTradingDay='20241220'
            )
            logger.info("‚úÖ Contrat NQ cr√©√©")
            
            # Test donn√©es ES
            logger.info("üìà Test donn√©es ES:")
            try:
                ib.reqMktData(es_contract)
                ib.sleep(2)  # Attendre donn√©es
                
                if es_contract.marketPrice():
                    logger.info(f"‚úÖ Prix ES: {es_contract.marketPrice()}")
                else:
                    logger.warning("‚ö†Ô∏è Pas de prix ES")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur donn√©es ES: {e}")
            
            # Test donn√©es NQ
            logger.info("üìä Test donn√©es NQ:")
            try:
                ib.reqMktData(nq_contract)
                ib.sleep(2)  # Attendre donn√©es
                
                if nq_contract.marketPrice():
                    logger.info(f"‚úÖ Prix NQ: {nq_contract.marketPrice()}")
                else:
                    logger.warning("‚ö†Ô∏è Pas de prix NQ")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur donn√©es NQ: {e}")
            
            # D√©connexion
            ib.disconnect()
            logger.info("‚úÖ D√©connexion propre")
            
        else:
            logger.error("‚ùå √âchec connexion TWS")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur connexion TWS: {e}")
        logger.info("üîß V√âRIFICATIONS:")
        logger.info("   1. TWS ouvert et connect√©")
        logger.info("   2. API activ√©e dans TWS")
        logger.info("   3. Mode PAPER s√©lectionn√©")
        logger.info("   4. Permissions API accord√©es")

if __name__ == "__main__":
    test_ibkr_sync()

