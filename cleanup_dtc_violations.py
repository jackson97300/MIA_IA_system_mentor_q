#!/usr/bin/env python3
"""
Script de nettoyage des violations DTC identifi√©es
S√©pare les usages l√©gitimes (trading) des usages interdits (data collection)
"""

import os
import shutil
from pathlib import Path
from typing import List, Dict, Tuple

class DTCCleanupManager:
    def __init__(self):
        self.root = Path(".")
        self.archive_dir = self.root / "archive" / "dtc_violations"
        self.archive_dir.mkdir(parents=True, exist_ok=True)
        
        # Fichiers DTC l√©gitimes (trading uniquement)
        self.legitimate_dtc_files = {
            "core/sierra_dtc_connector.py",
            "core/sierra_order_router.py", 
            "core/sierra_connector.py",
            "config/sierra_trading_ports.py",
            "core/safety_kill_switch.py",
            "core/catastrophe_monitor.py",
            "core/trading_executor.py",
            "core/signal_explainer.py",
            "core/trading_types.py"
        }
        
        # Fichiers √† archiver (DTC pour data collection)
        self.files_to_archive = [
            "automation_modules/sierra_dtc_connector.py",
            "automation_modules/sierra_connector_v2.py", 
            "automation_modules/sierra_config_optimized.py",
            "automation_modules/sierra_market_data.py",
            "data/market_data_feed.py",
            "execution/order_manager.py",
            "features/dealers_bias_analyzer.py",
            "config/dealers_bias_analyzer.py"
        ]
        
        # Tests √† archiver (DTC pour data collection)
        self.tests_to_archive = [
            "tests/test_delayed_data.py",
            "tests/test_dtc_connection.py", 
            "tests/test_rithmic_connection.py",
            "tests/test_sierra_connector_real.py",
            "tests/test_sierra_dtc_optimized.py",
            "tests/test_sierra_integration.py",
            "tests/test_sierra_symbols_prices.py",
            "tests/test_mia_sierra_integration.py",
            "tests/test_es_only.py",
            "tests/comparaison_tradestation_sierra.py"
        ]

    def analyze_violations(self) -> Dict[str, List[str]]:
        """Analyse les violations et les cat√©gorise"""
        violations = {
            "legitimate": [],
            "to_archive": [],
            "to_fix": [],
            "already_archived": []
        }
        
        # V√©rifier les fichiers l√©gitimes
        for file_path in self.legitimate_dtc_files:
            path = Path(file_path)
            if path.exists():
                violations["legitimate"].append(str(file_path))
            else:
                print(f"‚ö†Ô∏è Fichier l√©gitime manquant: {file_path}")
        
        # V√©rifier les fichiers √† archiver
        for file_path in self.files_to_archive + self.tests_to_archive:
            path = Path(file_path)
            if path.exists():
                if "archive/" in str(path):
                    violations["already_archived"].append(str(file_path))
                else:
                    violations["to_archive"].append(str(file_path))
            else:
                print(f"‚ÑπÔ∏è Fichier d√©j√† supprim√©: {file_path}")
        
        return violations

    def archive_files(self, file_list: List[str]) -> List[str]:
        """Archive une liste de fichiers"""
        archived = []
        
        for file_path in file_list:
            source = Path(file_path)
            if not source.exists():
                continue
                
            # Cr√©er le r√©pertoire de destination
            dest_dir = self.archive_dir / source.parent
            dest_dir.mkdir(parents=True, exist_ok=True)
            
            # D√©placer le fichier
            dest = dest_dir / source.name
            try:
                shutil.move(str(source), str(dest))
                archived.append(str(dest))
                print(f"üì¶ Archiv√©: {source} -> {dest}")
            except Exception as e:
                print(f"‚ùå Erreur archivage {source}: {e}")
        
        return archived

    def fix_core_files(self) -> List[str]:
        """Corrige les fichiers core qui ont des r√©f√©rences DTC probl√©matiques"""
        fixed = []
        
        # Fichiers core √† corriger
        core_files_to_fix = [
            "core/data_collector_enhanced.py",
            "core/imports_manager.py", 
            "core/structure_data.py"
        ]
        
        for file_path in core_files_to_fix:
            path = Path(file_path)
            if not path.exists():
                continue
                
            try:
                content = path.read_text(encoding='utf-8')
                original_content = content
                
                # Supprimer les r√©f√©rences DTC pour data collection
                replacements = [
                    ("SierraDTCConnector()", "SierraConnector()"),
                    ("DTCConnector", "SierraConnector"),
                    ("dtc_connector", "sierra_connector"),
                    ("DTC Protocol", "Sierra Chart"),
                    ("DTC JSON", "Sierra JSON"),
                    ("DTC message", "Sierra message"),
                    ("DTC handshake", "Sierra handshake"),
                    ("DTC connection", "Sierra connection")
                ]
                
                for old, new in replacements:
                    content = content.replace(old, new)
                
                if content != original_content:
                    path.write_text(content, encoding='utf-8')
                    fixed.append(str(path))
                    print(f"üîß Corrig√©: {path}")
                    
            except Exception as e:
                print(f"‚ùå Erreur correction {path}: {e}")
        
        return fixed

    def generate_cleanup_report(self, violations: Dict[str, List[str]], 
                              archived: List[str], fixed: List[str]) -> str:
        """G√©n√®re un rapport de nettoyage"""
        report = []
        report.append("# üßπ RAPPORT DE NETTOYAGE DTC")
        report.append("")
        
        report.append("## ‚úÖ FICHIERS DTC L√âGITIMES (Trading)")
        for file_path in violations["legitimate"]:
            report.append(f"- {file_path}")
        report.append("")
        
        report.append("## üì¶ FICHIERS ARCHIV√âS")
        for file_path in archived:
            report.append(f"- {file_path}")
        report.append("")
        
        report.append("## üîß FICHIERS CORRIG√âS")
        for file_path in fixed:
            report.append(f"- {file_path}")
        report.append("")
        
        report.append("## üìä STATISTIQUES")
        report.append(f"- Fichiers l√©gitimes: {len(violations['legitimate'])}")
        report.append(f"- Fichiers archiv√©s: {len(archived)}")
        report.append(f"- Fichiers corrig√©s: {len(fixed)}")
        report.append(f"- D√©j√† archiv√©s: {len(violations['already_archived'])}")
        report.append("")
        
        report.append("## üéØ R√âSULTAT")
        if len(violations["to_archive"]) == 0 and len(fixed) > 0:
            report.append("‚úÖ **NETTOYAGE R√âUSSI** - DTC utilis√© uniquement pour trading")
        else:
            report.append("‚ö†Ô∏è **NETTOYAGE PARTIEL** - V√©rifications suppl√©mentaires n√©cessaires")
        
        return "\n".join(report)

    def run_cleanup(self) -> str:
        """Ex√©cute le nettoyage complet"""
        print("üßπ D√âMARRAGE DU NETTOYAGE DTC")
        print("=" * 50)
        
        # 1. Analyser les violations
        print("1Ô∏è‚É£ Analyse des violations...")
        violations = self.analyze_violations()
        
        # 2. Archiver les fichiers probl√©matiques
        print("\n2Ô∏è‚É£ Archivage des fichiers...")
        files_to_archive = violations["to_archive"]
        archived = self.archive_files(files_to_archive)
        
        # 3. Corriger les fichiers core
        print("\n3Ô∏è‚É£ Correction des fichiers core...")
        fixed = self.fix_core_files()
        
        # 4. G√©n√©rer le rapport
        print("\n4Ô∏è‚É£ G√©n√©ration du rapport...")
        report = self.generate_cleanup_report(violations, archived, fixed)
        
        # Sauvegarder le rapport
        report_path = self.root / "RAPPORT_NETTOYAGE_DTC.md"
        report_path.write_text(report, encoding='utf-8')
        
        print(f"\nüìã Rapport sauvegard√©: {report_path}")
        print("\n" + "=" * 50)
        print(report)
        
        return report

if __name__ == "__main__":
    cleanup = DTCCleanupManager()
    report = cleanup.run_cleanup()
