#!/usr/bin/env python3
"""
üîç TEST DIAGNOSTIC SIMPLE - MIA_IA_SYSTEM
Test de diagnostic pour identifier les probl√®mes
"""

import sys
import asyncio
from pathlib import Path
from datetime import datetime

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

from core.logger import get_logger
from automation_modules import AutomationConfig, TradingSignal
from automation_modules.optimized_trading_system import OptimizedTradingSystem

logger = get_logger(__name__)

async def test_diagnostic():
    """Test de diagnostic simple"""
    logger.info("üîç D√âMARRAGE DIAGNOSTIC")
    
    try:
        # 1. Test cr√©ation config
        logger.info("1Ô∏è‚É£ Test cr√©ation config...")
        config = AutomationConfig()
        logger.info("‚úÖ Config cr√©√©e")
        
        # 2. Test cr√©ation syst√®me
        logger.info("2Ô∏è‚É£ Test cr√©ation syst√®me...")
        trading_system = OptimizedTradingSystem(config)
        logger.info("‚úÖ Syst√®me cr√©√©")
        
        # 3. Test connexion Sierra
        logger.info("3Ô∏è‚É£ Test connexion Sierra...")
        connected = await trading_system.sierra.connect()
        logger.info(f"‚úÖ Connexion Sierra: {connected}")
        
        # 4. Test optimisation
        logger.info("4Ô∏è‚É£ Test optimisation...")
        optimized = await trading_system.optimizer.optimize_connection()
        logger.info(f"‚úÖ Optimisation: {optimized}")
        
        # 5. Test latence
        logger.info("5Ô∏è‚É£ Test latence...")
        latency = await trading_system._test_current_latency()
        logger.info(f"‚úÖ Latence: {latency:.2f}ms")
        
        # 6. Test signal
        logger.info("6Ô∏è‚É£ Test cr√©ation signal...")
        signal = TradingSignal(
            direction="LONG",
            confidence=0.90,
            price=4500.0,
            timestamp=datetime.now(),
            confluence=0.85,
            stop_loss=4495.0,
            take_profit=4510.0
        )
        signal.symbol = "ES"
        signal.quantity = 1
        logger.info("‚úÖ Signal cr√©√©")
        
        # 7. Test ex√©cution scalping
        logger.info("7Ô∏è‚É£ Test ex√©cution scalping...")
        order_id = await trading_system.execute_scalping_trade(signal)
        logger.info(f"‚úÖ Scalping ex√©cut√©: {order_id}")
        
        logger.info("üéâ DIAGNOSTIC R√âUSSI")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå ERREUR DIAGNOSTIC: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    success = asyncio.run(test_diagnostic())
    if success:
        logger.info("‚úÖ DIAGNOSTIC COMPLET - SYST√àME OP√âRATIONNEL")
    else:
        logger.error("‚ùå DIAGNOSTIC √âCHOU√â - PROBL√àME IDENTIFI√â")

if __name__ == "__main__":
    main() 