#!/usr/bin/env python3
"""
Test Unique - MIA_IA_SYSTEM
===========================
Test unique avec Client ID unique.
"""

import time
import random
from ib_insync import IB, Future

def test_unique():
    """Test unique"""
    # Client ID unique bas√© sur le temps
    client_id = int(time.time() % 1000) + 100
    
    print(f"üöÄ TEST UNIQUE (Client ID: {client_id})")
    print("=" * 50)
    
    # Connexion TWS Real
    ib = IB()
    
    try:
        print(f"1Ô∏è‚É£ Connexion TWS Real (Client ID: {client_id})...")
        ib.connect('127.0.0.1', 7496, clientId=client_id)
        print("‚úÖ Connexion TWS Real OK")
        
        # 2. Test ES Futures (d√©j√† confirm√©)
        print("\n2Ô∏è‚É£ Test ES Futures...")
        es_contract = Future('ES', '202412', 'CME')
        ib.qualifyContracts(es_contract)
        es_ticker = ib.reqMktData(es_contract)
        
        print("   ‚è≥ Attente donn√©es ES...")
        time.sleep(3)
        
        if es_ticker.marketPrice():
            print(f"‚úÖ Prix ES: {es_ticker.marketPrice()}")
            print("üéâ SUCC√àS ! ES Futures fonctionne !")
        else:
            print("‚ùå Pas de prix ES")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        print("\n3Ô∏è‚É£ D√©connexion...")
        ib.disconnect()
        print("‚úÖ D√©connexion propre")

if __name__ == "__main__":
    try:
        test_unique()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrompu")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()


