#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Analyse Probl√®mes Critiques
Diagnostic et correction des probl√®mes OHLC, connexion et volume
"""

import os
import sys
import glob
import time
import json
from datetime import datetime, timedelta

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def analyser_problemes_critiques():
    """Analyser les probl√®mes critiques du syst√®me"""
    
    print("MIA_IA_SYSTEM - ANALYSE PROBL√àMES CRITIQUES")
    print("=" * 60)
    print("üîç Diagnostic des probl√®mes OHLC, connexion et volume")
    print("‚è∞ Dur√©e: 1 minute")
    print("üéØ Objectif: Correction des donn√©es erron√©es")
    print("=" * 60)
    
    start_time = datetime.now()
    analysis_duration = timedelta(minutes=1)
    
    # Variables de suivi
    ohlc_issues = []
    connection_issues = []
    volume_issues = []
    price_errors = []
    
    print(f"‚è∞ D√©but analyse: {start_time.strftime('%H:%M:%S')}")
    print(f"‚è∞ Fin pr√©vue: {(start_time + analysis_duration).strftime('%H:%M:%S')}")
    
    print("\nüìä ANALYSE EN COURS:")
    print("=" * 40)
    
    try:
        while datetime.now() < start_time + analysis_duration:
            current_time = datetime.now()
            elapsed = current_time - start_time
            remaining = analysis_duration - elapsed
            
            print(f"\n‚è∞ {current_time.strftime('%H:%M:%S')} | "
                  f"√âcoul√©: {elapsed.total_seconds():.0f}s | "
                  f"Reste: {remaining.total_seconds():.0f}s")
            
            # 1. ANALYSE LOGS R√âCENTS
            print("üìÑ Analyse logs r√©cents...")
            
            log_files = []
            for pattern in ["logs/*.log", "*.log"]:
                log_files.extend(glob.glob(pattern))
            
            for log_file in log_files:
                try:
                    with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
                        lines = f.readlines()
                        
                    # Analyser les derni√®res lignes
                    recent_lines = lines[-50:] if len(lines) > 50 else lines
                    
                    for line in recent_lines:
                        line = line.strip()
                        
                        # D√©tecter probl√®mes OHLC
                        if any(pattern in line.lower() for pattern in ['ohlc', 'o=nan', 'h=nan', 'l=nan', 'c=nan', 'price error']):
                            ohlc_issues.append({
                                'time': datetime.now().strftime('%H:%M:%S'),
                                'line': line[:100] + '...' if len(line) > 100 else line,
                                'file': os.path.basename(log_file)
                            })
                            print(f"   ‚ùå OHLC incoh√©rent: {line[:80]}...")
                        
                        # D√©tecter probl√®mes connexion
                        if any(pattern in line.lower() for pattern in ['timeout', 'connection', 'disconnect', 'reconnect']):
                            connection_issues.append({
                                'time': datetime.now().strftime('%H:%M:%S'),
                                'line': line[:100] + '...' if len(line) > 100 else line,
                                'file': os.path.basename(log_file)
                            })
                            print(f"   üîå Probl√®me connexion: {line[:80]}...")
                        
                        # D√©tecter probl√®mes volume
                        if any(pattern in line.lower() for pattern in ['volume: 192.0', 'volume constant', 'volume unchanged']):
                            volume_issues.append({
                                'time': datetime.now().strftime('%H:%M:%S'),
                                'line': line[:100] + '...' if len(line) > 100 else line,
                                'file': os.path.basename(log_file)
                            })
                            print(f"   ‚ö†Ô∏è Volume constant: {line[:80]}...")
                        
                        # D√©tecter erreurs de prix sp√©cifiques
                        if '6518' in line or 'price' in line.lower():
                            price_errors.append({
                                'time': datetime.now().strftime('%H:%M:%S'),
                                'line': line[:100] + '...' if len(line) > 100 else line,
                                'file': os.path.basename(log_file)
                            })
                            print(f"   üö® Erreur prix d√©tect√©e: {line[:80]}...")
                            
                except Exception as e:
                    continue
            
            # 2. STATISTIQUES ACTUELLES
            print(f"\nüìä STATISTIQUES PROBL√àMES:")
            print(f"   ‚ùå Probl√®mes OHLC: {len(ohlc_issues)}")
            print(f"   üîå Probl√®mes connexion: {len(connection_issues)}")
            print(f"   ‚ö†Ô∏è Probl√®mes volume: {len(volume_issues)}")
            print(f"   üö® Erreurs prix: {len(price_errors)}")
            
            # 3. ANALYSE DES CAUSES
            print(f"\nüîç ANALYSE DES CAUSES:")
            
            # Analyser les probl√®mes OHLC
            if len(ohlc_issues) > 0:
                print("   ‚ùå OHLC - Causes possibles:")
                print("      ‚Ä¢ Donn√©es TWS corrompues")
                print("      ‚Ä¢ Probl√®me de parsing")
                print("      ‚Ä¢ Cache de donn√©es obsol√®te")
                print("      ‚Ä¢ Connexion instable")
            
            # Analyser les probl√®mes connexion
            if len(connection_issues) > 0:
                print("   üîå Connexion - Causes possibles:")
                print("      ‚Ä¢ TWS surcharg√©")
                print("      ‚Ä¢ Probl√®me r√©seau")
                print("      ‚Ä¢ Client ID en conflit")
                print("      ‚Ä¢ Port bloqu√©")
            
            # Analyser les probl√®mes volume
            if len(volume_issues) > 0:
                print("   ‚ö†Ô∏è Volume - Causes possibles:")
                print("      ‚Ä¢ Donn√©es simul√©es")
                print("      ‚Ä¢ Cache de donn√©es")
                print("      ‚Ä¢ Source de donn√©es incorrecte")
            
            # Analyser les erreurs de prix
            if len(price_errors) > 0:
                print("   üö® Prix - Causes possibles:")
                print("      ‚Ä¢ Prix ES incorrect (6518 vs 6489)")
                print("      ‚Ä¢ Donn√©es obsol√®tes")
                print("      ‚Ä¢ Probl√®me de synchronisation")
            
            # Attendre avant prochaine analyse
            time.sleep(10)
            
    except KeyboardInterrupt:
        print("\nüõë Analyse arr√™t√©e par l'utilisateur")
    
    # R√âSUM√â FINAL
    end_time = datetime.now()
    total_duration = end_time - start_time
    
    print("\nüìä RAPPORT FINAL")
    print("=" * 40)
    print(f"‚è∞ Dur√©e totale: {total_duration.total_seconds():.1f} secondes")
    print(f"‚ùå Probl√®mes OHLC: {len(ohlc_issues)}")
    print(f"üîå Probl√®mes connexion: {len(connection_issues)}")
    print(f"‚ö†Ô∏è Probl√®mes volume: {len(volume_issues)}")
    print(f"üö® Erreurs prix: {len(price_errors)}")
    
    # RECOMMANDATIONS DE CORRECTION
    print("\nüöÄ RECOMMANDATIONS DE CORRECTION")
    print("=" * 40)
    
    if len(price_errors) > 0:
        print("üö® PRIORIT√â MAXIMALE - Erreur prix ES:")
        print("   ‚Ä¢ Ex√©cuter: python corriger_prix_tws.py")
        print("   ‚Ä¢ Red√©marrer TWS")
        print("   ‚Ä¢ V√©rifier souscription ES")
    
    if len(ohlc_issues) > 50:
        print("‚ùå PRIORIT√â HAUTE - Probl√®mes OHLC:")
        print("   ‚Ä¢ Ex√©cuter: python forcer_donnees_reelles_ibkr.py")
        print("   ‚Ä¢ Nettoyer cache de donn√©es")
        print("   ‚Ä¢ V√©rifier connexion TWS")
    
    if len(connection_issues) > 20:
        print("üîå PRIORIT√â MOYENNE - Probl√®mes connexion:")
        print("   ‚Ä¢ Red√©marrer TWS")
        print("   ‚Ä¢ V√©rifier port 7497")
        print("   ‚Ä¢ Changer Client ID si n√©cessaire")
    
    if len(volume_issues) > 0:
        print("‚ö†Ô∏è PRIORIT√â BASSE - Probl√®mes volume:")
        print("   ‚Ä¢ V√©rifier source de donn√©es")
        print("   ‚Ä¢ Nettoyer cache")
    
    # PLAN D'ACTION
    print("\nüìã PLAN D'ACTION RECOMMAND√â")
    print("=" * 40)
    print("1. üö® Corriger prix ES (CRITIQUE)")
    print("2. ‚ùå Corriger donn√©es OHLC")
    print("3. üîå Optimiser connexion TWS")
    print("4. ‚ö†Ô∏è V√©rifier volumes")
    print("5. ‚úÖ Relancer analyse")

if __name__ == "__main__":
    analyser_problemes_critiques()


