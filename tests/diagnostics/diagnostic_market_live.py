#!/usr/bin/env python3
"""
üîç DIAGNOSTIC MARCH√â LIVE - MIA_IA_SYSTEM
==========================================

Script de diagnostic pour analyser l'√©tat du syst√®me et les donn√©es de march√©
en temps r√©el pour identifier les probl√®mes OrderFlow.
"""

import sys
import asyncio
import time
from pathlib import Path

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

from core.logger import get_logger
from core.ibkr_connector import IBKRConnector
from automation_modules.orderflow_analyzer import OrderFlowAnalyzer
from automation_modules.config_manager import AutomationConfig

logger = get_logger(__name__)

class MarketDiagnostic:
    """Diagnostic complet du syst√®me de trading"""
    
    def __init__(self):
        self.config = AutomationConfig()
        self.ibkr_connector = None
        self.orderflow_analyzer = None
        
    async def run_full_diagnostic(self):
        """Lance un diagnostic complet"""
        logger.info("üîç DIAGNOSTIC MARCH√â LIVE - MIA_IA_SYSTEM")
        logger.info("=" * 60)
        
        # 1. Test connexion IBKR
        await self._test_ibkr_connection()
        
        # 2. Test donn√©es ES/NQ
        await self._test_market_data()
        
        # 3. Test OrderFlow Analyzer
        await self._test_orderflow_analyzer()
        
        # 4. Test seuils optimis√©s
        await self._test_optimized_thresholds()
        
        # 5. Recommandations
        await self._provide_recommendations()
        
    async def _test_ibkr_connection(self):
        """Test de la connexion IBKR"""
        logger.info("üîå TEST CONNEXION IBKR")
        logger.info("-" * 30)
        
        try:
            self.ibkr_connector = IBKRConnector()
            await self.ibkr_connector.connect()
            
            if self.ibkr_connector.is_connected():
                logger.info("‚úÖ Connexion IBKR: SUCC√àS")
                logger.info(f"   üì° Host: {self.ibkr_connector.host}")
                logger.info(f"   üîå Port: {self.ibkr_connector.port}")
                logger.info(f"   üÜî Client ID: {self.ibkr_connector.client_id}")
                
                # Test contrats
                contracts = await self.ibkr_connector.get_contracts()
                if contracts:
                    logger.info("‚úÖ Contrats initialis√©s:")
                    for symbol, contract in contracts.items():
                        logger.info(f"   üìä {symbol}: {contract.symbol} ({contract.localSymbol})")
                else:
                    logger.warning("‚ö†Ô∏è Aucun contrat initialis√©")
                    
            else:
                logger.error("‚ùå Connexion IBKR: √âCHEC")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion IBKR: {e}")
            
    async def _test_market_data(self):
        """Test des donn√©es de march√©"""
        logger.info("üìä TEST DONN√âES MARCH√â")
        logger.info("-" * 30)
        
        if not self.ibkr_connector or not self.ibkr_connector.is_connected():
            logger.error("‚ùå Impossible de tester - Pas de connexion IBKR")
            return
            
        try:
            # Test ES
            es_data = await self.ibkr_connector.get_orderflow_market_data('ES')
            if es_data:
                logger.info("‚úÖ Donn√©es ES r√©cup√©r√©es:")
                logger.info(f"   üìà Prix: {es_data.get('price', 'N/A')}")
                logger.info(f"   üìä Volume: {es_data.get('volume', 'N/A')}")
                logger.info(f"   üìà Delta: {es_data.get('delta', 'N/A')}")
                logger.info(f"   üí∞ Bid/Ask: {es_data.get('bid_volume', 'N/A')}/{es_data.get('ask_volume', 'N/A')}")
            else:
                logger.warning("‚ö†Ô∏è Aucune donn√©e ES")
                
            # Test NQ
            nq_data = await self.ibkr_connector.get_orderflow_market_data('NQ')
            if nq_data:
                logger.info("‚úÖ Donn√©es NQ r√©cup√©r√©es:")
                logger.info(f"   üìà Prix: {nq_data.get('price', 'N/A')}")
                logger.info(f"   üìä Volume: {nq_data.get('volume', 'N/A')}")
                logger.info(f"   üìà Delta: {nq_data.get('delta', 'N/A')}")
                logger.info(f"   üí∞ Bid/Ask: {nq_data.get('bid_volume', 'N/A')}/{nq_data.get('ask_volume', 'N/A')}")
            else:
                logger.warning("‚ö†Ô∏è Aucune donn√©e NQ")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur donn√©es march√©: {e}")
            
    async def _test_orderflow_analyzer(self):
        """Test de l'OrderFlow Analyzer"""
        logger.info("üß† TEST ORDERFLOW ANALYZER")
        logger.info("-" * 30)
        
        try:
            self.orderflow_analyzer = OrderFlowAnalyzer(self.config)
            logger.info("‚úÖ OrderFlow Analyzer initialis√©")
            
            # Test avec donn√©es simul√©es
            test_data = {
                'price': 6450.0,
                'volume': 500,
                'delta': 100.0,
                'bid_volume': 250,
                'ask_volume': 250,
                'mode': 'test'
            }
            
            signal = await self.orderflow_analyzer.analyze_orderflow_data(test_data)
            if signal:
                logger.info("‚úÖ Signal OrderFlow g√©n√©r√©:")
                logger.info(f"   üéØ Type: {signal.signal_type}")
                logger.info(f"   üìä Confiance: {signal.confidence:.3f}")
                logger.info(f"   üìù Raison: {signal.reasoning}")
            else:
                logger.warning("‚ö†Ô∏è Aucun signal g√©n√©r√© avec donn√©es de test")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur OrderFlow Analyzer: {e}")
            
    async def _test_optimized_thresholds(self):
        """Test des seuils optimis√©s"""
        logger.info("üéØ TEST SEUILS OPTIMIS√âS")
        logger.info("-" * 30)
        
        try:
            # Test avec donn√©es faibles
            weak_data = {
                'price': 6450.0,
                'volume': 60,  # Volume faible
                'delta': 5.0,  # Delta faible
                'bid_volume': 30,
                'ask_volume': 30,
                'mode': 'test'
            }
            
            signal = await self.orderflow_analyzer.analyze_orderflow_data(weak_data)
            if signal:
                logger.info("‚úÖ Signal g√©n√©r√© avec donn√©es faibles (seuils optimis√©s)")
                logger.info(f"   üéØ Type: {signal.signal_type}")
                logger.info(f"   üìä Confiance: {signal.confidence:.3f}")
            else:
                logger.warning("‚ö†Ô∏è Signal rejet√© m√™me avec seuils optimis√©s")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test seuils: {e}")
            
    async def _provide_recommendations(self):
        """Fournit des recommandations"""
        logger.info("üí° RECOMMANDATIONS")
        logger.info("-" * 30)
        
        logger.info("üöÄ POUR TRADING LIVE:")
        logger.info("   1. V√©rifier que IBKR TWS/Gateway est ouvert")
        logger.info("   2. S'assurer que les contrats ES/NQ sont activ√©s")
        logger.info("   3. V√©rifier les permissions de trading")
        logger.info("   4. Commencer en mode DRY RUN d'abord")
        
        logger.info("üîß POUR R√âSOUDRE LES ERREURS ORDERFLOW:")
        logger.info("   1. Seuils d√©j√† optimis√©s (5% confiance, 50 volume)")
        logger.info("   2. V√©rifier la qualit√© des donn√©es de march√©")
        logger.info("   3. Analyser les logs pour identifier les rejets")
        logger.info("   4. Ajuster les param√®tres si n√©cessaire")
        
        logger.info("üìä POUR LA STRAT√âGIE LEADERSHIP:")
        logger.info("   1. Syst√®me pr√™t pour 84.6% Win Rate")
        logger.info("   2. Position sizing adaptatif activ√©")
        logger.info("   3. Entry timing optimis√©")
        logger.info("   4. Risk management en place")

async def main():
    """Fonction principale"""
    try:
        diagnostic = MarketDiagnostic()
        await diagnostic.run_full_diagnostic()
        
    except KeyboardInterrupt:
        logger.info("üõë Diagnostic interrompu par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur diagnostic: {e}")

if __name__ == "__main__":
    asyncio.run(main())

