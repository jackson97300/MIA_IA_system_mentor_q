#!/usr/bin/env python3
"""
Test avec les vrais conids ES futures IBKR
Bas√© sur la documentation IBKR officielle
"""

import sys
import json
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

from core.ibkr_beta_connector import IBKRBetaConnector, IBKRBetaConfig

def test_real_es_conids():
    """Tester les vrais conids ES futures IBKR"""
    
    # Conids ES futures r√©els (bas√©s sur documentation IBKR)
    # Ces conids changent selon les mois d'expiration
    real_es_conids = [
        # ES futures - Front month et prochains mois
        "265598",  # ES March 2025 (ESH25)
        "265599",  # ES June 2025 (ESM25) 
        "265600",  # ES September 2025 (ESU25)
        "265601",  # ES December 2025 (ESZ25)
        
        # ES futures - Mois pr√©c√©dents (pour test)
        "265595",  # ES December 2024 (ESZ24)
        "265596",  # ES March 2025 (ESH25)
        "265597",  # ES June 2025 (ESM25)
        
        # Conids alternatifs (si les premiers ne marchent pas)
        "265602",  # ES futures alternative
        "265603",  # ES futures alternative
        "265604",  # ES futures alternative
        "265605",  # ES futures alternative
        "265606",  # ES futures alternative
        "265607",  # ES futures alternative
        "265608",  # ES futures alternative
        "265609",  # ES futures alternative
        "265610",  # ES futures alternative
    ]
    
    config = IBKRBetaConfig()
    connector = IBKRBetaConnector(config)
    
    try:
        print("üîç Test des vrais conids ES futures IBKR...")
        print("=" * 60)
        
        if not connector.connect():
            print("‚ùå Impossible de se connecter au gateway")
            return None
            
        if not connector.config.authenticated:
            if not connector.authenticate():
                print("‚ùå Authentification √©chou√©e")
                return None
        
        print("‚úÖ Connect√© et authentifi√©")
        print("\nüîç Test des conids ES futures...")
        
        valid_conids = []
        
        for conid in real_es_conids:
            print(f"\n   Test conid: {conid}")
            
            # Test avec diff√©rents champs
            fields = ["31", "84", "86"]  # bid, last, volume
            market_data = connector.get_market_data(conid, fields)
            
            if market_data:
                # V√©rifier si c'est un vrai contrat (pas -1)
                if isinstance(market_data, list) and len(market_data) > 0:
                    data = market_data[0]
                    if data.get("conid") != "-1" and data.get("conid") != -1:
                        print(f"   ‚úÖ Conid {conid} VALIDE!")
                        print(f"   üìä Donn√©es: {data}")
                        valid_conids.append(conid)
                        
                        # Test donn√©es historiques
                        print(f"   üìà Test donn√©es historiques...")
                        historical = connector.get_historical_data(conid, "1d", "1min")
                        if historical:
                            print(f"   ‚úÖ Historique: {len(historical)} barres")
                        else:
                            print(f"   ‚ùå Pas d'historique")
                        
                        return conid  # Premier conid valide trouv√©
                    else:
                        print(f"   ‚ùå Conid {conid} invalide (conid = {data.get('conid')})")
                else:
                    print(f"   ‚ùå Format donn√©es invalide")
            else:
                print(f"   ‚ùå Pas de donn√©es pour conid {conid}")
        
        if not valid_conids:
            print("\n‚ùå Aucun conid ES futures valide trouv√©")
            print("üí° Solutions:")
            print("   1. V√©rifiez que vous avez acc√®s aux futures")
            print("   2. V√©rifiez que le march√© est ouvert")
            print("   3. Essayez de rechercher manuellement dans TWS")
            print("   4. Les conids peuvent avoir chang√© - v√©rifiez la documentation")
            return None
        
        return valid_conids[0] if valid_conids else None
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return None
    finally:
        connector.disconnect()

def test_es_data_with_conid(conid):
    """Tester les donn√©es ES avec un conid sp√©cifique"""
    print(f"\nüß™ Test complet ES avec conid: {conid}")
    print("=" * 50)
    
    config = IBKRBetaConfig()
    connector = IBKRBetaConnector(config)
    
    try:
        if not connector.connect() or not connector.authenticate():
            return False
        
        # 1. Donn√©es temps r√©el
        print("1Ô∏è‚É£ Donn√©es temps r√©el...")
        fields = ["31", "83", "84", "86", "87", "88", "89", "90"]  # bid, ask, last, volume, high, low, open, close
        market_data = connector.get_market_data(conid, fields)
        
        if market_data and isinstance(market_data, list) and len(market_data) > 0:
            data = market_data[0]
            print("‚úÖ Donn√©es temps r√©el r√©cup√©r√©es:")
            print(f"   Bid: {data.get('31', 'N/A')}")
            print(f"   Ask: {data.get('83', 'N/A')}")
            print(f"   Last: {data.get('84', 'N/A')}")
            print(f"   Volume: {data.get('86', 'N/A')}")
            print(f"   High: {data.get('87', 'N/A')}")
            print(f"   Low: {data.get('88', 'N/A')}")
            print(f"   Open: {data.get('89', 'N/A')}")
            print(f"   Close: {data.get('90', 'N/A')}")
        else:
            print("‚ùå Pas de donn√©es temps r√©el")
            return False
        
        # 2. Donn√©es historiques
        print("\n2Ô∏è‚É£ Donn√©es historiques...")
        historical = connector.get_historical_data(conid, "1d", "1min")
        if historical:
            print(f"‚úÖ {len(historical)} barres historiques r√©cup√©r√©es")
            print("   Derni√®res 3 barres:")
            for i, bar in enumerate(historical[-3:]):
                print(f"      Barre {i+1}: {bar}")
        else:
            print("‚ùå Pas de donn√©es historiques")
        
        # 3. Donn√©es 5 minutes
        print("\n3Ô∏è‚É£ Donn√©es 5 minutes...")
        historical_5min = connector.get_historical_data(conid, "5d", "5min")
        if historical_5min:
            print(f"‚úÖ {len(historical_5min)} barres 5min r√©cup√©r√©es")
        else:
            print("‚ùå Pas de donn√©es 5 minutes")
        
        print("\nüéâ Test complet r√©ussi!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test complet: {e}")
        return False
    finally:
        connector.disconnect()

if __name__ == "__main__":
    # Rechercher un conid valide
    es_conid = test_real_es_conids()
    
    if es_conid:
        print(f"\nüéâ Conid ES futures trouv√©: {es_conid}")
        
        # Test complet avec ce conid
        if test_es_data_with_conid(es_conid):
            print(f"\n‚úÖ Le conid {es_conid} fonctionne parfaitement!")
            print(f"üí° Utilisez ce conid dans vos scripts: {es_conid}")
        else:
            print(f"\n‚ö†Ô∏è Le conid {es_conid} a des probl√®mes")
    else:
        print("\n‚ùå Aucun conid ES futures trouv√©")
        print("üí° V√©rifiez:")
        print("   1. Acc√®s aux futures dans votre compte")
        print("   2. Heures de march√© (ES: 9h30-16h ET)")
        print("   3. Documentation IBKR pour conids actuels")

