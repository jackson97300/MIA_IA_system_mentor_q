#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - V√©rification IBKR Urgence
Diagnostic et correction connexion IBKR
"""

import os
import sys
import socket
import time
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def verifier_ibkr_urgence():
    """V√©rification d'urgence IBKR"""
    
    print("MIA_IA_SYSTEM - V√âRIFICATION IBKR URGENCE")
    print("=" * 60)
    print("üîß Diagnostic et correction connexion IBKR")
    print("üéØ Objectif: R√©soudre timeout connexion")
    print("=" * 60)
    
    # 1. V√âRIFICATION PORTS
    print("\nüìä 1. V√âRIFICATION PORTS")
    print("=" * 40)
    
    ports_to_test = [
        (7497, "TWS"),
        (4002, "Gateway"),
        (4001, "Gateway Paper"),
        (7496, "TWS Paper")
    ]
    
    active_ports = []
    
    for port, name in ports_to_test:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex(('127.0.0.1', port))
            sock.close()
            
            if result == 0:
                print(f"‚úÖ {name} actif (port {port})")
                active_ports.append((port, name))
            else:
                print(f"‚ùå {name} inactif (port {port})")
                
        except Exception as e:
            print(f"‚ùå Erreur test {name}: {e}")
    
    # 2. RECOMMANDATIONS
    print("\nüí° 2. RECOMMANDATIONS")
    print("=" * 40)
    
    if not active_ports:
        print("‚ùå AUCUN PORT ACTIF D√âTECT√â")
        print("\nüîß ACTIONS REQUISES:")
        print("1. D√©marrer TWS ou Gateway")
        print("2. Activer l'API dans les param√®tres")
        print("3. V√©rifier les permissions")
        print("4. Red√©marrer l'application")
        
        print("\nüìã CHECKLIST:")
        print("‚ñ° TWS/Gateway d√©marr√©")
        print("‚ñ° API activ√©e (Global Configuration)")
        print("‚ñ° Socket clients activ√©s")
        print("‚ñ° Ports ouverts (7497/4002)")
        print("‚ñ° Firewall d√©sactiv√©")
        
    elif len(active_ports) == 1:
        port, name = active_ports[0]
        print(f"‚úÖ {name} d√©tect√© sur port {port}")
        print(f"üéØ Utiliser port {port} pour la connexion")
        
        # Configuration recommand√©e
        print(f"\nüîß CONFIGURATION RECOMMAND√âE:")
        print(f"Host: 127.0.0.1")
        print(f"Port: {port}")
        print(f"Client ID: 1")
        
    else:
        print("‚ö†Ô∏è MULTIPLES PORTS ACTIFS")
        for port, name in active_ports:
            print(f"   - {name}: {port}")
        
        print("\nüéØ RECOMMANDATION:")
        print("Utiliser TWS (7497) pour plus de stabilit√©")
    
    # 3. TEST CONNEXION RAPIDE
    print("\nüìä 3. TEST CONNEXION RAPIDE")
    print("=" * 40)
    
    if active_ports:
        port, name = active_ports[0]
        print(f"üîó Test connexion {name} (port {port})...")
        
        try:
            # Test connexion simple
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            sock.connect(('127.0.0.1', port))
            sock.close()
            print(f"‚úÖ Connexion {name} r√©ussie")
            
            # Recommandation finale
            print(f"\nüöÄ CONFIGURATION FINALE:")
            print(f"Host: 127.0.0.1")
            print(f"Port: {port}")
            print(f"Client ID: 1")
            print(f"Timeout: 30s (r√©duit)")
            
        except Exception as e:
            print(f"‚ùå √âchec connexion {name}: {e}")
    
    # 4. COMMANDES DE CORRECTION
    print("\nüîß 4. COMMANDES DE CORRECTION")
    print("=" * 40)
    
    if active_ports:
        port, name = active_ports[0]
        print("‚úÖ Port actif d√©tect√© - Correction possible")
        print("\nüí° Scripts de correction:")
        print(f"python corriger_connexion_{port}.py")
        print("python test_connexion_rapide.py")
        print("python lance_systeme_corrige.py")
    else:
        print("‚ùå Aucun port actif - Correction manuelle requise")
        print("\nüí° Actions manuelles:")
        print("1. D√©marrer TWS/Gateway")
        print("2. Activer API")
        print("3. Relancer diagnostic")

if __name__ == "__main__":
    verifier_ibkr_urgence()






