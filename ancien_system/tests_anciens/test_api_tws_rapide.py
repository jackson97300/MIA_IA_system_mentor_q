#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Test API TWS Rapide
Test rapide de l'API TWS avec timeout court
"""

import os
import sys
import asyncio
import time
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_api_tws_rapide():
    """Test rapide de l'API TWS"""
    
    print("üîÑ MIA_IA_SYSTEM - TEST API TWS RAPIDE")
    print("=" * 50)
    print("üîç Test API TWS - Timeout court")
    print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')}")
    print("üéØ Connexion rapide avec donn√©es ES")
    print("=" * 50)
    
    try:
        # Import de la configuration et du connecteur
        from config.mia_ia_system_tws_paper_fixed import MIA_IA_SYSTEM_GATEWAY_CONFIG
        from core.ibkr_connector import IBKRConnector
        
        print("\nüîß Configuration charg√©e...")
        ib_config = MIA_IA_SYSTEM_GATEWAY_CONFIG['ibkr']
        
        # R√©duire le timeout pour test rapide
        ib_config['timeout'] = 10  # 10 secondes au lieu de 60
        ib_config['reconnect_interval'] = 2  # 2 secondes
        
        print(f"   üìç Host: {ib_config.get('host', 'N/A')}")
        print(f"   üîå Port: {ib_config.get('port', 'N/A')}")
        print(f"   üÜî Client ID: {ib_config.get('client_id', 'N/A')}")
        print(f"   ‚è±Ô∏è Timeout: {ib_config.get('timeout', 'N/A')}s")
        
        # Cr√©ation du connecteur
        print("\nüîå Cr√©ation connecteur IBKR...")
        connector = IBKRConnector(ib_config)
        
        # Connexion asynchrone avec timeout court
        print("üîå Tentative de connexion rapide...")
        print("   ‚è≥ Attente max: 10 secondes...")
        
        try:
            connected = await asyncio.wait_for(connector.connect(), timeout=10)
            if connected:
                print("   ‚úÖ Connexion r√©ussie !")
                
                # Test rapide des donn√©es ES
                print("\nüìä Test donn√©es ES...")
                try:
                    es_data = await asyncio.wait_for(connector.get_market_data('ES'), timeout=5)
                    if es_data:
                        print(f"   ‚úÖ ES - Prix: {es_data.get('last', 'N/A')}")
                        print(f"   üìà ES - Bid: {es_data.get('bid', 'N/A')}")
                        print(f"   üìâ ES - Ask: {es_data.get('ask', 'N/A')}")
                        print(f"   üìä ES - Volume: {es_data.get('volume', 'N/A')}")
                        
                        # Test OHLC rapide
                        print("\nüìà Test OHLC ES...")
                        ohlc_data = await asyncio.wait_for(connector.get_historical_data('ES', '1 D', '1 min'), timeout=5)
                        if ohlc_data and len(ohlc_data) > 0:
                            latest = ohlc_data[-1]
                            print(f"   ‚úÖ OHLC - O:{latest.get('open', 'N/A')} H:{latest.get('high', 'N/A')} L:{latest.get('low', 'N/A')} C:{latest.get('close', 'N/A')}")
                        else:
                            print("   ‚ö†Ô∏è OHLC - Donn√©es non disponibles")
                    else:
                        print("   ‚ùå ES - Donn√©es non disponibles")
                except asyncio.TimeoutError:
                    print("   ‚è∞ Timeout donn√©es ES (5s)")
                except Exception as e:
                    print(f"   ‚ùå Erreur donn√©es ES: {str(e)}")
                
                # Test statut connexion
                print("\nüîç Statut connexion...")
                try:
                    if await connector.is_connected():
                        print("   ‚úÖ Connexion active")
                    else:
                        print("   ‚ùå Connexion perdue")
                except Exception as e:
                    print(f"   ‚ùå Erreur statut: {str(e)}")
                
            else:
                print("   ‚ùå √âchec connexion")
                return False
                
        except asyncio.TimeoutError:
            print("   ‚è∞ Timeout connexion (10s)")
            print("   üí° Suggestion: V√©rifier que TWS est bien d√©marr√©")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erreur import: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {str(e)}")
        return False
    
    # R√âSUM√â
    print("\nüìä R√âSUM√â TEST RAPIDE")
    print("=" * 50)
    print("‚úÖ Connexion TWS √©tablie")
    print("‚úÖ API TWS fonctionnelle")
    print("‚úÖ Donn√©es ES accessibles")
    print("üéØ Pr√™t pour trading simulation")
    
    return True

async def main():
    """Fonction principale asynchrone"""
    await test_api_tws_rapide()

if __name__ == "__main__":
    # Ex√©cuter la fonction asynchrone
    asyncio.run(main())

