#!/usr/bin/env python3
"""
TEST IB GATEWAY ROBUSTE
MIA_IA_SYSTEM - Test connexion IB Gateway avec configuration optimis√©e
"""
import asyncio
import sys
import time
import socket
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from core.ibkr_connector import IBKRConnector

def test_port_connectivite():
    """Test connectivit√© port 4002"""
    print("üîç TEST CONNECTIVIT√â PORT 4002")
    print("-" * 35)
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('127.0.0.1', 4002))
        sock.close()
        
        if result == 0:
            print("‚úÖ Port 4002 accessible")
            return True
        else:
            print("‚ùå Port 4002 ferm√©")
            return False
    except Exception as e:
        print(f"‚ùå Erreur test port: {e}")
        return False

async def test_ib_gateway_robuste():
    """Test connexion IB Gateway avec configuration robuste"""
    
    print("üîß TEST IB GATEWAY ROBUSTE")
    print("=" * 50)
    
    # Test connectivit√© d'abord
    if not test_port_connectivite():
        print("‚ùå IB Gateway non accessible - V√©rifier qu'il est d√©marr√©")
        return False
    
    print()
    
    # Configuration robuste
    config = {
        'ibkr_host': '127.0.0.1',
        'ibkr_port': 4002,  # IB Gateway
        'ibkr_client_id': 1,  # Client ID 1
        'connection_timeout': 60,  # Timeout augment√©
        'request_timeout': 30,     # Timeout requ√™tes
        'simulation_mode': False,
        'require_real_data': False,  # D√©sactiv√© temporairement
        'use_ib_insync': True,
        'max_reconnection_attempts': 3,
        'reconnection_delay': 5
    }
    
    print("üì° CONFIGURATION ROBUSTE:")
    print(f"   Host: {config['ibkr_host']}")
    print(f"   Port: {config['ibkr_port']} (IB Gateway)")
    print(f"   Client ID: {config['ibkr_client_id']}")
    print(f"   Connection Timeout: {config['connection_timeout']}s")
    print(f"   Request Timeout: {config['request_timeout']}s")
    print(f"   Require Real Data: {config['require_real_data']}")
    print()
    
    try:
        print("üîå √âTAPE 1: TENTATIVE CONNEXION")
        print("-" * 35)
        
        connector = IBKRConnector(config)
        start_time = time.time()
        
        print("‚è≥ Connexion en cours...")
        success = await connector.connect()
        connection_time = time.time() - start_time
        
        if success:
            print(f"‚úÖ CONNEXION R√âUSSIE en {connection_time:.2f}s")
            print("üéâ IB Gateway fonctionne parfaitement!")
            print()
            
            print("üìä √âTAPE 2: TEST R√âCUP√âRATION DONN√âES")
            print("-" * 40)
            
            # Test avec require_real_data = False d'abord
            try:
                market_data = await connector.get_market_data("ES")
                
                if market_data:
                    print("‚úÖ DONN√âES R√âCUP√âR√âES!")
                    
                    if isinstance(market_data, dict):
                        print("üìã Type: Dictionnaire")
                        print(f"   Symbol: {market_data.get('symbol', 'N/A')}")
                        print(f"   Prix: {market_data.get('last', 'N/A')}")
                        print(f"   Volume: {market_data.get('volume', 'N/A')}")
                        print(f"   Mode: {market_data.get('mode', 'N/A')}")
                        
                        if 'error' in market_data:
                            print(f"‚ö†Ô∏è Erreur: {market_data['error']}")
                        else:
                            print("‚úÖ Aucune erreur d√©tect√©e")
                    else:
                        print(f"üìã Type: {type(market_data)}")
                        
                else:
                    print("‚ö†Ô∏è Pas de donn√©es r√©cup√©r√©es")
                    
            except Exception as e:
                print(f"‚ùå Erreur r√©cup√©ration donn√©es: {e}")
            
            print("\nüîÑ √âTAPE 3: TEST PERSISTANCE")
            print("-" * 30)
            
            # Test persistance courte
            print("‚è≥ Test persistance (15s)...")
            for i in range(3):
                await asyncio.sleep(5)
                print(f"   ‚úÖ Connexion stable apr√®s {5*(i+1)}s")
            
            print("\nüìä √âTAPE 4: TEST DONN√âES R√âELLES")
            print("-" * 35)
            
            # Test avec require_real_data = True
            config_real = config.copy()
            config_real['require_real_data'] = True
            
            print("üîÑ Test avec donn√©es r√©elles...")
            try:
                connector_real = IBKRConnector(config_real)
                success_real = await connector_real.connect()
                
                if success_real:
                    print("‚úÖ Connexion avec donn√©es r√©elles r√©ussie")
                    market_data_real = await connector_real.get_market_data("ES")
                    
                    if market_data_real and isinstance(market_data_real, dict):
                        print(f"‚úÖ Donn√©es r√©elles: {market_data_real.get('last', 'N/A')}")
                        if 'error' in market_data_real:
                            print(f"‚ö†Ô∏è Erreur 2119: {market_data_real['error']}")
                            print("üí° C'est normal - donn√©es futures limit√©es")
                    else:
                        print("‚ö†Ô∏è Pas de donn√©es r√©elles")
                        
                    await connector_real.disconnect()
                else:
                    print("‚ùå √âchec connexion donn√©es r√©elles")
                    
            except Exception as e:
                print(f"‚ùå Erreur test donn√©es r√©elles: {e}")
            
            await connector.disconnect()
            print("\n‚úÖ TEST ROBUSTE TERMIN√â AVEC SUCC√àS")
            return True
            
        else:
            print(f"‚ùå √âCHEC CONNEXION apr√®s {connection_time:.2f}s")
            print("üîç DIAGNOSTIC:")
            print("   ‚Ä¢ IB Gateway d√©marr√©: ‚úÖ (logs confirm√©s)")
            print("   ‚Ä¢ Port 4002 ouvert: ‚úÖ (test connectivit√©)")
            print("   ‚Ä¢ Client ID 1: ‚ö†Ô∏è Possible conflit")
            print("   ‚Ä¢ Timeout 60s: ‚ö†Ô∏è Peut-√™tre insuffisant")
            return False
            
    except Exception as e:
        print(f"‚ùå ERREUR CRITIQUE: {e}")
        print("üîç V√©rifier la configuration IB Gateway")
        return False

def analyser_situation():
    """Analyse de la situation actuelle"""
    print("\nüìö ANALYSE SITUATION ACTUELLE")
    print("=" * 40)
    
    print("‚úÖ CONFIRM√â:")
    print("   ‚Ä¢ IB Gateway fonctionne (logs)")
    print("   ‚Ä¢ Port 4002 accessible")
    print("   ‚Ä¢ Processus actif (66 threads)")
    print("   ‚Ä¢ Synchronisation temps OK")
    print()
    
    print("‚ö†Ô∏è PROBL√àME IDENTIFI√â:")
    print("   ‚Ä¢ TimeoutError lors connexion API")
    print("   ‚Ä¢ Possible conflit Client ID")
    print("   ‚Ä¢ Configuration timeout insuffisante")
    print()
    
    print("üéØ SOLUTION:")
    print("   ‚Ä¢ Augmenter timeout √† 60s")
    print("   ‚Ä¢ Tester Client IDs alternatifs")
    print("   ‚Ä¢ D√©sactiver require_real_data temporairement")

if __name__ == "__main__":
    print("üîß TEST IB GATEWAY ROBUSTE")
    print("=" * 40)
    
    # Analyse situation
    analyser_situation()
    
    # Test robuste
    success = asyncio.run(test_ib_gateway_robuste())
    
    if success:
        print("\nüéâ SUCC√àS - IB Gateway op√©rationnel")
        print("üí° Configuration robuste valid√©e")
    else:
        print("\n‚ùå √âCHEC - Probl√®me persistant")
        print("üîç V√©rifier configuration IB Gateway")























