#!/usr/bin/env python3
"""
Test IB Simple - MIA_IA_SYSTEM
==============================

Test simple et rapide de connexion IBKR.

USAGE:
python scripts/test_ib_simple.py
"""

import sys
import os
import asyncio
from datetime import datetime

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from core.ibkr_connector import create_ibkr_connector

async def test_ib_simple():
    """Test simple de connexion IBKR"""
    
    print("üîç TEST SIMPLE IBKR")
    print("=" * 30)
    print(f"‚è∞ D√©but: {datetime.now().strftime('%H:%M:%S')}")
    
    connector = None
    try:
        # 1. Test Connexion
        print("\n1Ô∏è‚É£ Test Connexion...")
        connector = create_ibkr_connector()
        
        if await connector.connect():
            print("‚úÖ Connexion OK")
        else:
            print("‚ùå √âchec connexion")
            return
        
        # 2. Test Account Info
        print("\n2Ô∏è‚É£ Test Account Info...")
        try:
            account_info = await connector.get_account_info()
            if account_info:
                print("‚úÖ Account Info OK")
                print(f"   Balance: ${account_info.get('balance', 'N/A')}")
                print(f"   Buying Power: ${account_info.get('buying_power', 'N/A')}")
                print(f"   Account: {account_info.get('account', 'N/A')}")
            else:
                print("‚ùå Pas d'info compte")
        except Exception as e:
            print(f"‚ùå Erreur Account: {e}")
        
        # 3. Test Market Data avec plus de d√©tails
        print("\n3Ô∏è‚É£ Test Market Data...")
        try:
            market_data = await connector.get_market_data("ES")
            if market_data:
                print("‚úÖ Market Data OK")
                print(f"   Last: {market_data.get('last_price', 'N/A')}")
                print(f"   Bid: {market_data.get('bid', 'N/A')}")
                print(f"   Ask: {market_data.get('ask', 'N/A')}")
                print(f"   Volume: {market_data.get('volume', 'N/A')}")
                print(f"   High: {market_data.get('high', 'N/A')}")
                print(f"   Low: {market_data.get('low', 'N/A')}")
                
                # Debug: afficher toutes les cl√©s
                print(f"   Cl√©s disponibles: {list(market_data.keys())}")
            else:
                print("‚ùå Pas de donn√©es march√©")
        except Exception as e:
            print(f"‚ùå Erreur Market Data: {e}")
            import traceback
            traceback.print_exc()
        
        # 4. Test Level 2 avec plus de d√©tails
        print("\n4Ô∏è‚É£ Test Level 2...")
        try:
            level2_data = await connector.get_level2_data("ES")
            if level2_data and level2_data.get('bids') and level2_data.get('asks'):
                print("‚úÖ Level 2 OK")
                print(f"   Bids: {len(level2_data['bids'])} niveaux")
                print(f"   Asks: {len(level2_data['asks'])} niveaux")
                
                # Afficher les premiers niveaux
                if level2_data['bids']:
                    print(f"   Top Bid: {level2_data['bids'][0]}")
                if level2_data['asks']:
                    print(f"   Top Ask: {level2_data['asks'][0]}")
            else:
                print("‚ùå Pas de Level 2")
                print(f"   Donn√©es re√ßues: {level2_data}")
        except Exception as e:
            print(f"‚ùå Erreur Level 2: {e}")
            import traceback
            traceback.print_exc()
        
        # 5. Test Status
        print("\n5Ô∏è‚É£ Test Status...")
        try:
            status = connector.get_connection_status()
            print(f"‚úÖ Status: {status.get('status', 'Unknown')}")
            print(f"   Connected: {status.get('connected', False)}")
            print(f"   Errors: {status.get('errors', 0)}")
            print(f"   Ticks: {status.get('ticks_processed', 0)}")
        except Exception as e:
            print(f"‚ùå Erreur Status: {e}")
        
        # 6. Test direct avec ib_insync
        print("\n6Ô∏è‚É£ Test Direct IB...")
        try:
            if hasattr(connector, 'ib') and connector.ib:
                print("‚úÖ Interface IB disponible")
                
                # Test contrat ES
                from ib_insync import Future
                contract = Future('ES', '202412', 'CME')
                connector.ib.qualifyContracts(contract)
                
                # Test donn√©es temps r√©el
                ticker = connector.ib.reqMktData(contract)
                await asyncio.sleep(2)  # Attendre les donn√©es
                
                if ticker and ticker.marketPrice():
                    print(f"‚úÖ Prix ES: {ticker.marketPrice()}")
                    print(f"   Bid: {ticker.bid}")
                    print(f"   Ask: {ticker.ask}")
                    print(f"   Last: {ticker.last}")
                else:
                    print("‚ùå Pas de prix ES")
            else:
                print("‚ùå Interface IB non disponible")
        except Exception as e:
            print(f"‚ùå Erreur Test Direct: {e}")
        
        # 7. R√©sum√©
        print("\n" + "=" * 30)
        print("üìä R√âSUM√â")
        print("=" * 30)
        print("‚úÖ Connexion: OK")
        print("‚úÖ TWS: Connect√©")
        print("‚úÖ API: Fonctionnelle")
        print(f"‚è∞ Fin: {datetime.now().strftime('%H:%M:%S')}")
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if connector:
            try:
                await connector.disconnect()
                print("‚úÖ D√©connexion propre")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur d√©connexion: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(test_ib_simple())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrompu")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
