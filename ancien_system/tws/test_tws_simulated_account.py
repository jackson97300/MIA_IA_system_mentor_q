#!/usr/bin/env python3
"""
Test connexion TWS compte simul√© sp√©cifique
"""
from ib_insync import *
import time
import socket

def test_port_connection():
    """Test connexion socket basique"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('127.0.0.1', 7497))
        sock.close()
        return result == 0
    except Exception as e:
        print(f"‚ùå Erreur test port: {e}")
        return False

def test_tws_simulated_account():
    """Test connexion TWS compte simul√©"""
    print("üîå Test connexion TWS compte simul√©...")
    
    # Test port d'abord
    print("üì° Test port 7497...")
    if not test_port_connection():
        print("‚ùå Port 7497 non accessible - TWS pas d√©marr√© ou mal configur√©")
        return False
    print("‚úÖ Port 7497 accessible")
    
    # Configuration TWS simul√©
    config = {
        'host': '127.0.0.1',
        'port': 7497,  # Port TWS simul√©
        'client_id': 1,
        'timeout': 30
    }
    
    try:
        # Connexion TWS avec plus de logs
        ib = IB()
        print(f"üì° Tentative connexion TWS: {config['host']}:{config['port']}")
        print("‚ö†Ô∏è Assurez-vous que TWS est ouvert et connect√© au compte simul√©")
        
        # Test connexion avec timeout court d'abord
        ib.connect(
            config['host'], 
            config['port'], 
            clientId=config['client_id'],
            timeout=10  # Timeout court pour diagnostic
        )
        
        print("‚úÖ Connexion TWS r√©ussie !")
        
        # Test donn√©es compte avec plus de d√©tails
        print("\nüìä Test donn√©es compte simul√©...")
        account_summary = ib.accountSummary()
        print(f"‚úÖ Compte connect√©: {len(account_summary)} √©l√©ments trouv√©s")
        
        # Afficher quelques d√©tails du compte
        for item in account_summary[:3]:  # Premiers 3 √©l√©ments
            print(f"   {item.tag}: {item.value}")
        
        # Test donn√©es march√© ES
        print("\nüìà Test donn√©es march√© ES...")
        contract = Future('ES', '202412', 'CME')
        
        try:
            ib.qualifyContracts(contract)
            print("‚úÖ Contrat ES qualifi√©")
            
            # Subscribe market data
            ib.reqMktData(contract)
            time.sleep(3)  # Attendre donn√©es
            
            ticker = ib.ticker(contract)
            if ticker and ticker.marketName():
                print(f"‚úÖ Donn√©es ES: {ticker.marketName()} - Bid: {ticker.bid} Ask: {ticker.ask}")
            else:
                print("‚ö†Ô∏è Pas de donn√©es ES en temps r√©el (normal hors heures march√©)")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur donn√©es ES: {e}")
        
        # Test donn√©es historiques
        print("\nüìö Test donn√©es historiques...")
        try:
            bars = ib.reqHistoricalData(
                contract,
                endDateTime='',
                durationStr='1 D',
                barSizeSetting='1 hour',
                whatToShow='TRADES',
                useRTH=True
            )
            
            if bars:
                print(f"‚úÖ Donn√©es historiques: {len(bars)} barres trouv√©es")
                print(f"   Derni√®re barre: {bars[-1].date} - Close: {bars[-1].close}")
            else:
                print("‚ö†Ô∏è Pas de donn√©es historiques (v√©rifier permissions)")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur donn√©es historiques: {e}")
        
        # D√©connexion
        ib.disconnect()
        print("\n‚úÖ Test TWS compte simul√© termin√© avec succ√®s !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur connexion TWS compte simul√©: {e}")
        print("\nüîß SOLUTIONS POSSIBLES:")
        print("1. V√©rifiez que TWS est connect√© au compte SIMUL√â")
        print("2. V√©rifiez API Settings dans TWS (File ‚Üí Global Configuration)")
        print("3. V√©rifiez que le compte simul√© a les permissions API")
        print("4. Essayez de red√©marrer TWS")
        return False

if __name__ == "__main__":
    test_tws_simulated_account() 