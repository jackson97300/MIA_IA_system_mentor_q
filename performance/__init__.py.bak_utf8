#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Performance Analysis Module
üìä MODULE PERFORMANCE COMPLET & AUTOMATION FOCUS
# Configuration encodage UTF-8
import sys
import io
import codecs

# Configuration plus robuste de l'encodage UTF-8
if sys.platform == "win32":
    # √âviter de reconfigurer si d√©j√† fait
    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
    else:
        # Fallback pour Python < 3.7
        try:
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')
        except:
            # Si erreur, ne rien faire (√©viter le crash)
            pass



Version: Phase 3B - Performance Tracking & Auto-Improvement
Responsabilit√©: Analyse performance temps r√©el, optimisation automatique

COMPOSANTS PRINCIPAUX :
1. üìù TradeLogger - Log trades + contexte complet
2. üìä PerformanceAnalyzer - Analyse automatique performance  
3. üîÑ AdaptiveOptimizer - Syst√®me d'auto-am√©lioration
4. üìà AutomationMetrics - M√©triques sp√©cifiques automation

WORKFLOW AUTOMATION :
Trade ‚Üí Log ‚Üí Analyze ‚Üí Optimize ‚Üí Adapt ‚Üí Improve

M√âTRIQUES CRITIQUES :
- P&L temps r√©el, Win Rate, Profit Factor
- Sharpe, Sortino, Drawdown Analysis  
- Pattern Performance Attribution
- Automation Efficiency Metrics
- Risk-Adjusted Returns Analysis

INTEGRATION FOCUS :
- Real-time performance tracking
- Automated pattern detection
- Self-improving algorithms
- Alert system int√©gr√©
- Reporting professionnel
"""

import logging
from pathlib import Path
from typing import Dict, List, Optional, Any

# === CORE IMPORTS ===
from .trade_logger import TradeLogger
from .performance_analyzer import PerformanceAnalyzer  
from .adaptive_optimizer import AdaptiveOptimizer
from .automation_metrics import AutomationMetrics

# === CONFIGURATION ===
logger = logging.getLogger(__name__)

# Module version
__version__ = "3.2.1"
__author__ = "MIA_IA_SYSTEM"
__email__ = "performance@mia-ia.com"

# === EXPORTS PUBLICS ===
__all__ = [
    # Core Classes
    'TradeLogger',
    'PerformanceAnalyzer', 
    'AdaptiveOptimizer',
    'AutomationMetrics',
    
    # Factory Functions
    'create_performance_suite',
    'get_performance_config',
    'initialize_performance_tracking',
    
    # Utilities
    'validate_performance_setup',
    'get_module_info'
]

# === CONFIGURATION MODULE ===

def get_performance_config() -> Dict[str, Any]:
    """
    Configuration standard du module performance
    
    Returns:
        Dict: Configuration compl√®te performance
    """
    return {
        'version': __version__,
        'logging_level': 'INFO',
        'data_paths': {
            'base': Path('data/performance'),
            'logs': Path('data/performance/logs'),
            'analysis': Path('data/performance/analysis'),
            'reports': Path('data/performance/reports'),
            'automation': Path('data/performance/automation')
        },
        'tracking_config': {
            'real_time_enabled': True,
            'batch_size': 100,
            'update_frequency_seconds': 30,
            'retention_days': 365
        },
        'analysis_config': {
            'min_trades_for_analysis': 10,
            'confidence_level': 0.95,
            'lookback_days': 30,
            'pattern_detection_enabled': True
        },
        'optimization_config': {
            'auto_adapt_enabled': True,
            'adaptation_frequency_hours': 24,
            'min_improvement_threshold': 0.02,
            'max_parameter_change': 0.1
        },
        'alerts_config': {
            'enabled': True,
            'drawdown_threshold': 0.05,
            'win_rate_threshold': 0.4,
            'daily_loss_threshold': 0.03
        }
    }

def create_performance_suite(config: Optional[Dict] = None) -> Dict[str, Any]:
    """
    Factory function - Cr√©e suite compl√®te performance
    
    Args:
        config: Configuration optionnelle
        
    Returns:
        Dict: Suite compl√®te initialis√©e
    """
    if config is None:
        config = get_performance_config()
    
    try:
        # Cr√©ation des chemins n√©cessaires
        for path in config['data_paths'].values():
            Path(path).mkdir(parents=True, exist_ok=True)
        
        # Initialisation des composants
        trade_logger = TradeLogger(config)
        performance_analyzer = PerformanceAnalyzer(config)
        adaptive_optimizer = AdaptiveOptimizer(config)
        automation_metrics = AutomationMetrics(config)
        
        suite = {
            'trade_logger': trade_logger,
            'performance_analyzer': performance_analyzer,
            'adaptive_optimizer': adaptive_optimizer,
            'automation_metrics': automation_metrics,
            'config': config,
            'status': 'initialized',
            'created_at': Path(__file__).stat().st_mtime
        }
        
        logger.info(f"Performance suite cr√©√©e avec succ√®s - Version {__version__}")
        return suite
        
    except Exception as e:
        logger.error(f"Erreur cr√©ation performance suite: {e}")
        raise

def initialize_performance_tracking(
    enable_real_time: bool = True,
    enable_automation: bool = True,
    custom_config: Optional[Dict] = None
) -> bool:
    """
    Initialisation rapide du tracking performance
    
    Args:
        enable_real_time: Activer tracking temps r√©el
        enable_automation: Activer m√©triques automation
        custom_config: Configuration personnalis√©e
        
    Returns:
        bool: Succ√®s de l'initialisation
    """
    try:
        config = custom_config or get_performance_config()
        
        # Override avec param√®tres
        config['tracking_config']['real_time_enabled'] = enable_real_time
        config['optimization_config']['auto_adapt_enabled'] = enable_automation
        
        # Cr√©ation suite
        suite = create_performance_suite(config)
        
        # Validation setup
        is_valid = validate_performance_setup(suite)
        
        if is_valid:
            logger.info("Performance tracking initialis√© avec succ√®s")
            return True
        else:
            logger.warning("Validation setup √©chou√©e")
            return False
            
    except Exception as e:
        logger.error(f"Erreur initialisation performance tracking: {e}")
        return False

def validate_performance_setup(suite: Dict[str, Any]) -> bool:
    """
    Validation compl√®te du setup performance
    
    Args:
        suite: Suite performance √† valider
        
    Returns:
        bool: Setup valide
    """
    try:
        required_components = [
            'trade_logger', 'performance_analyzer', 
            'adaptive_optimizer', 'automation_metrics'
        ]
        
        # V√©rification composants
        for component in required_components:
            if component not in suite:
                logger.error(f"Composant manquant: {component}")
                return False
        
        # V√©rification paths
        config = suite.get('config', {})
        for path_name, path in config.get('data_paths', {}).items():
            if not Path(path).exists():
                logger.warning(f"Path manquant: {path_name} -> {path}")
                Path(path).mkdir(parents=True, exist_ok=True)
        
        # Test fonctionnel basique
        try:
            suite['trade_logger'].get_status()
            suite['performance_analyzer'].get_status() 
            suite['adaptive_optimizer'].get_status()
            suite['automation_metrics'].get_status()
        except AttributeError:
            logger.warning("Certaines m√©thodes get_status() non impl√©ment√©es")
        
        logger.info("Validation performance setup: OK")
        return True
        
    except Exception as e:
        logger.error(f"Erreur validation setup: {e}")
        return False

def get_module_info() -> Dict[str, Any]:
    """
    Informations sur le module performance
    
    Returns:
        Dict: Infos module
    """
    return {
        'name': 'performance',
        'version': __version__,
        'author': __author__,
        'components': len(__all__),
        'description': 'Module analyse performance & automation MIA_IA_SYSTEM',
        'capabilities': [
            'Real-time trade logging',
            'Advanced performance analysis', 
            'Adaptive optimization',
            'Automation metrics tracking',
            'Professional reporting',
            'Alert system integration'
        ],
        'dependencies': [
            'pandas', 'numpy', 'scipy',
            'matplotlib', 'plotly', 'seaborn'
        ]
    }

# === MODULE INITIALIZATION ===

# Configuration par d√©faut au chargement
_default_config = get_performance_config()

# Log de chargement module
logger.info(f"Module Performance {__version__} charg√© - Automation Focus")
logger.info(f"Composants disponibles: {', '.join(__all__[:4])}")

# Validation de l'environnement
try:
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    logger.info("D√©pendances critiques disponibles")
except ImportError as e:
    logger.warning(f"D√©pendance manquante: {e}")

# === END MODULE ===