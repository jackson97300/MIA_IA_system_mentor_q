#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Test Connexion Simulation
Test de connexion en mode simulation TWS
"""

import os
import sys
import time
import socket
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_connexion_simulation():
    """Test de connexion en mode simulation"""
    
    print("üîÑ MIA_IA_SYSTEM - TEST CONNEXION SIMULATION")
    print("=" * 60)
    print("üîç Test de connexion mode simulation TWS")
    print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')}")
    print("üéØ Port: 7497 (Simulation)")
    print("=" * 60)
    
    # 1. V√âRIFICATION PORT SIMULATION
    print("\nüîå V√©rification port simulation (7497)...")
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('127.0.0.1', 7497))
        sock.close()
        
        if result == 0:
            print("   ‚úÖ Port 7497 ouvert (Simulation)")
            port_ok = True
        else:
            print("   ‚ùå Port 7497 ferm√©")
            port_ok = False
    except Exception as e:
        print(f"   ‚ùå Erreur port: {str(e)}")
        port_ok = False
    
    # 2. TEST CONNEXION IBKR SIMULATION
    print("\nüåê Test connexion IBKR simulation...")
    try:
        from config.mia_ia_system_tws_paper_fixed import MIA_IA_SYSTEM_GATEWAY_CONFIG
        from core.ibkr_connector import IBKRConnector
        
        print("   üîß Configuration simulation charg√©e")
        ib_config = MIA_IA_SYSTEM_GATEWAY_CONFIG['ibkr']
        print(f"   üìç Host: {ib_config.get('host', 'N/A')}")
        print(f"   üîå Port: {ib_config.get('port', 'N/A')}")
        print(f"   üÜî Client ID: {ib_config.get('client_id', 'N/A')}")
        
        connector = IBKRConnector(ib_config)
        
        # Test de connexion
        print("   üîå Tentative de connexion...")
        if connector.connect():
            print("   ‚úÖ Connexion simulation r√©ussie")
            connexion_ok = True
            
            # Test de donn√©es simul√©es
            print("   üìä Test donn√©es simul√©es...")
            try:
                # Test ES simul√©
                es_data = connector.get_market_data('ES', 'ESU25')
                if es_data:
                    print(f"   ‚úÖ ES simul√© - Prix: {es_data.get('last', 'N/A')}")
                else:
                    print("   ‚ö†Ô∏è ES simul√© - Donn√©es non disponibles")
                
                # Test SPX simul√©
                spx_data = connector.get_market_data('SPX', 'SPX')
                if spx_data:
                    print(f"   ‚úÖ SPX simul√© - Prix: {spx_data.get('last', 'N/A')}")
                else:
                    print("   ‚ö†Ô∏è SPX simul√© - Donn√©es non disponibles")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur donn√©es simul√©es: {str(e)}")
                
        else:
            print("   ‚ùå √âchec connexion simulation")
            connexion_ok = False
            
    except ImportError as e:
        print(f"   ‚ùå Erreur import: {str(e)}")
        connexion_ok = False
    except Exception as e:
        print(f"   ‚ùå Erreur connexion: {str(e)}")
        connexion_ok = False
    
    # 3. TEST SYST√àME MIA
    print("\nü§ñ Test syst√®me MIA...")
    try:
        # V√©rifier les modules critiques
        modules_critiques = [
            'core.battle_navale',
            'core.ibkr_connector',
            'features.confluence_analyzer',
            'strategies.signal_generator'
        ]
        
        modules_ok = 0
        for module in modules_critiques:
            try:
                __import__(module)
                print(f"   ‚úÖ {module}")
                modules_ok += 1
            except ImportError as e:
                print(f"   ‚ùå {module} - {str(e)}")
        
        systeme_ok = modules_ok == len(modules_critiques)
        
    except Exception as e:
        print(f"   ‚ùå Erreur syst√®me: {str(e)}")
        systeme_ok = False
    
    # 4. √âVALUATION GLOBALE
    print("\nüìä √âVALUATION GLOBALE SIMULATION")
    print("=" * 50)
    
    tests_reussis = sum([port_ok, connexion_ok, systeme_ok])
    total_tests = 3
    
    print(f"‚úÖ Tests r√©ussis: {tests_reussis}/{total_tests}")
    print(f"üìà Taux de r√©ussite: {(tests_reussis/total_tests)*100:.1f}%")
    
    if tests_reussis == 3:
        print("\nüü¢ EXCELLENT - Simulation fonctionnelle")
        print("   ‚Ä¢ Port simulation ouvert")
        print("   ‚Ä¢ Connexion IBKR OK")
        print("   ‚Ä¢ Syst√®me MIA op√©rationnel")
        print("   ‚Ä¢ Pr√™t pour trading simulation")
    elif tests_reussis == 2:
        print("\nüü° BON - Simulation partiellement fonctionnelle")
        print("   ‚Ä¢ La plupart des √©l√©ments OK")
        print("   ‚Ä¢ Quelques ajustements n√©cessaires")
        print("   ‚Ä¢ Syst√®me utilisable en simulation")
    elif tests_reussis == 1:
        print("\nüü† MOYEN - Simulation avec probl√®mes")
        print("   ‚Ä¢ Quelques √©l√©ments fonctionnels")
        print("   ‚Ä¢ Actions correctives n√©cessaires")
        print("   ‚Ä¢ Syst√®me partiellement utilisable")
    else:
        print("\nüî¥ CRITIQUE - Simulation non fonctionnelle")
        print("   ‚Ä¢ Aucun √©l√©ment fonctionnel")
        print("   ‚Ä¢ Actions correctives urgentes")
        print("   ‚Ä¢ Syst√®me non utilisable")
    
    # RECOMMANDATIONS
    print("\nüöÄ RECOMMANDATIONS")
    print("=" * 50)
    
    if not port_ok:
        print("üîå Port simulation ferm√©:")
        print("   ‚Ä¢ V√©rifier que TWS simulation est d√©marr√©")
        print("   ‚Ä¢ V√©rifier le port 7497")
        print("   ‚Ä¢ Red√©marrer TWS simulation si n√©cessaire")
    
    if not connexion_ok:
        print("üåê Connexion simulation √©chou√©e:")
        print("   ‚Ä¢ V√©rifier les param√®tres de connexion")
        print("   ‚Ä¢ V√©rifier le Client ID")
        print("   ‚Ä¢ V√©rifier la configuration simulation")
    
    if not systeme_ok:
        print("ü§ñ Syst√®me MIA d√©faillant:")
        print("   ‚Ä¢ V√©rifier les modules Python")
        print("   ‚Ä¢ V√©rifier les d√©pendances")
        print("   ‚Ä¢ Red√©marrer le syst√®me MIA")
    
    # PLAN D'ACTION
    print("\nüìã PLAN D'ACTION")
    print("=" * 50)
    
    if tests_reussis == 3:
        print("‚úÖ Simulation pr√™te - Aucune action requise")
        print("   ‚Ä¢ Vous pouvez lancer le syst√®me MIA en simulation")
        print("   ‚Ä¢ Ex√©cuter: python lance_mia_ia_tws.py")
    elif tests_reussis >= 2:
        print("‚è≥ Simulation presque pr√™te")
        print("   ‚Ä¢ Corriger les probl√®mes mineurs")
        print("   ‚Ä¢ Relancer ce test")
        print("   ‚Ä¢ Puis lancer le syst√®me MIA")
    else:
        print("üîÑ Simulation n√©cessite corrections")
        print("   ‚Ä¢ Corriger les probl√®mes identifi√©s")
        print("   ‚Ä¢ Red√©marrer TWS simulation si n√©cessaire")
        print("   ‚Ä¢ Relancer ce test")
        print("   ‚Ä¢ Puis lancer le syst√®me MIA")

if __name__ == "__main__":
    test_connexion_simulation()
