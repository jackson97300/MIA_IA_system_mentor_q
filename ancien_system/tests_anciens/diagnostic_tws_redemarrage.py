#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Diagnostic TWS Red√©marrage
Diagnostic complet apr√®s red√©marrage de TWS
"""

import os
import sys
import subprocess
import time
import asyncio
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def verifier_processus_tws():
    """V√©rifier si TWS est en cours d'ex√©cution"""
    print("1. V√âRIFICATION PROCESSUS TWS")
    print("-" * 30)
    
    try:
        # V√©rifier processus TWS
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq TWS.exe'], 
                              capture_output=True, text=True, shell=True)
        
        if 'TWS.exe' in result.stdout:
            print("‚úÖ TWS.exe d√©tect√© dans les processus")
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if 'TWS.exe' in line:
                    print(f"   {line.strip()}")
        else:
            print("‚ùå TWS.exe non d√©tect√©")
            return False
            
        # V√©rifier processus Gateway
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq ibgateway.exe'], 
                              capture_output=True, text=True, shell=True)
        
        if 'ibgateway.exe' in result.stdout:
            print("‚úÖ ibgateway.exe d√©tect√©")
        else:
            print("‚ö†Ô∏è ibgateway.exe non d√©tect√© (normal si TWS utilis√©)")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification processus: {e}")
        return False

def verifier_port_7497():
    """V√©rifier si le port 7497 est ouvert"""
    print("\n2. V√âRIFICATION PORT 7497")
    print("-" * 30)
    
    try:
        # V√©rifier port avec netstat
        result = subprocess.run(['netstat', '-an'], 
                              capture_output=True, text=True, shell=True)
        
        if '7497' in result.stdout:
            print("‚úÖ Port 7497 d√©tect√© dans netstat")
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if '7497' in line:
                    print(f"   {line.strip()}")
        else:
            print("‚ùå Port 7497 non d√©tect√©")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification port: {e}")
        return False

def verifier_firewall():
    """V√©rifier les r√®gles firewall"""
    print("\n3. V√âRIFICATION FIREWALL")
    print("-" * 30)
    
    try:
        # V√©rifier r√®gles firewall pour TWS
        result = subprocess.run(['netsh', 'advfirewall', 'firewall', 'show', 'rule', 'name=all'], 
                              capture_output=True, text=True, shell=True)
        
        tws_rules = []
        for line in result.stdout.split('\n'):
            if 'TWS' in line.upper() or 'INTERACTIVE' in line.upper():
                tws_rules.append(line.strip())
        
        if tws_rules:
            print("‚úÖ R√®gles firewall TWS d√©tect√©es:")
            for rule in tws_rules[:5]:  # Afficher les 5 premi√®res
                print(f"   {rule}")
        else:
            print("‚ö†Ô∏è Aucune r√®gle firewall TWS d√©tect√©e")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification firewall: {e}")
        return False

async def test_connexion_directe():
    """Test connexion directe avec ib_insync"""
    print("\n4. TEST CONNEXION DIRECTE IB_INSYNC")
    print("-" * 30)
    
    try:
        from ib_insync import IB
        
        # Test avec timeout court
        ib = IB()
        
        print("   Tentative connexion 127.0.0.1:7497 (timeout 10s)...")
        
        try:
            await asyncio.wait_for(
                ib.connectAsync('127.0.0.1', 7497, clientId=1),
                timeout=10.0
            )
            
            if ib.isConnected():
                print("‚úÖ Connexion r√©ussie!")
                print(f"   Status: {ib.connectionStatus()}")
                ib.disconnect()
                return True
            else:
                print("‚ùå Connexion √©chou√©e")
                return False
                
        except asyncio.TimeoutError:
            print("‚ùå Timeout connexion (10s)")
            return False
        except Exception as e:
            print(f"‚ùå Erreur connexion: {e}")
            return False
            
    except ImportError:
        print("‚ùå ib_insync non disponible")
        return False
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")
        return False

def verifier_configuration_tws():
    """V√©rifier la configuration TWS"""
    print("\n5. V√âRIFICATION CONFIGURATION TWS")
    print("-" * 30)
    
    print("üîß V√âRIFICATIONS MANUELLES REQUISES:")
    print("1. TWS est-il compl√®tement d√©marr√©? (pas en cours de chargement)")
    print("2. Configuration > API > Settings:")
    print("   - Enable ActiveX and Socket Clients: ‚úÖ")
    print("   - Socket port: 7497")
    print("   - Allow connections from localhost: ‚úÖ")
    print("   - Read-Only API: ‚ùå (d√©sactiv√©)")
    print("3. Configuration > API > Precautions:")
    print("   - Bypass Order Precautions for API Orders: ‚úÖ")
    print("4. TWS est-il connect√© aux march√©s?")
    print("   - Status: Connected")
    print("   - Market data: Active")
    
    return True

def recommander_solutions():
    """Recommander des solutions"""
    print("\n6. RECOMMANDATIONS")
    print("-" * 30)
    
    print("üîß SOLUTIONS √Ä ESSAYER:")
    print("1. Attendre 2-3 minutes que TWS soit compl√®tement d√©marr√©")
    print("2. V√©rifier configuration API dans TWS")
    print("3. Red√©marrer TWS en mode 'Paper Trading'")
    print("4. V√©rifier que TWS est connect√© aux march√©s")
    print("5. Tester avec un client ID diff√©rent")
    print("6. V√©rifier les logs TWS pour erreurs")
    
    print("\nüìã COMMANDES DE TEST:")
    print("python test_connexion_ibkr_simple.py")
    print("python diagnostic_connexion_ibkr.py")

async def main():
    """Fonction principale"""
    print("MIA_IA_SYSTEM - DIAGNOSTIC TWS RED√âMARRAGE")
    print("=" * 60)
    print(f"Diagnostic: {datetime.now()}")
    print("=" * 60)
    
    # V√©rifications
    tws_ok = verifier_processus_tws()
    port_ok = verifier_port_7497()
    firewall_ok = verifier_firewall()
    connexion_ok = await test_connexion_directe()
    config_ok = verifier_configuration_tws()
    
    # R√©sultats
    print("\n" + "=" * 60)
    print("R√âSULTATS DIAGNOSTIC")
    print("=" * 60)
    
    print(f"Processus TWS: {'‚úÖ' if tws_ok else '‚ùå'}")
    print(f"Port 7497: {'‚úÖ' if port_ok else '‚ùå'}")
    print(f"Firewall: {'‚úÖ' if firewall_ok else '‚ö†Ô∏è'}")
    print(f"Connexion directe: {'‚úÖ' if connexion_ok else '‚ùå'}")
    print(f"Configuration: {'‚úÖ' if config_ok else '‚ö†Ô∏è'}")
    
    if connexion_ok:
        print("\nüéâ SUCC√àS: TWS fonctionnel!")
        print("‚úÖ Syst√®me pr√™t pour test")
    else:
        print("\n‚ùå PROBL√àME: Connexion IBKR √©choue")
        print("üîß V√©rifications requises")
        
    recommander_solutions()
    
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())

