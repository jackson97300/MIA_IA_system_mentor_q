#!/usr/bin/env python3
"""
Test du statut d'int√©gration MenthorQ dans le syst√®me MIA_IA
"""

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ".")))

from features.data_reader import get_menthorq_market_data
from features.menthorq_dealers_bias import create_menthorq_dealers_bias_analyzer
from features.confluence_analyzer import ConfluenceAnalyzer
from features.confluence_integrator import ConfluenceIntegrator

def test_menthorq_data_availability():
    """Test de la disponibilit√© des donn√©es MenthorQ"""
    print("üß™ Test de disponibilit√© des donn√©es MenthorQ...")
    
    try:
        # Test r√©cup√©ration donn√©es MenthorQ
        menthorq_data = get_menthorq_market_data("ES")
        print(f"‚úÖ Donn√©es MenthorQ r√©cup√©r√©es: {len(menthorq_data.get('menthorq_levels', {}))} niveaux")
        
        if menthorq_data.get('menthorq_levels'):
            print("üìä Niveaux MenthorQ disponibles:")
            for level_name, price in list(menthorq_data['menthorq_levels'].items())[:5]:
                print(f"   - {level_name}: {price}")
        else:
            print("‚ö†Ô∏è Aucun niveau MenthorQ trouv√©")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration donn√©es MenthorQ: {e}")
        return False

def test_menthorq_dealers_bias():
    """Test du Dealer's Bias MenthorQ"""
    print("\nüß™ Test Dealer's Bias MenthorQ...")
    
    try:
        # Cr√©er l'analyseur
        bias_analyzer = create_menthorq_dealers_bias_analyzer()
        if not bias_analyzer:
            print("‚ùå Impossible de cr√©er MenthorQDealersBiasAnalyzer")
            return False
        
        print("‚úÖ MenthorQDealersBiasAnalyzer cr√©√©")
        
        # Test calcul bias
        current_price = 5294.0
        bias = bias_analyzer.calculate_menthorq_dealers_bias(current_price, "ESZ5", 18.5)
        
        if bias:
            print(f"‚úÖ Dealer's Bias calcul√©: {bias.direction} {bias.strength}")
            print(f"üìä Score: {bias.bias_score:.3f}")
            print(f"üí∞ Prix: {bias.underlying_price}")
        else:
            print("‚ö†Ô∏è Aucun Dealer's Bias calcul√©")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur Dealer's Bias MenthorQ: {e}")
        return False

def test_confluence_integration():
    """Test de l'int√©gration MenthorQ dans le syst√®me de confluence"""
    print("\nüß™ Test int√©gration MenthorQ dans confluence...")
    
    try:
        # Test ConfluenceAnalyzer
        confluence_analyzer = ConfluenceAnalyzer()
        print("‚úÖ ConfluenceAnalyzer cr√©√©")
        
        # V√©rifier si MenthorQ est utilis√©
        analyzer_methods = [method for method in dir(confluence_analyzer) if not method.startswith('_')]
        menthorq_methods = [method for method in analyzer_methods if 'menthorq' in method.lower()]
        
        if menthorq_methods:
            print(f"‚úÖ M√©thodes MenthorQ trouv√©es: {menthorq_methods}")
        else:
            print("‚ö†Ô∏è Aucune m√©thode MenthorQ dans ConfluenceAnalyzer")
        
        # Test ConfluenceIntegrator
        integrator = ConfluenceIntegrator()
        print("‚úÖ ConfluenceIntegrator cr√©√©")
        
        integrator_methods = [method for method in dir(integrator) if not method.startswith('_')]
        menthorq_integrator_methods = [method for method in integrator_methods if 'menthorq' in method.lower()]
        
        if menthorq_integrator_methods:
            print(f"‚úÖ M√©thodes MenthorQ trouv√©es: {menthorq_integrator_methods}")
        else:
            print("‚ö†Ô∏è Aucune m√©thode MenthorQ dans ConfluenceIntegrator")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test int√©gration confluence: {e}")
        return False

def main():
    """Test principal"""
    print("üöÄ Test du statut d'int√©gration MenthorQ dans MIA_IA_SYSTEM")
    print("=" * 60)
    
    # Tests
    data_ok = test_menthorq_data_availability()
    bias_ok = test_menthorq_dealers_bias()
    integration_ok = test_confluence_integration()
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DU STATUT MENTHORQ:")
    print(f"   üìä Donn√©es MenthorQ: {'‚úÖ OK' if data_ok else '‚ùå KO'}")
    print(f"   üéØ Dealer's Bias: {'‚úÖ OK' if bias_ok else '‚ùå KO'}")
    print(f"   üîó Int√©gration confluence: {'‚úÖ OK' if integration_ok else '‚ùå KO'}")
    
    if data_ok and bias_ok and not integration_ok:
        print("\n‚ö†Ô∏è CONCLUSION: MenthorQ est disponible mais PAS int√©gr√© dans le syst√®me de confluence!")
        print("   ‚Üí Il faut int√©grer MenthorQ dans ConfluenceAnalyzer et ConfluenceIntegrator")
    elif data_ok and bias_ok and integration_ok:
        print("\n‚úÖ CONCLUSION: MenthorQ est compl√®tement int√©gr√©!")
    else:
        print("\n‚ùå CONCLUSION: Probl√®mes avec MenthorQ - v√©rification n√©cessaire")

if __name__ == "__main__":
    main()


