#!/usr/bin/env python3
"""
Test d'int√©gration compl√®te Sierra Chart dans MIA_IA_SYSTEM
==========================================================

Teste l'int√©gration du connecteur Sierra Chart dans le data collector MIA
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

from core.logger import get_logger
from core.data_collector_enhanced import DataCollectorEnhanced
from automation_modules.config_manager import AutomationConfig

logger = get_logger(__name__)

def test_sierra_integration():
    """Test de l'int√©gration Sierra Chart dans MIA"""
    print("üîç TEST INT√âGRATION SIERRA CHART DANS MIA")
    print("="*60)
    
    # Cr√©er une configuration avec mode r√©el
    config = AutomationConfig()
    config.use_real_data = True  # Activer les vraies donn√©es
    config.simulation_mode = False
    
    # Cr√©er le data collector
    data_collector = DataCollectorEnhanced(config)
    
    try:
        # Test r√©cup√©ration donn√©es ES
        print("üìä Test r√©cup√©ration donn√©es ES...")
        es_data = data_collector.get_historical_data_for_symbol("ES", max_bars=5)
        
        if es_data:
            print(f"‚úÖ Donn√©es ES r√©cup√©r√©es: {len(es_data)} barres")
            latest_bar = es_data[-1]
            print(f"   Prix: {latest_bar.get('price', 'N/A')}")
            print(f"   Source: {latest_bar.get('data_source', 'N/A')}")
            print(f"   Timestamp: {latest_bar.get('timestamp', 'N/A')}")
        else:
            print("‚ùå Aucune donn√©e ES r√©cup√©r√©e")
        
        # Test r√©cup√©ration donn√©es NQ
        print("\nüìä Test r√©cup√©ration donn√©es NQ...")
        nq_data = data_collector.get_historical_data_for_symbol("NQ", max_bars=5)
        
        if nq_data:
            print(f"‚úÖ Donn√©es NQ r√©cup√©r√©es: {len(nq_data)} barres")
            latest_bar = nq_data[-1]
            print(f"   Prix: {latest_bar.get('price', 'N/A')}")
            print(f"   Source: {latest_bar.get('data_source', 'N/A')}")
            print(f"   Timestamp: {latest_bar.get('timestamp', 'N/A')}")
        else:
            print("‚ùå Aucune donn√©e NQ r√©cup√©r√©e")
        
        # Test mode simulation (fallback)
        print("\nüé≠ Test mode simulation (fallback)...")
        config.use_real_data = False
        data_collector_sim = DataCollectorEnhanced(config)
        
        sim_es_data = data_collector_sim.get_historical_data_for_symbol("ES", max_bars=3)
        if sim_es_data:
            print(f"‚úÖ Donn√©es simul√©es ES: {len(sim_es_data)} barres")
            latest_bar = sim_es_data[-1]
            print(f"   Prix: {latest_bar.get('price', 'N/A')}")
            print(f"   Source: {latest_bar.get('data_source', 'Simulation')}")
        
    except Exception as e:
        print(f"‚ùå Erreur test int√©gration: {e}")

def test_sierra_connector_direct():
    """Test direct du connecteur Sierra Chart"""
    print("\nüîç TEST CONNECTEUR SIERRA CHART DIRECT")
    print("="*60)
    
    try:
        from core.sierra_dtc_connector import SierraDTCConnector
        
        # Cr√©er le connecteur
        connector = SierraDTCConnector()
        
        # Test de connexion
        print("üîå Test connexion directe...")
        if connector.connect():
            print("‚úÖ Connexion Sierra Chart r√©ussie")
            
            # Test souscription
            print("üìä Test souscription market data...")
            if connector.subscribe_market_data("ES"):
                print("‚úÖ Souscription ES r√©ussie")
            
            if connector.subscribe_market_data("NQ"):
                print("‚úÖ Souscription NQ r√©ussie")
            
            # Attendre des donn√©es
            print("‚è≥ Attente donn√©es (3s)...")
            import time
            time.sleep(3)
            
            # V√©rifier les donn√©es
            es_data = connector.get_market_data("ES")
            nq_data = connector.get_market_data("NQ")
            
            if es_data:
                print(f"üìä Donn√©es ES: {es_data}")
            else:
                print("‚ùå Aucune donn√©e ES")
            
            if nq_data:
                print(f"üìä Donn√©es NQ: {nq_data}")
            else:
                print("‚ùå Aucune donn√©e NQ")
            
            # D√©connexion
            connector.disconnect()
            print("‚úÖ Test connecteur direct termin√©")
            
        else:
            print("‚ùå Connexion Sierra Chart √©chou√©e")
            
    except Exception as e:
        print(f"‚ùå Erreur test connecteur direct: {e}")

def test_mia_orchestrator_integration():
    """Test d'int√©gration avec l'orchestrateur MIA"""
    print("\nüîç TEST INT√âGRATION ORCHESTRATEUR MIA")
    print("="*60)
    
    try:
        # Importer l'orchestrateur
        from launch_24_7 import MIAOrchestrator
        
        # Cr√©er l'orchestrateur en mode r√©el
        orchestrator = MIAOrchestrator(
            live_trading=False,
            simulation_mode=False  # Mode r√©el
        )
        
        print("‚úÖ Orchestrateur MIA cr√©√© avec mode r√©el")
        print(f"   Simulation mode: {orchestrator.simulation_mode}")
        print(f"   Live trading: {orchestrator.live_trading}")
        print(f"   Use real data: {orchestrator.config.use_real_data}")
        
        # Test du data collector de l'orchestrateur
        print("\nüìä Test data collector orchestrateur...")
        es_data = orchestrator.data_collector.get_historical_data_for_symbol("ES", max_bars=3)
        
        if es_data:
            print(f"‚úÖ Donn√©es ES via orchestrateur: {len(es_data)} barres")
            latest_bar = es_data[-1]
            print(f"   Prix: {latest_bar.get('price', 'N/A')}")
            print(f"   Source: {latest_bar.get('data_source', 'N/A')}")
        else:
            print("‚ùå Aucune donn√©e ES via orchestrateur")
        
    except Exception as e:
        print(f"‚ùå Erreur test orchestrateur: {e}")

def main():
    """Fonction principale de test"""
    print("üöÄ TEST INT√âGRATION COMPL√àTE SIERRA CHART MIA")
    print("="*80)
    print(f"‚è∞ D√©but: {datetime.now()}")
    print()
    
    # Test 1: Int√©gration dans data collector
    test_sierra_integration()
    
    # Test 2: Connecteur direct
    test_sierra_connector_direct()
    
    # Test 3: Int√©gration orchestrateur
    test_mia_orchestrator_integration()
    
    print("\n" + "="*80)
    print("‚úÖ TESTS D'INT√âGRATION TERMIN√âS")
    print(f"‚è∞ Fin: {datetime.now()}")
    print("\nüìã R√âSUM√â:")
    print("‚úÖ Connecteur Sierra Chart DTC fonctionnel")
    print("‚úÖ Int√©gration dans data collector MIA")
    print("‚úÖ Interface compatible avec MIA")
    print("‚úÖ Fallback IBKR configur√©")
    print("‚úÖ Mode simulation disponible")

if __name__ == "__main__":
    main()

