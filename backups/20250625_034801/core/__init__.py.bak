"""
MIA_IA_SYSTEM - Core Package
Exports corrig√©s avec gestion des imports circulaires
Version: Production Ready

Ce module g√®re l'export de tous les types core avec protection
contre les imports circulaires, notamment pour StructureData.
"""

import logging

logger = logging.getLogger(__name__)

# === IMPORTS NIVEAU 0 (aucune d√©pendance locale) ===

# Import base types first (no local dependencies)
from .base_types import (
    # Core data structures
    MarketData,
    OrderFlowData,
    TradingFeatures,
    TradingSignal,
    TradeResult,
    
    # Enums
    MarketRegime,
    SignalType,
    PatternType,
    SignalStrength,
    SessionPhase,
    TradingDecision,
    MarketState,
    SystemState,
    
    # Metrics
    SystemMetrics,
    PerformanceReport,
    
    # Exceptions
    ConfigError,
    
    # Constants
    ES_TICK_SIZE,
    ES_TICK_VALUE,
    MES_TICK_VALUE,
    TRADING_HOURS,
    DEFAULT_RISK_PARAMS,
    PERFORMANCE_TARGETS,
    
    # Utility functions
    get_session_phase,
    validate_market_data,
    calculate_performance_metrics
)

# === IMPORTS NIVEAU 1 (d√©pendent de base_types) ===

# Structure Data - Import conditionnel pour √©viter circularit√©
try:
    from .structure_data import (
        # Classe principale
        StructureData,
        
        # Structures de donn√©es
        Level,
        VWAPBands,
        MarketProfile,
        GammaLevels,
        
        # Enums
        LevelType,
        Timeframe,
        LevelQuality,
        
        # Factory functions
        create_structure_data,
        create_from_market_profile,
        
        # Test function
        test_structure_data
    )
    STRUCTURE_DATA_AVAILABLE = True
except ImportError as e:
    logger.warning(f"StructureData non disponible: {e}")
    # D√©finir des placeholders pour √©viter les erreurs
    StructureData = None
    Level = None
    VWAPBands = None
    MarketProfile = None
    GammaLevels = None
    LevelType = None
    Timeframe = None
    LevelQuality = None
    create_structure_data = None
    create_from_market_profile = None
    test_structure_data = None
    STRUCTURE_DATA_AVAILABLE = False

# Battle Navale - Import des classes r√©elles
try:
    from .battle_navale import (
        # Classe principale
        BattleNavaleAnalyzer,
        
        # R√©sultats et structures
        BattleNavaleResult,
        Base,
        SierraPattern,
        
        # Enums
        BattleStatus,
        BaseQuality,
        TrendContinuation,
        
        # Factory functions
        create_battle_navale_analyzer,
        analyze_battle_navale_patterns,
        
        # Test function
        test_battle_navale_analyzer
    )
    BATTLE_NAVALE_AVAILABLE = True
except ImportError as e:
    logger.warning(f"BattleNavale non disponible: {e}")
    BATTLE_NAVALE_AVAILABLE = False

# Patterns Detector
try:
    from .patterns_detector import (
        # Classe principale
        PatternsDetector,
        
        # Structures patterns
        PatternDetectionResult,
        ElitePattern,
        
        # Enums patterns
        ElitePatternType,
        PatternConfidence,
        
        # Factory functions
        create_patterns_detector,
        detect_elite_patterns,
        
        # Test function
        test_patterns_detector
    )
    PATTERNS_AVAILABLE = True
except ImportError as e:
    logger.warning(f"PatternsDetector non disponible: {e}")
    PATTERNS_AVAILABLE = False

# IBKR Connector
try:
    from .ibkr_connector import (
        IBKRConnector,
        create_ibkr_connector,
        test_ibkr_connector
    )
    IBKR_AVAILABLE = True
except ImportError as e:
    logger.warning(f"IBKRConnector non disponible: {e}")
    IBKR_AVAILABLE = False

# Sierra Connector
try:
    from .sierra_connector import (
        SierraConnector,
        create_sierra_connector,
        test_sierra_connector
    )
    SIERRA_AVAILABLE = True
except ImportError as e:
    logger.warning(f"SierraConnector non disponible: {e}")
    SIERRA_AVAILABLE = False

# === VERSION INFO ===

__version__ = "3.0.0"
__author__ = "MIA Trading System"

# === HELPER FUNCTIONS ===

def check_core_availability() -> dict:
    """V√©rifie la disponibilit√© des composants core"""
    return {
        'base_types': True,  # Toujours disponible
        'structure_data': STRUCTURE_DATA_AVAILABLE,
        'battle_navale': BATTLE_NAVALE_AVAILABLE,
        'patterns_detector': PATTERNS_AVAILABLE,
        'ibkr_connector': IBKR_AVAILABLE,
        'sierra_connector': SIERRA_AVAILABLE
    }

def get_core_status() -> dict:
    """Retourne le statut complet du module core"""
    availability = check_core_availability()
    return {
        'version': __version__,
        'components_available': availability,
        'total_components': len(availability),
        'active_components': sum(availability.values()),
        'status': 'healthy' if sum(availability.values()) >= 4 else 'degraded'
    }

# === MAIN EXPORTS ===

__all__ = [
    # === BASE TYPES (toujours disponibles) ===
    'MarketData',
    'OrderFlowData', 
    'TradingFeatures',
    'TradingSignal',
    'TradeResult',
    'SystemMetrics',
    'PerformanceReport',
    
    # Enums
    'MarketRegime',
    'SignalType',
    'PatternType',
    'SignalStrength',
    'SessionPhase',
    'TradingDecision',
    'MarketState',
    'SystemState',
    
    # Exceptions
    'ConfigError',
    
    # Constants
    'ES_TICK_SIZE',
    'ES_TICK_VALUE',
    'MES_TICK_VALUE',
    'TRADING_HOURS',
    'DEFAULT_RISK_PARAMS',
    'PERFORMANCE_TARGETS',
    
    # Utility functions
    'get_session_phase',
    'validate_market_data',
    'calculate_performance_metrics',
    
    # === STRUCTURE DATA (si disponible) ===
    'StructureData',
    'Level',
    'VWAPBands',
    'MarketProfile',
    'GammaLevels',
    'LevelType',
    'Timeframe',
    'LevelQuality',
    'create_structure_data',
    'create_from_market_profile',
    'test_structure_data',
    'STRUCTURE_DATA_AVAILABLE',
    
    # === BATTLE NAVALE (si disponible) ===
    'BattleNavaleAnalyzer',
    'BattleNavaleResult',
    'Base',
    'SierraPattern',
    'BattleStatus',
    'BaseQuality',
    'TrendContinuation',
    'create_battle_navale_analyzer',
    'analyze_battle_navale_patterns',
    'test_battle_navale_analyzer',
    'BATTLE_NAVALE_AVAILABLE',
    
    # === PATTERNS (si disponible) ===
    'PatternsDetector',
    'PatternDetectionResult',
    'ElitePattern',
    'ElitePatternType',
    'PatternConfidence',
    'create_patterns_detector',
    'detect_elite_patterns',
    'test_patterns_detector',
    'PATTERNS_AVAILABLE',
    
    # === CONNECTORS (si disponibles) ===
    'IBKRConnector',
    'create_ibkr_connector',
    'test_ibkr_connector',
    'IBKR_AVAILABLE',
    'SierraConnector',
    'create_sierra_connector',
    'test_sierra_connector',
    'SIERRA_AVAILABLE',
    
    # === HELPER FUNCTIONS ===
    'check_core_availability',
    'get_core_status',
    
    # Version
    '__version__'
]

# === DIAGNOSTIC AU CHARGEMENT ===

if __name__ == "__main__":
    print("üîç DIAGNOSTIC CORE PACKAGE")
    print("=" * 50)
    
    status = get_core_status()
    availability = status['components_available']
    
    print(f"\nVersion: {status['version']}")
    print(f"Status: {status['status'].upper()}")
    print(f"\nComposants ({status['active_components']}/{status['total_components']}):")
    
    for component, available in availability.items():
        icon = "‚úÖ" if available else "‚ùå"
        print(f"  {icon} {component}")
    
    if not STRUCTURE_DATA_AVAILABLE:
        print("\n‚ö†Ô∏è  StructureData non disponible - V√©rifier imports circulaires")
    
    if status['status'] == 'degraded':
        print("\n‚ö†Ô∏è  Certains composants manquent - V√©rifier les imports")
    else:
        print("\n‚úÖ Core package op√©rationnel")