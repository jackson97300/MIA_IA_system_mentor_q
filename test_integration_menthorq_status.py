#!/usr/bin/env python3
"""
Test du statut d'int√©gration MenthorQ dans le syst√®me MIA_IA
"""

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ".")))

def test_menthorq_modules_availability():
    """Test de la disponibilit√© des modules MenthorQ"""
    print("üß™ Test de disponibilit√© des modules MenthorQ...")
    
    try:
        # Test import MenthorQ modules
        from features.menthorq_dealers_bias import create_menthorq_dealers_bias_analyzer
        from features.menthorq_processor import MenthorQProcessor
        from features.menthorq_integration import create_menthorq_integration
        print("‚úÖ Modules MenthorQ import√©s avec succ√®s")
        
        # Test cr√©ation des analyseurs
        bias_analyzer = create_menthorq_dealers_bias_analyzer()
        if bias_analyzer:
            print("‚úÖ MenthorQDealersBiasAnalyzer cr√©√©")
        else:
            print("‚ùå √âchec cr√©ation MenthorQDealersBiasAnalyzer")
            
        processor = MenthorQProcessor()
        print("‚úÖ MenthorQProcessor cr√©√©")
        
        integration = create_menthorq_integration()
        if integration:
            print("‚úÖ MenthorQIntegration cr√©√©")
        else:
            print("‚ùå √âchec cr√©ation MenthorQIntegration")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur import modules MenthorQ: {e}")
        return False

def test_confluence_integration():
    """Test de l'int√©gration dans les modules de confluence"""
    print("\nüß™ Test int√©gration dans modules confluence...")
    
    try:
        # Test ConfluenceAnalyzer
        from features.confluence_analyzer import ConfluenceAnalyzer
        analyzer = ConfluenceAnalyzer()
        print("‚úÖ ConfluenceAnalyzer cr√©√©")
        
        # V√©rifier les m√©thodes disponibles
        methods = [method for method in dir(analyzer) if not method.startswith('_')]
        print(f"üìã M√©thodes ConfluenceAnalyzer: {len(methods)}")
        
        # Chercher des m√©thodes li√©es √† MenthorQ
        menthorq_methods = [m for m in methods if 'menthorq' in m.lower() or 'gamma' in m.lower() or 'dealers' in m.lower()]
        if menthorq_methods:
            print(f"‚úÖ M√©thodes MenthorQ trouv√©es: {menthorq_methods}")
        else:
            print("‚ùå Aucune m√©thode MenthorQ dans ConfluenceAnalyzer")
        
        # Test ConfluenceIntegrator
        from features.confluence_integrator import ConfluenceIntegrator
        integrator = ConfluenceIntegrator()
        print("‚úÖ ConfluenceIntegrator cr√©√©")
        
        # V√©rifier les m√©thodes disponibles
        integrator_methods = [method for method in dir(integrator) if not method.startswith('_')]
        print(f"üìã M√©thodes ConfluenceIntegrator: {len(integrator_methods)}")
        
        # Chercher des m√©thodes li√©es √† MenthorQ
        menthorq_integrator_methods = [m for m in integrator_methods if 'menthorq' in m.lower() or 'gamma' in m.lower() or 'dealers' in m.lower()]
        if menthorq_integrator_methods:
            print(f"‚úÖ M√©thodes MenthorQ trouv√©es: {menthorq_integrator_methods}")
        else:
            print("‚ùå Aucune m√©thode MenthorQ dans ConfluenceIntegrator")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test int√©gration confluence: {e}")
        return False

def test_data_availability():
    """Test de la disponibilit√© des donn√©es MenthorQ"""
    print("\nüß™ Test disponibilit√© donn√©es MenthorQ...")
    
    try:
        from features.data_reader import get_menthorq_market_data
        
        # Test r√©cup√©ration donn√©es
        menthorq_data = get_menthorq_market_data("ES")
        print(f"‚úÖ Donn√©es MenthorQ r√©cup√©r√©es: {len(menthorq_data.get('menthorq_levels', {}))} niveaux")
        
        if menthorq_data.get('menthorq_levels'):
            print("üìä Niveaux MenthorQ disponibles:")
            for level_name, price in list(menthorq_data['menthorq_levels'].items())[:5]:
                print(f"   - {level_name}: {price}")
        else:
            print("‚ö†Ô∏è Aucun niveau MenthorQ trouv√©")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration donn√©es MenthorQ: {e}")
        return False

def test_dealers_bias_calculation():
    """Test du calcul Dealer's Bias MenthorQ"""
    print("\nüß™ Test calcul Dealer's Bias MenthorQ...")
    
    try:
        from features.menthorq_dealers_bias import create_menthorq_dealers_bias_analyzer
        
        # Cr√©er l'analyseur
        bias_analyzer = create_menthorq_dealers_bias_analyzer()
        if not bias_analyzer:
            print("‚ùå Impossible de cr√©er MenthorQDealersBiasAnalyzer")
            return False
        
        # Test calcul bias
        current_price = 5294.0
        bias = bias_analyzer.calculate_menthorq_dealers_bias(current_price, "ESZ5", 18.5)
        
        if bias:
            print(f"‚úÖ Dealer's Bias calcul√©: {bias.direction} {bias.strength}")
            print(f"üìä Score: {bias.bias_score:.3f}")
            print(f"üí∞ Prix: {bias.underlying_price}")
        else:
            print("‚ö†Ô∏è Aucun Dealer's Bias calcul√©")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur calcul Dealer's Bias MenthorQ: {e}")
        return False

def main():
    """Test principal"""
    print("üöÄ TEST DU STATUT D'INT√âGRATION MENTHORQ")
    print("=" * 60)
    
    # Tests
    modules_ok = test_menthorq_modules_availability()
    confluence_ok = test_confluence_integration()
    data_ok = test_data_availability()
    bias_ok = test_dealers_bias_calculation()
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DU STATUT MENTHORQ:")
    print(f"   üì¶ Modules MenthorQ: {'‚úÖ OK' if modules_ok else '‚ùå KO'}")
    print(f"   üîó Int√©gration confluence: {'‚úÖ OK' if confluence_ok else '‚ùå KO'}")
    print(f"   üìä Donn√©es MenthorQ: {'‚úÖ OK' if data_ok else '‚ùå KO'}")
    print(f"   üéØ Dealer's Bias: {'‚úÖ OK' if bias_ok else '‚ùå KO'}")
    
    if modules_ok and data_ok and bias_ok and not confluence_ok:
        print("\nüö® CONCLUSION CRITIQUE:")
        print("   ‚Ä¢ MenthorQ est FONCTIONNEL mais PAS INT√âGR√â dans le syst√®me de confluence!")
        print("   ‚Ä¢ Vous payez pour MenthorQ mais il n'influence PAS vos trades!")
        print("   ‚Ä¢ INT√âGRATION URGENTE N√âCESSAIRE!")
    elif modules_ok and data_ok and bias_ok and confluence_ok:
        print("\n‚úÖ CONCLUSION: MenthorQ est compl√®tement int√©gr√©!")
    else:
        print("\n‚ùå CONCLUSION: Probl√®mes avec MenthorQ - v√©rification n√©cessaire")

if __name__ == "__main__":
    main()


