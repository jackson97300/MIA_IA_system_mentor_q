#!/usr/bin/env python3
"""
Int√©gration IBKR Gateway avec le syst√®me MIA_IA
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.append(str(Path(__file__).parent.parent))

from core.ibkr_beta_connector import IBKRBetaConnector, IBKRBetaConfig
import logging

def setup_ibkr_integration():
    """Configurer l'int√©gration IBKR"""
    print("=== INT√âGRATION IBKR GATEWAY ===")
    
    # Configuration du logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Cr√©er la configuration IBKR
    config = IBKRBetaConfig()
    print(f"Configuration IBKR:")
    print(f"  Host: {config.host}")
    print(f"  Port: {config.port}")
    print(f"  Base URL: {config.base_url}")
    print()
    
    # Cr√©er le connecteur
    connector = IBKRBetaConnector(config)
    
    # Tester la connexion
    print("üîç Test de connexion au Gateway...")
    if connector.connect():
        print("‚úÖ Connexion au Gateway r√©ussie")
        
        # Tester l'authentification
        print("üîç V√©rification de l'authentification...")
        if connector.authenticate():
            print("‚úÖ Authentification r√©ussie")
            
            # Test des fonctionnalit√©s de base
            print("üîç Test des fonctionnalit√©s...")
            
            # Test des comptes
            try:
                accounts = connector.get_accounts()
                print(f"‚úÖ Comptes r√©cup√©r√©s: {len(accounts) if accounts else 0}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur r√©cup√©ration comptes: {e}")
            
            # Test des positions
            try:
                positions = connector.get_positions()
                print(f"‚úÖ Positions r√©cup√©r√©es: {len(positions) if positions else 0}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur r√©cup√©ration positions: {e}")
            
            # Test des donn√©es de march√©
            try:
                # Test avec un symbole populaire
                market_data = connector.get_market_data("AAPL")
                print(f"‚úÖ Donn√©es de march√© r√©cup√©r√©es pour AAPL")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur r√©cup√©ration donn√©es march√©: {e}")
            
        else:
            print("‚ùå Authentification √©chou√©e")
            print("üí° Assurez-vous d'√™tre connect√© sur https://localhost:5000")
    else:
        print("‚ùå Connexion au Gateway √©chou√©e")
        print("üí° V√©rifiez que le Gateway IBKR est d√©marr√©")
    
    return connector

def main():
    """Fonction principale"""
    try:
        connector = setup_ibkr_integration()
        
        print("\nüéâ Int√©gration IBKR configur√©e !")
        print("Vous pouvez maintenant utiliser le connecteur IBKR dans votre syst√®me MIA_IA")
        
        # Exemple d'utilisation
        print("\nüìã Exemple d'utilisation:")
        print("""
        # Dans votre code MIA_IA:
        from core.ibkr_beta_connector import IBKRBetaConnector
        
        # Cr√©er le connecteur
        connector = IBKRBetaConnector()
        
        # Se connecter
        if connector.connect() and connector.authenticate():
            # R√©cup√©rer les comptes
            accounts = connector.get_accounts()
            
            # R√©cup√©rer les positions
            positions = connector.get_positions()
            
            # R√©cup√©rer les donn√©es de march√©
            market_data = connector.get_market_data("ES")
        """)
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'int√©gration: {e}")
        logging.exception("Erreur d√©taill√©e:")

if __name__ == "__main__":
    main()













