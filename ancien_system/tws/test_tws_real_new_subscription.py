#!/usr/bin/env python3
"""
Test TWS Real avec Nouvelle Souscription - MIA_IA_SYSTEM
========================================================
Test TWS r√©el avec bundle complet.
"""

import time
from ib_insync import IB, Stock, Future

def test_tws_real_new_subscription():
    """Test TWS r√©el avec nouvelle souscription"""
    print("üöÄ TEST TWS R√âEL AVEC NOUVELLE SOUSCRIPTION")
    print("=" * 60)
    
    # Connexion TWS Real
    ib = IB()
    
    try:
        print("1Ô∏è‚É£ Connexion TWS Real...")
        ib.connect('127.0.0.1', 7496, clientId=9999)
        print("‚úÖ Connexion TWS Real OK")
        
        # 2. Test ES Futures
        print("\n2Ô∏è‚É£ Test ES Futures...")
        es_contract = Future('ES', '202412', 'CME')
        ib.qualifyContracts(es_contract)
        es_ticker = ib.reqMktData(es_contract)
        
        print("   ‚è≥ Attente donn√©es ES...")
        time.sleep(3)
        
        if es_ticker.marketPrice():
            print(f"‚úÖ Prix ES: {es_ticker.marketPrice()}")
        else:
            print("‚ùå Pas de prix ES")
        
        # 3. Test SPX Index
        print("\n3Ô∏è‚É£ Test SPX Index...")
        spx_contract = Stock('SPX', 'CBOE', 'USD')
        ib.qualifyContracts(spx_contract)
        spx_ticker = ib.reqMktData(spx_contract)
        
        print("   ‚è≥ Attente donn√©es SPX...")
        time.sleep(3)
        
        if spx_ticker.marketPrice():
            print(f"‚úÖ Prix SPX: {spx_ticker.marketPrice()}")
        else:
            print("‚ùå Pas de prix SPX")
        
        # 4. Test SPY
        print("\n4Ô∏è‚É£ Test SPY...")
        spy_contract = Stock('SPY', 'SMART', 'USD')
        ib.qualifyContracts(spy_contract)
        spy_ticker = ib.reqMktData(spy_contract)
        
        print("   ‚è≥ Attente donn√©es SPY...")
        time.sleep(3)
        
        if spy_ticker.marketPrice():
            print(f"‚úÖ Prix SPY: {spy_ticker.marketPrice()}")
        else:
            print("‚ùå Pas de prix SPY")
        
        # 5. R√©sum√© final
        print("\n5Ô∏è‚É£ R√âSUM√â FINAL")
        print("=" * 30)
        
        es_ok = es_ticker.marketPrice() is not None
        spx_ok = spx_ticker.marketPrice() is not None
        spy_ok = spy_ticker.marketPrice() is not None
        
        if es_ok and spx_ok and spy_ok:
            print("‚úÖ ES Futures: FONCTIONNEL")
            print("‚úÖ SPX Index: FONCTIONNEL")
            print("‚úÖ SPY: FONCTIONNEL")
            print("üéâ SUCC√àS TOTAL ! Votre syst√®me MIA_IA_SYSTEM est pr√™t !")
        else:
            print("‚ùå Certaines donn√©es manquent")
            print(f"   ES: {'‚úÖ' if es_ok else '‚ùå'}")
            print(f"   SPX: {'‚úÖ' if spx_ok else '‚ùå'}")
            print(f"   SPY: {'‚úÖ' if spy_ok else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        print("\n6Ô∏è‚É£ D√©connexion...")
        ib.disconnect()
        print("‚úÖ D√©connexion propre")

if __name__ == "__main__":
    try:
        test_tws_real_new_subscription()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrompu")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()


