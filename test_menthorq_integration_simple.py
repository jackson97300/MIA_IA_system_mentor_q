#!/usr/bin/env python3
"""
Test simple de l'int√©gration MenthorQ dans ConfluenceIntegrator
"""

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ".")))

def test_menthorq_integration():
    """Test de l'int√©gration MenthorQ"""
    print("üß™ Test int√©gration MenthorQ dans ConfluenceIntegrator...")
    
    try:
        # Test import
        from features.confluence_integrator import ConfluenceIntegrator
        print("‚úÖ Import ConfluenceIntegrator OK")
        
        # Test cr√©ation
        integrator = ConfluenceIntegrator()
        print("‚úÖ ConfluenceIntegrator cr√©√©")
        
        # Test MenthorQ Bias Analyzer
        if integrator.menthorq_bias_analyzer:
            print("‚úÖ MenthorQDealersBiasAnalyzer int√©gr√©")
        else:
            print("‚ùå MenthorQDealersBiasAnalyzer NON int√©gr√©")
        
        # Test m√©thodes MenthorQ
        if hasattr(integrator, '_calculate_menthorq_bias'):
            print("‚úÖ M√©thode _calculate_menthorq_bias disponible")
        else:
            print("‚ùå M√©thode _calculate_menthorq_bias manquante")
        
        if hasattr(integrator, '_calculate_menthorq_multiplier'):
            print("‚úÖ M√©thode _calculate_menthorq_multiplier disponible")
        else:
            print("‚ùå M√©thode _calculate_menthorq_multiplier manquante")
        
        # Test ConfluenceResult avec MenthorQ
        from features.confluence_integrator import ConfluenceResult
        result = ConfluenceResult(
            base_score=0.5,
            leadership_gate=0.8,
            risk_multiplier=1.0,
            final_score=0.4,
            is_valid=True,
            decision="BUY",
            leader="ES",
            confidence=0.6,
            alignment="BULLISH"
        )
        
        if hasattr(result, 'menthorq_bias_score'):
            print("‚úÖ ConfluenceResult avec champs MenthorQ")
        else:
            print("‚ùå ConfluenceResult sans champs MenthorQ")
        
        print("\nüéâ Test int√©gration MenthorQ termin√© avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test int√©gration MenthorQ: {e}")
        return False

if __name__ == "__main__":
    test_menthorq_integration()


