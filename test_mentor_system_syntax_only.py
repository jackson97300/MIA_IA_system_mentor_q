#!/usr/bin/env python3
"""
Test syntaxe uniquement du Mentor System - Aucun import
"""

import sys
import os
import ast
from datetime import datetime

def test_mentor_system_syntax():
    """Test syntaxe du fichier mentor_system.py"""
    print("\nüîç TEST SYNTAXE MENTOR_SYSTEM.PY")
    print("=" * 50)
    
    try:
        # Lire le fichier
        with open('core/mentor_system.py', 'r', encoding='utf-8') as f:
            source_code = f.read()
        
        print("‚úÖ Fichier mentor_system.py lu avec succ√®s")
        
        # Compiler pour v√©rifier la syntaxe
        compile(source_code, 'core/mentor_system.py', 'exec')
        print("‚úÖ Syntaxe mentor_system.py valide")
        
        # Analyser la structure avec AST
        tree = ast.parse(source_code)
        
        # Compter les imports
        imports = [node for node in ast.walk(tree) if isinstance(node, (ast.Import, ast.ImportFrom))]
        print(f"‚úÖ {len(imports)} imports d√©tect√©s")
        
        # Compter les classes
        classes = [node for node in ast.walk(tree) if isinstance(node, ast.ClassDef)]
        print(f"‚úÖ {len(classes)} classes d√©tect√©es")
        
        # Compter les fonctions
        functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        print(f"‚úÖ {len(functions)} fonctions d√©tect√©es")
        
        # V√©rifier les classes principales
        class_names = [cls.name for cls in classes]
        print(f"‚úÖ Classes trouv√©es: {', '.join(class_names)}")
        
        # V√©rifier les fonctions principales
        function_names = [func.name for func in functions]
        main_functions = [name for name in function_names if 'mentor' in name.lower() or 'create' in name.lower()]
        print(f"‚úÖ Fonctions principales: {', '.join(main_functions)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur syntaxe: {e}")
        return False

def test_discord_notifier_syntax():
    """Test syntaxe du fichier discord_notifier.py"""
    print("\nüîç TEST SYNTAXE DISCORD_NOTIFIER.PY")
    print("=" * 50)
    
    try:
        # Lire le fichier
        with open('monitoring/discord_notifier.py', 'r', encoding='utf-8') as f:
            source_code = f.read()
        
        print("‚úÖ Fichier discord_notifier.py lu avec succ√®s")
        
        # Compiler pour v√©rifier la syntaxe
        compile(source_code, 'monitoring/discord_notifier.py', 'exec')
        print("‚úÖ Syntaxe discord_notifier.py valide")
        
        # Analyser la structure avec AST
        tree = ast.parse(source_code)
        
        # Compter les imports
        imports = [node for node in ast.walk(tree) if isinstance(node, (ast.Import, ast.ImportFrom))]
        print(f"‚úÖ {len(imports)} imports d√©tect√©s")
        
        # Compter les classes
        classes = [node for node in ast.walk(tree) if isinstance(node, ast.ClassDef)]
        print(f"‚úÖ {len(classes)} classes d√©tect√©es")
        
        # Compter les fonctions
        functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        print(f"‚úÖ {len(functions)} fonctions d√©tect√©es")
        
        # V√©rifier les classes principales
        class_names = [cls.name for cls in classes]
        print(f"‚úÖ Classes trouv√©es: {', '.join(class_names)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur syntaxe discord_notifier: {e}")
        return False

def test_core_init_syntax():
    """Test syntaxe du fichier core/__init__.py"""
    print("\nüîç TEST SYNTAXE CORE/__INIT__.PY")
    print("=" * 50)
    
    try:
        # Lire le fichier
        with open('core/__init__.py', 'r', encoding='utf-8') as f:
            source_code = f.read()
        
        print("‚úÖ Fichier core/__init__.py lu avec succ√®s")
        
        # Compiler pour v√©rifier la syntaxe
        compile(source_code, 'core/__init__.py', 'exec')
        print("‚úÖ Syntaxe core/__init__.py valide")
        
        # Analyser la structure avec AST
        tree = ast.parse(source_code)
        
        # Compter les imports
        imports = [node for node in ast.walk(tree) if isinstance(node, (ast.Import, ast.ImportFrom))]
        print(f"‚úÖ {len(imports)} imports d√©tect√©s")
        
        # Compter les fonctions
        functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        print(f"‚úÖ {len(functions)} fonctions d√©tect√©es")
        
        # V√©rifier les fonctions principales
        function_names = [func.name for func in functions]
        print(f"‚úÖ Fonctions trouv√©es: {', '.join(function_names)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur syntaxe core/__init__.py: {e}")
        return False

def test_automation_main_syntax():
    """Test syntaxe du fichier automation_main.py"""
    print("\nüîç TEST SYNTAXE AUTOMATION_MAIN.PY")
    print("=" * 50)
    
    try:
        # Lire le fichier
        with open('automation_main.py', 'r', encoding='utf-8') as f:
            source_code = f.read()
        
        print("‚úÖ Fichier automation_main.py lu avec succ√®s")
        
        # Compiler pour v√©rifier la syntaxe
        compile(source_code, 'automation_main.py', 'exec')
        print("‚úÖ Syntaxe automation_main.py valide")
        
        # Analyser la structure avec AST
        tree = ast.parse(source_code)
        
        # Compter les imports
        imports = [node for node in ast.walk(tree) if isinstance(node, (ast.Import, ast.ImportFrom))]
        print(f"‚úÖ {len(imports)} imports d√©tect√©s")
        
        # Compter les classes
        classes = [node for node in ast.walk(tree) if isinstance(node, ast.ClassDef)]
        print(f"‚úÖ {len(classes)} classes d√©tect√©es")
        
        # Compter les fonctions
        functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
        print(f"‚úÖ {len(functions)} fonctions d√©tect√©es")
        
        # V√©rifier les classes principales
        class_names = [cls.name for cls in classes]
        print(f"‚úÖ Classes trouv√©es: {', '.join(class_names)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur syntaxe automation_main: {e}")
        return False

def main():
    """Test principal syntaxe uniquement"""
    print("üîç TEST SYNTAXE UNIQUEMENT - AUCUN IMPORT")
    print("=" * 50)
    
    tests = [
        ("Syntaxe mentor_system.py", test_mentor_system_syntax),
        ("Syntaxe discord_notifier.py", test_discord_notifier_syntax),
        ("Syntaxe core/__init__.py", test_core_init_syntax),
        ("Syntaxe automation_main.py", test_automation_main_syntax)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur test {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSULTATS DES TESTS SYNTAXE")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ SCORE: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ TOUS LES TESTS SYNTAXE R√âUSSIS !")
        print("‚úÖ Aucune connexion r√©seau tent√©e")
        print("‚úÖ Tous les fichiers sont syntaxiquement corrects")
        print("‚úÖ Mentor System et Discord Notifier sont pr√™ts")
        print("‚úÖ Int√©gration dans automation_main.py possible")
    else:
        print("‚ö†Ô∏è CERTAINS TESTS SYNTAXE ONT √âCHOU√â")
        print("üîß Correction n√©cessaire avant int√©gration")

if __name__ == "__main__":
    main() 