#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Lancement Syst√®me 2h avec Corrections Critiques
Lance le syst√®me pour test 2h avec toutes les corrections appliqu√©es
"""

import os
import sys
import json
import asyncio
import signal
from datetime import datetime, timedelta

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Variable globale pour arr√™ter le syst√®me
stop_system = False

def signal_handler(signum, frame):
    """Gestionnaire pour arr√™ter le syst√®me proprement"""
    global stop_system
    print("\nüõë Signal d'arr√™t re√ßu - Arr√™t propre du syst√®me...")
    stop_system = True

async def lance_systeme_2h_corrige():
    """Lance le syst√®me pour test 2h avec corrections critiques"""

    global stop_system

    print("MIA_IA_SYSTEM - LANCEMENT SYST√àME 2H AVEC CORRECTIONS")
    print("=" * 60)
    print("üéØ MODE: Test 2 heures avec corrections critiques")
    print("‚è∞ Dur√©e: 2 heures maximum")
    print("üìä Objectif: Validation performance optimis√©e")
    print("üîß Corrections: OHLC, connexion IBKR, volume")
    print("=" * 60)

    try:
        # V√©rifier que les corrections ont √©t√© appliqu√©es
        print("üîß V√âRIFICATION CORRECTIONS APPLIQU√âES")
        print("=" * 40)

        config_file = "config/critical_fixes_session.json"
        if os.path.exists(config_file):
            with open(config_file, 'r') as f:
                config = json.load(f)
            
            print("‚úÖ Configuration corrections trouv√©e")
            print(f"   üìÖ Timestamp: {config.get('timestamp', 'N/A')}")
            print(f"   üîß Corrections: {config.get('critical_fixes', {})}")
        else:
            print("‚ö†Ô∏è Configuration corrections non trouv√©e")
            print("üí° Ex√©cutez d'abord: python corriger_problemes_critiques_complet.py")

        # Appliquer les optimisations finales
        import config.automation_config as auto_config

        print("\nüîß OPTIMISATIONS FINALES")
        print("=" * 40)

        # Configuration pour test 2h optimis√©
        auto_config.TEST_MODE = False  # Mode production
        auto_config.TEST_DURATION_MINUTES = 120  # 2 heures
        auto_config.MAX_TRADES_PER_HOUR = 15  # Limite raisonnable
        auto_config.MIN_SIGNAL_INTERVAL = 60  # 1 minute entre signaux
        auto_config.TRADING_CYCLE_DELAY = 30  # 30 secondes entre cycles

        # Gestion des risques renforc√©e
        auto_config.MAX_DAILY_LOSS = 800.0  # Limite perte quotidienne
        auto_config.MAX_POSITION_SIZE = 1     # 1 contrat max
        auto_config.STOP_LOSS_TICKS = 8       # Stop loss conservateur
        auto_config.TAKE_PROFIT_RATIO = 1.8   # Take profit √©quilibr√©

        # Validation donn√©es renforc√©e
        auto_config.VOLUME_VARIABILITY_CHECK = True
        auto_config.DELTA_VARIABILITY_CHECK = True
        auto_config.PRICE_VARIABILITY_CHECK = True
        auto_config.VALIDATE_OHLC_DATA = True
        auto_config.MIN_OHLC_QUALITY = 0.8
        auto_config.REJECT_INVALID_OHLC = True

        print(f"‚úÖ Dur√©e test: {auto_config.TEST_DURATION_MINUTES} minutes")
        print(f"‚úÖ Max trades/heure: {auto_config.MAX_TRADES_PER_HOUR}")
        print(f"‚úÖ Interval signaux: {auto_config.MIN_SIGNAL_INTERVAL}s")
        print(f"‚úÖ D√©lai cycle: {auto_config.TRADING_CYCLE_DELAY}s")
        print(f"‚úÖ Perte max/jour: ${auto_config.MAX_DAILY_LOSS}")
        print(f"‚úÖ Position max: {auto_config.MAX_POSITION_SIZE} contrat(s)")
        print(f"‚úÖ Validation OHLC: {'Activ√©e' if auto_config.VALIDATE_OHLC_DATA else 'D√©sactiv√©e'}")

        # Enregistrer le signal handler
        signal.signal(signal.SIGINT, signal_handler)

        print("\nüöÄ LANCEMENT SYST√àME 2H...")
        print("=" * 40)

        # D√©marrer le syst√®me principal
        from launch_24_7_orderflow_trading import main

        # Cr√©er une t√¢che pour le syst√®me principal
        system_task = asyncio.create_task(main())

        # Attendre 2 heures ou signal d'arr√™t
        start_time = datetime.now()
        test_duration = timedelta(hours=2)

        print(f"‚è∞ D√©marrage: {start_time.strftime('%H:%M:%S')}")
        print(f"‚è∞ Fin pr√©vue: {(start_time + test_duration).strftime('%H:%M:%S')}")
        print("\nüìä MONITORING EN TEMPS R√âEL:")
        print("=" * 40)

        # Monitoring toutes les 5 minutes
        monitoring_interval = 300  # 5 minutes
        last_monitoring = start_time

        while datetime.now() < start_time + test_duration and not stop_system:
            current_time = datetime.now()
            elapsed = current_time - start_time
            remaining = test_duration - elapsed

            # Monitoring d√©taill√© toutes les 5 minutes
            if (current_time - last_monitoring).total_seconds() >= monitoring_interval:
                print(f"\n‚è∞ {current_time.strftime('%H:%M:%S')} | "
                      f"√âcoul√©: {elapsed.total_seconds()/3600:.1f}h | "
                      f"Reste: {remaining.total_seconds()/3600:.1f}h | "
                      f"Status: {'üü¢ ACTIF' if not stop_system else 'üî¥ ARR√äT'}")

                # V√©rifier les logs r√©cents pour d√©tecter les probl√®mes
                try:
                    log_files = []
                    for pattern in ["logs/*.log", "*.log"]:
                        import glob
                        log_files.extend(glob.glob(pattern))

                    recent_errors = 0
                    recent_trades = 0
                    recent_signals = 0

                    for log_file in log_files:
                        try:
                            with open(log_file, 'r', encoding='utf-8') as f:
                                lines = f.readlines()
                            
                            # Analyser les derni√®res 50 lignes
                            recent_lines = lines[-50:] if len(lines) > 50 else lines
                            
                            for line in recent_lines:
                                line = line.strip()
                                
                                # Compter les erreurs r√©centes
                                if "ERROR" in line or "timeout" in line.lower():
                                    recent_errors += 1
                                
                                # Compter les trades r√©cents
                                if "TRADE" in line or "EXECUTION" in line:
                                    recent_trades += 1
                                
                                # Compter les signaux r√©cents
                                if "SIGNAL" in line:
                                    recent_signals += 1

                        except Exception:
                            continue

                    print(f"   üìä Erreurs r√©centes: {recent_errors}")
                    print(f"   üéØ Trades r√©cents: {recent_trades}")
                    print(f"   üìà Signaux r√©cents: {recent_signals}")

                    # Alerte si trop d'erreurs
                    if recent_errors > 5:
                        print(f"   ‚ö†Ô∏è ALERTE: {recent_errors} erreurs d√©tect√©es")

                except Exception as e:
                    print(f"   ‚ùå Erreur monitoring: {e}")

                last_monitoring = current_time

            await asyncio.sleep(60)  # Check toutes les minutes

        # Arr√™ter le syst√®me
        print("\nüõë ARR√äT SYST√àME TEST 2H...")
        stop_system = True

        # Annuler la t√¢che syst√®me
        if not system_task.done():
            system_task.cancel()
            try:
                await system_task
            except asyncio.CancelledError:
                pass

        # R√©sum√© du test
        end_time = datetime.now()
        total_duration = end_time - start_time

        print("\nüìä R√âSUM√â TEST 2 HEURES")
        print("=" * 40)
        print(f"‚è∞ D√©but: {start_time.strftime('%H:%M:%S')}")
        print(f"‚è∞ Fin: {end_time.strftime('%H:%M:%S')}")
        print(f"‚è∞ Dur√©e totale: {total_duration.total_seconds()/3600:.1f} heures")
        print(f"üéØ Mode: Test 2h avec corrections")
        print(f"‚úÖ Status: Termin√© proprement")

        # Analyse finale des r√©sultats
        print("\nüí° ANALYSE FINALE")
        print("=" * 40)

        try:
            # Compter les trades totaux
            total_trades = 0
            total_signals = 0
            total_errors = 0

            log_files = []
            for pattern in ["logs/*.log", "*.log"]:
                import glob
                log_files.extend(glob.glob(pattern))

            for log_file in log_files:
                try:
                    with open(log_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                    
                    for line in lines:
                        line = line.strip()
                        
                        if "TRADE" in line or "EXECUTION" in line:
                            total_trades += 1
                        elif "SIGNAL" in line:
                            total_signals += 1
                        elif "ERROR" in line:
                            total_errors += 1

                except Exception:
                    continue

            print(f"üìä Trades totaux: {total_trades}")
            print(f"üìà Signaux totaux: {total_signals}")
            print(f"‚ùå Erreurs totales: {total_errors}")

            # Calculer les m√©triques
            if total_duration.total_seconds() > 0:
                trades_per_hour = total_trades / (total_duration.total_seconds() / 3600)
                signals_per_hour = total_signals / (total_duration.total_seconds() / 3600)
                
                print(f"üìä Trades/heure: {trades_per_hour:.1f}")
                print(f"üìà Signaux/heure: {signals_per_hour:.1f}")

            # √âvaluation finale
            print("\nüéØ √âVALUATION FINALE")
            print("=" * 40)

            if total_trades > 0:
                print("‚úÖ Syst√®me actif - Trades effectu√©s")
            else:
                print("‚ùå Aucun trade effectu√©")

            if total_signals > 0:
                print("‚úÖ Signaux g√©n√©r√©s")
            else:
                print("‚ùå Aucun signal g√©n√©r√©")

            if total_errors < 10:
                print("‚úÖ Peu d'erreurs - Syst√®me stable")
            elif total_errors < 50:
                print("‚ö†Ô∏è Erreurs mod√©r√©es - Surveillance n√©cessaire")
            else:
                print("‚ùå Trop d'erreurs - Correction n√©cessaire")

            # Recommandation finale
            print("\nüöÄ RECOMMANDATION FINALE")
            print("=" * 40)

            if total_trades > 0 and total_signals > 0 and total_errors < 20:
                print("‚úÖ SYST√àME VALID√â - Pr√™t pour production")
                print("üéØ Performance satisfaisante")
                print("üí° Vous pouvez lancer en mode production")
            elif total_trades > 0 and total_signals > 0:
                print("‚ö†Ô∏è SYST√àME PARTIELLEMENT VALID√â")
                print("üéØ Fonctionnel mais quelques probl√®mes")
                print("üí° Optimisations suppl√©mentaires recommand√©es")
            else:
                print("‚ùå SYST√àME NON VALID√â")
                print("üéØ Probl√®mes critiques d√©tect√©s")
                print("üí° Diagnostic approfondi n√©cessaire")

        except Exception as e:
            print(f"‚ùå Erreur analyse finale: {e}")

        print("\n‚úÖ Test 2h termin√©")

    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
    except Exception as e:
        print(f"‚ùå Erreur lancement: {e}")
    finally:
        print("\n‚úÖ Lancement termin√©")

if __name__ == "__main__":
    asyncio.run(lance_systeme_2h_corrige())






