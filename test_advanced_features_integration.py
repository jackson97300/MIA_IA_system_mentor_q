#!/usr/bin/env python3
"""
üß™ TEST INT√âGRATION ADVANCED FEATURES
=====================================

Test complet de l'int√©gration des Advanced Features dans le pipeline principal.
V√©rifie que les +7% win rate sont bien exploit√©s.

Tests:
1. Import Advanced Features
2. Int√©gration dans FeatureCalculatorOptimized  
3. Int√©gration dans ConfluenceIntegrator
4. Calcul pipeline complet
5. Impact sur les trades
"""

import sys
from pathlib import Path
import traceback

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

def test_advanced_features_import():
    """Test 1: Import Advanced Features"""
    print("üß™ Test 1: Import Advanced Features...")
    try:
        from features.advanced import (
            AdvancedFeaturesSuite,
            create_advanced_features_suite,
            get_advanced_features_status
        )
        print("‚úÖ Import Advanced Features OK")
        return True
    except Exception as e:
        print(f"‚ùå Erreur import Advanced Features: {e}")
        return False

def test_feature_calculator_integration():
    """Test 2: Int√©gration dans FeatureCalculatorOptimized"""
    print("üß™ Test 2: FeatureCalculatorOptimized avec Advanced Features...")
    try:
        from features.feature_calculator_optimized import FeatureCalculatorOptimized
        
        # Cr√©er le calculateur
        calculator = FeatureCalculatorOptimized()
        
        # V√©rifier que Advanced Features est initialis√©
        if hasattr(calculator, '_advanced_features'):
            if calculator._advanced_features:
                print("‚úÖ Advanced Features int√©gr√© dans FeatureCalculatorOptimized")
                return True
            else:
                print("‚ö†Ô∏è Advanced Features non disponible dans FeatureCalculatorOptimized")
                return False
        else:
            print("‚ùå Advanced Features non initialis√© dans FeatureCalculatorOptimized")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur FeatureCalculatorOptimized: {e}")
        return False

def test_confluence_integrator_integration():
    """Test 3: Int√©gration dans ConfluenceIntegrator"""
    print("üß™ Test 3: ConfluenceIntegrator avec Advanced Features...")
    try:
        from features.confluence_integrator import ConfluenceIntegrator
        
        # Cr√©er l'int√©grateur
        integrator = ConfluenceIntegrator()
        
        # V√©rifier que Advanced Features est initialis√©
        if hasattr(integrator, 'advanced_features'):
            if integrator.advanced_features:
                print("‚úÖ Advanced Features int√©gr√© dans ConfluenceIntegrator")
                return True
            else:
                print("‚ö†Ô∏è Advanced Features non disponible dans ConfluenceIntegrator")
                return False
        else:
            print("‚ùå Advanced Features non initialis√© dans ConfluenceIntegrator")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur ConfluenceIntegrator: {e}")
        return False

def test_advanced_features_calculation():
    """Test 4: Calcul Advanced Features"""
    print("üß™ Test 4: Calcul Advanced Features...")
    try:
        from features.advanced import create_advanced_features_suite
        
        # Cr√©er la suite
        suite = create_advanced_features_suite()
        
        # Test calcul
        results = suite.calculate_all_features()
        combined_signal = suite.get_combined_signal()
        
        print(f"‚úÖ Calcul Advanced Features OK")
        print(f"   Signal combin√©: {combined_signal:.3f}")
        print(f"   Features calcul√©es: {len(results)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur calcul Advanced Features: {e}")
        return False

def test_pipeline_complete():
    """Test 5: Pipeline complet avec Advanced Features"""
    print("üß™ Test 5: Pipeline complet...")
    try:
        from features.feature_calculator_optimized import FeatureCalculatorOptimized
        from core.base_types import MarketData
        
        # Cr√©er le calculateur
        calculator = FeatureCalculatorOptimized()
        
        # Donn√©es de test
        market_data = MarketData(
            symbol="ESU25_FUT_CME",
            timestamp=1234567890.0,
            open=4500.0,
            high=4505.0,
            low=4495.0,
            close=4502.0,
            volume=1000
        )
        
        # Calcul
        result = calculator.calculate_features(market_data)
        
        print(f"‚úÖ Pipeline complet OK")
        print(f"   Score final: {result.battle_navale_signal:.3f}")
        print(f"   Temps calcul: {result.calculation_time_ms:.1f}ms")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur pipeline complet: {e}")
        return False

def test_advanced_features_impact():
    """Test 6: Impact Advanced Features sur les trades"""
    print("üß™ Test 6: Impact sur les trades...")
    try:
        from features.confluence_integrator import ConfluenceIntegrator
        
        # Cr√©er l'int√©grateur
        integrator = ConfluenceIntegrator()
        
        # Donn√©es de test
        market_data = {
            'ES': {
                'symbol': 'ESU25_FUT_CME',
                'close': 4500.0,
                'volume': 1000,
                'timestamp': 1234567890.0
            },
            'NQ': {
                'symbol': 'NQU25_FUT_CME', 
                'close': 15000.0,
                'volume': 500,
                'timestamp': 1234567890.0
            }
        }
        
        # Calcul confluence
        result = integrator.calculate_confluence_with_leadership(market_data)
        
        print(f"‚úÖ Impact Advanced Features valid√©")
        print(f"   Score final: {result.final_score:.3f}")
        print(f"   Advanced Features score: {result.advanced_features_score:.3f}")
        print(f"   D√©cision: {result.decision}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur impact Advanced Features: {e}")
        return False

def main():
    """Lance tous les tests"""
    print("üöÄ TEST INT√âGRATION ADVANCED FEATURES")
    print("=" * 50)
    
    tests = [
        ("Import Advanced Features", test_advanced_features_import),
        ("FeatureCalculatorOptimized", test_feature_calculator_integration),
        ("ConfluenceIntegrator", test_confluence_integrator_integration),
        ("Calcul Advanced Features", test_advanced_features_calculation),
        ("Pipeline complet", test_pipeline_complete),
        ("Impact sur trades", test_advanced_features_impact)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur critique dans {test_name}: {e}")
            results.append((test_name, False))
        print()
    
    # R√©sum√©
    print("=" * 50)
    print("üìã R√âSUM√â DES TESTS ADVANCED FEATURES:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√âSULTAT GLOBAL: {passed}/{len(results)} tests pass√©s")
    
    if passed == len(results):
        print("üéâ SUCC√àS COMPLET!")
        print("‚Ä¢ Advanced Features int√©gr√©es avec succ√®s")
        print("‚Ä¢ +7% win rate potentiel activ√©")
        print("‚Ä¢ Pipeline optimis√© et fonctionnel")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©")
        print("‚Ä¢ V√©rifiez les d√©pendances (scipy, etc.)")
        print("‚Ä¢ Consultez les logs pour plus de d√©tails")

if __name__ == "__main__":
    main()


