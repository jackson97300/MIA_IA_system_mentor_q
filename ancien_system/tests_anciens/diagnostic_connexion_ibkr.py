#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Diagnostic Connexion IBKR
Diagnostic sp√©cifique du probl√®me de connexion IBKR
"""

import os
import sys
import asyncio
import socket
import subprocess
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def verifier_tws_demarre():
    """V√©rifier si TWS est d√©marr√©"""
    print("1. V√âRIFICATION TWS D√âMARR√â")
    print("-" * 40)
    
    try:
        # V√©rifier processus TWS
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq TWS.exe'], 
                              capture_output=True, text=True, shell=True)
        
        if 'TWS.exe' in result.stdout:
            print("‚úÖ TWS.exe d√©tect√© dans les processus")
            return True
        else:
            print("‚ùå TWS.exe non d√©tect√©")
            print("   TWS n'est pas d√©marr√©")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur v√©rification TWS: {e}")
        return False

def verifier_port_7497():
    """V√©rifier si le port 7497 est ouvert"""
    print("\n2. V√âRIFICATION PORT 7497")
    print("-" * 40)
    
    try:
        # Test connexion socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('127.0.0.1', 7497))
        sock.close()
        
        if result == 0:
            print("‚úÖ Port 7497 ouvert et accessible")
            return True
        else:
            print("‚ùå Port 7497 ferm√© ou inaccessible")
            print(f"   Code erreur: {result}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test port: {e}")
        return False

def verifier_netstat():
    """V√©rifier les connexions r√©seau"""
    print("\n3. V√âRIFICATION CONNEXIONS R√âSEAU")
    print("-" * 40)
    
    try:
        result = subprocess.run(['netstat', '-an'], capture_output=True, text=True, shell=True)
        
        if '127.0.0.1:7497' in result.stdout:
            print("‚úÖ Port 7497 d√©tect√© dans netstat")
            return True
        else:
            print("‚ùå Port 7497 non d√©tect√© dans netstat")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur netstat: {e}")
        return False

async def test_connexion_ibkr_direct():
    """Test connexion IBKR directe"""
    print("\n4. TEST CONNEXION IBKR DIRECTE")
    print("-" * 40)
    
    try:
        # Test import ib_insync
        try:
            from ib_insync import IB
            print("‚úÖ ib_insync disponible")
        except ImportError:
            print("‚ùå ib_insync non install√©")
            return False
        
        # Test connexion
        ib = IB()
        print("   Tentative connexion...")
        
        try:
            await asyncio.wait_for(
                ib.connectAsync('127.0.0.1', 7497, clientId=1),
                timeout=10.0
            )
            
            if ib.isConnected():
                print("‚úÖ Connexion IBKR r√©ussie")
                print(f"   Status: {ib.connectionStatus()}")
                
                # Test r√©cup√©ration donn√©es
                print("\n   Test r√©cup√©ration donn√©es...")
                try:
                    # Test contrat ES
                    from ib_insync import Future
                    es_contract = Future('ES', '202503', 'CME')
                    
                    # Demander donn√©es
                    ib.reqMktData(es_contract)
                    await asyncio.sleep(2)
                    
                    if es_contract.marketPrice():
                        print(f"‚úÖ Donn√©es ES r√©cup√©r√©es: {es_contract.marketPrice()}")
                        ib.disconnect()
                        return True
                    else:
                        print("‚ùå Aucune donn√©e ES r√©cup√©r√©e")
                        ib.disconnect()
                        return False
                        
                except Exception as e:
                    print(f"‚ùå Erreur r√©cup√©ration donn√©es: {e}")
                    ib.disconnect()
                    return False
            else:
                print("‚ùå Connexion IBKR √©chou√©e")
                return False
                
        except asyncio.TimeoutError:
            print("‚ùå Timeout connexion IBKR (10s)")
            return False
        except Exception as e:
            print(f"‚ùå Erreur connexion: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test IBKR: {e}")
        return False

def analyser_configuration_tws():
    """Analyser configuration TWS"""
    print("\n5. ANALYSE CONFIGURATION TWS")
    print("-" * 40)
    
    # V√©rifier fichiers de configuration TWS
    tws_config_paths = [
        os.path.expanduser("~/Jts"),
        "C:/Jts",
        "D:/Jts"
    ]
    
    for path in tws_config_paths:
        if os.path.exists(path):
            print(f"‚úÖ R√©pertoire TWS trouv√©: {path}")
            
            # V√©rifier jts.ini
            jts_ini = os.path.join(path, "jts.ini")
            if os.path.exists(jts_ini):
                print(f"   ‚úÖ jts.ini trouv√©")
                try:
                    with open(jts_ini, 'r') as f:
                        content = f.read()
                        if 'SocketPort=7497' in content:
                            print("   ‚úÖ Port 7497 configur√© dans jts.ini")
                        else:
                            print("   ‚ö†Ô∏è Port 7497 non trouv√© dans jts.ini")
                except Exception as e:
                    print(f"   ‚ùå Erreur lecture jts.ini: {e}")
            else:
                print(f"   ‚ùå jts.ini non trouv√©")
            
            return True
    
    print("‚ùå Aucun r√©pertoire TWS trouv√©")
    return False

def corriger_connexion_ibkr():
    """Correction connexion IBKR"""
    print("\n6. CORRECTION CONNEXION IBKR")
    print("-" * 40)
    
    corrections = []
    
    # 1. V√©rifier TWS d√©marr√©
    if not verifier_tws_demarre():
        corrections.append("1. D√©marrer TWS")
    
    # 2. V√©rifier port
    if not verifier_port_7497():
        corrections.append("2. V√©rifier configuration TWS port 7497")
    
    # 3. V√©rifier configuration
    if not analyser_configuration_tws():
        corrections.append("3. V√©rifier installation TWS")
    
    if corrections:
        print("üîß CORRECTIONS N√âCESSAIRES:")
        for correction in corrections:
            print(f"   - {correction}")
    else:
        print("‚úÖ Aucune correction n√©cessaire")
    
    return len(corrections) == 0

async def main():
    """Fonction principale"""
    try:
        print("MIA_IA_SYSTEM - DIAGNOSTIC CONNEXION IBKR")
        print("=" * 60)
        print(f"Diagnostic: {datetime.now()}")
        print("=" * 60)
        
        # Diagnostic complet
        tws_ok = verifier_tws_demarre()
        port_ok = verifier_port_7497()
        netstat_ok = verifier_netstat()
        config_ok = analyser_configuration_tws()
        
        # Test connexion si conditions remplies
        connexion_ok = False
        if tws_ok and port_ok:
            connexion_ok = await test_connexion_ibkr_direct()
        
        # R√©sultats
        print("\n" + "=" * 60)
        print("R√âSULTATS DIAGNOSTIC CONNEXION IBKR")
        print("=" * 60)
        
        print(f"TWS d√©marr√©: {'‚úÖ' if tws_ok else '‚ùå'}")
        print(f"Port 7497 ouvert: {'‚úÖ' if port_ok else '‚ùå'}")
        print(f"Netstat OK: {'‚úÖ' if netstat_ok else '‚ùå'}")
        print(f"Configuration TWS: {'‚úÖ' if config_ok else '‚ùå'}")
        print(f"Connexion IBKR: {'‚úÖ' if connexion_ok else '‚ùå'}")
        
        if connexion_ok:
            print("\n‚úÖ SUCC√àS: Connexion IBKR fonctionnelle")
            print("‚úÖ Syst√®me pr√™t pour test 2h")
            print("üöÄ Lancement recommand√©: python lance_mia_ia_tws.py")
        else:
            print("\n‚ùå √âCHEC: Connexion IBKR non fonctionnelle")
            print("\nüîß ACTIONS CORRECTIVES:")
            
            if not tws_ok:
                print("1. D√©marrer TWS (Trader Workstation)")
                print("   - V√©rifier TWS install√©")
                print("   - Lancer TWS depuis le menu D√©marrer")
            
            if not port_ok:
                print("2. Configurer TWS pour API")
                print("   - Dans TWS: Edit > Global Configuration")
                print("   - API > Settings > Enable ActiveX and Socket Clients")
                print("   - Socket port: 7497")
                print("   - Red√©marrer TWS")
            
            if not config_ok:
                print("3. V√©rifier installation TWS")
                print("   - R√©installer TWS si n√©cessaire")
                print("   - V√©rifier permissions")
            
            print("\n4. Apr√®s corrections:")
            print("   - Red√©marrer TWS")
            print("   - Relancer ce diagnostic")
        
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå Erreur diagnostic: {e}")

if __name__ == "__main__":
    asyncio.run(main())


