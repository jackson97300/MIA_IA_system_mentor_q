#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Lancement Syst√®me Optimis√© Test 2 Minutes
Lance le syst√®me avec toutes les optimisations pour test
"""

import os
import sys
import json
import asyncio
import signal
from datetime import datetime, timedelta

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Variable globale pour arr√™ter le syst√®me
stop_system = False

def signal_handler(signum, frame):
    """Gestionnaire pour arr√™ter le syst√®me proprement"""
    global stop_system
    print("\nüõë Signal d'arr√™t re√ßu - Arr√™t propre du syst√®me...")
    stop_system = True

async def lance_systeme_optimise():
    """Lance le syst√®me optimis√© pour test 2 minutes"""
    
    global stop_system
    
    print("MIA_IA_SYSTEM - LANCEMENT SYST√àME OPTIMIS√â")
    print("=" * 60)
    print("üéØ MODE: Test 2 minutes avec optimisations")
    print("‚è∞ Dur√©e: 2 minutes maximum")
    print("üìä Objectif: V√©rifier fonctionnement optimis√©")
    print("=" * 60)
    
    try:
        # Appliquer les optimisations
        import config.automation_config as auto_config
        
        print("üîß V√âRIFICATION OPTIMISATIONS APPLIQU√âES")
        print("=" * 40)
        
        print(f"‚úÖ Interval minimum: {auto_config.MIN_SIGNAL_INTERVAL}s")
        print(f"‚úÖ D√©lai cycle: {auto_config.TRADING_CYCLE_DELAY}s")
        print(f"‚úÖ Max trades/heure: {auto_config.MAX_TRADES_PER_HOUR}")
        print(f"‚úÖ Signaux SELL: {'Activ√©s' if auto_config.ENABLE_SELL_SIGNALS else 'D√©sactiv√©s'}")
        print(f"‚úÖ Seuil confiance: {auto_config.MIN_CONFIDENCE_THRESHOLD:.1%}")
        print(f"‚úÖ Confluence min: {auto_config.MIN_CONFLUENCE_SCORE:.1%}")
        
        # Configuration pour test 2 minutes
        auto_config.TEST_MODE = True
        auto_config.TEST_DURATION_MINUTES = 2
        auto_config.MAX_TRADES_PER_HOUR = 10  # Limiter pour test
        
        print("\nüöÄ LANCEMENT SYST√àME OPTIMIS√â...")
        print("=" * 40)
        
        # Enregistrer le signal handler
        signal.signal(signal.SIGINT, signal_handler)
        
        # D√©marrer le syst√®me principal
        from launch_24_7_orderflow_trading import main
        
        # Cr√©er une t√¢che pour le syst√®me principal
        system_task = asyncio.create_task(main())
        
        # Attendre 2 minutes ou signal d'arr√™t
        start_time = datetime.now()
        test_duration = timedelta(minutes=2)
        
        print(f"‚è∞ D√©marrage: {start_time.strftime('%H:%M:%S')}")
        print(f"‚è∞ Fin pr√©vue: {(start_time + test_duration).strftime('%H:%M:%S')}")
        print("\nüìä MONITORING EN TEMPS R√âEL:")
        print("=" * 40)
        
        while datetime.now() < start_time + test_duration and not stop_system:
            elapsed = datetime.now() - start_time
            remaining = test_duration - elapsed
            
            print(f"‚è∞ Temps √©coul√©: {elapsed.total_seconds():.0f}s | "
                  f"Reste: {remaining.total_seconds():.0f}s | "
                  f"Status: {'üü¢ ACTIF' if not stop_system else 'üî¥ ARR√äT'}")
            
            await asyncio.sleep(10)  # Update toutes les 10 secondes
        
        # Arr√™ter le syst√®me
        print("\nüõë ARR√äT SYST√àME TEST...")
        stop_system = True
        
        # Annuler la t√¢che syst√®me
        if not system_task.done():
            system_task.cancel()
            try:
                await system_task
            except asyncio.CancelledError:
                pass
        
        # R√©sum√© du test
        end_time = datetime.now()
        total_duration = end_time - start_time
        
        print("\nüìä R√âSUM√â TEST 2 MINUTES")
        print("=" * 40)
        print(f"‚è∞ D√©but: {start_time.strftime('%H:%M:%S')}")
        print(f"‚è∞ Fin: {end_time.strftime('%H:%M:%S')}")
        print(f"‚è∞ Dur√©e totale: {total_duration.total_seconds():.1f} secondes")
        print(f"üéØ Mode: Test optimis√©")
        print(f"‚úÖ Status: Termin√© proprement")
        
        print("\nüí° √âVALUATION TEST")
        print("=" * 40)
        print("‚úÖ Syst√®me d√©marr√© avec succ√®s")
        print("‚úÖ Optimisations appliqu√©es")
        print("‚úÖ Arr√™t propre effectu√©")
        print("‚úÖ Pr√™t pour lancement 2 heures")
        
        print("\nüöÄ PR√äT POUR LANCEMENT 2 HEURES !")
        print("=" * 40)
        print("Si le test est satisfaisant, vous pouvez lancer:")
        print("python lance_systeme_optimise_2h.py")
        
    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
    except Exception as e:
        print(f"‚ùå Erreur lancement: {e}")
    finally:
        print("\n‚úÖ Test termin√©")

if __name__ == "__main__":
    asyncio.run(lance_systeme_optimise())






