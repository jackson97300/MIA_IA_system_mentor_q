#!/usr/bin/env python3
"""
üîß TEST FEATURE CALCULATOR SIMPLIFI√â
Test sp√©cifique pour identifier le probl√®me exact
"""

import sys
import pandas as pd
from pathlib import Path

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

from core.logger import get_logger
from core.base_types import MarketData, OrderFlowData

logger = get_logger(__name__)

def test_feature_calculator_step_by_step():
    """Test √©tape par √©tape du FeatureCalculator"""
    
    print("üîß TEST FEATURE CALCULATOR - √âTAPE PAR √âTAPE")
    print("="*60)
    
    # √âTAPE 1: Import des modules
    try:
        print("üì¶ √âTAPE 1: Import FeatureCalculator...")
        from features.feature_calculator import FeatureCalculator
        print("‚úÖ FeatureCalculator import√©")
    except Exception as e:
        print(f"‚ùå Erreur import FeatureCalculator: {e}")
        return False
    
    # √âTAPE 2: Import des constantes
    try:
        print("üì¶ √âTAPE 2: Import constantes...")
        from features.feature_calculator import CONFLUENCE_WEIGHTS, TRADING_THRESHOLDS
        print(f"‚úÖ CONFLUENCE_WEIGHTS: {len(CONFLUENCE_WEIGHTS)} features")
        print(f"‚úÖ TRADING_THRESHOLDS: {len(TRADING_THRESHOLDS)} seuils")
    except Exception as e:
        print(f"‚ùå Erreur import constantes: {e}")
        return False
    
    # √âTAPE 3: Import FeatureCalculationResult
    try:
        print("üì¶ √âTAPE 3: Import FeatureCalculationResult...")
        from features.feature_calculator import FeatureCalculationResult
        print("‚úÖ FeatureCalculationResult import√©")
    except Exception as e:
        print(f"‚ùå Erreur import FeatureCalculationResult: {e}")
        return False
    
    # √âTAPE 4: Cr√©ation calculateur
    try:
        print("üèóÔ∏è √âTAPE 4: Cr√©ation FeatureCalculator...")
        calculator = FeatureCalculator()
        print("‚úÖ FeatureCalculator cr√©√©")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation FeatureCalculator: {e}")
        return False
    
    # √âTAPE 5: Test donn√©es
    try:
        print("üìä √âTAPE 5: Cr√©ation donn√©es test...")
        test_result = FeatureCalculationResult(
            timestamp=pd.Timestamp.now(),
            gamma_levels_proximity=0.8,
            volume_confirmation=0.7,
            vwap_trend_signal=0.6,
            sierra_pattern_strength=0.9,
            mtf_confluence_score=0.8,
            smart_money_strength=0.7,
            order_book_imbalance=0.5,
            options_flow_bias=0.6
        )
        print("‚úÖ FeatureCalculationResult cr√©√©")
        print(f"   - timestamp: {test_result.timestamp}")
        print(f"   - gamma_levels_proximity: {test_result.gamma_levels_proximity}")
        print(f"   - smart_money_strength: {test_result.smart_money_strength}")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation FeatureCalculationResult: {e}")
        return False
    
    # √âTAPE 6: Test m√©thode _calculate_confluence_score
    try:
        print("üßÆ √âTAPE 6: Test _calculate_confluence_score...")
        
        # V√©rifier que la m√©thode existe
        if not hasattr(calculator, '_calculate_confluence_score'):
            print("‚ùå M√©thode _calculate_confluence_score introuvable")
            return False
        
        print("‚úÖ M√©thode _calculate_confluence_score trouv√©e")
        
        # Appeler la m√©thode
        confluence_score = calculator._calculate_confluence_score(test_result)
        print(f"‚úÖ Score confluence calcul√©: {confluence_score:.3f}")
        
        # V√©rifications
        if 0.0 <= confluence_score <= 1.0:
            print(f"‚úÖ Score dans la plage valide [0, 1]: {confluence_score:.3f}")
        else:
            print(f"‚ùå Score hors plage: {confluence_score:.3f}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur calcul confluence_score: {e}")
        print(f"   Type erreur: {type(e).__name__}")
        import traceback
        print(f"   Traceback: {traceback.format_exc()}")
        return False
    
    print("\nüéâ TOUS LES TESTS R√âUSSIS!")
    print(f"üìä R√©sum√©:")
    print(f"   - FeatureCalculator: ‚úÖ Op√©rationnel")
    print(f"   - Constantes: ‚úÖ Import√©es")
    print(f"   - FeatureCalculationResult: ‚úÖ Fonctionnel")
    print(f"   - Score confluence: ‚úÖ {confluence_score:.3f}")
    
    return True

def main():
    """Fonction principale"""
    success = test_feature_calculator_step_by_step()
    
    if success:
        print("\n‚úÖ DIAGNOSTIC: FeatureCalculator fonctionne correctement")
    else:
        print("\n‚ùå DIAGNOSTIC: Probl√®me identifi√© avec FeatureCalculator")

if __name__ == "__main__":
    main()