#!/usr/bin/env python3
"""
Analyse et correction d√©finitive de model_trainer.py
"""

import shutil
from pathlib import Path

def analyze_model_trainer():
    """Analyse le fichier model_trainer.py pour trouver le probl√®me"""
    
    file_path = Path("ml/model_trainer.py")
    
    print("ANALYSE DE model_trainer.py")
    print("=" * 80)
    
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # Trouver les lignes importantes
    import_lines = []
    alias_line = None
    ml_imports_start = None
    
    for i, line in enumerate(lines):
        # Chercher les imports de ML
        if "from ml.simple_model import" in line:
            import_lines.append((i+1, line.strip()))
            if ml_imports_start is None:
                ml_imports_start = i
        elif "from ml.data_processor import" in line:
            import_lines.append((i+1, line.strip()))
        elif "from ml.model_validator import" in line:
            import_lines.append((i+1, line.strip()))
        
        # Chercher l'alias probl√©matique
        if "SimpleMLModel = SimpleLinearModel" in line and i < 250:
            alias_line = (i+1, line.strip())
    
    print("Imports ML trouv√©s:")
    for line_num, content in import_lines:
        print(f"  Ligne {line_num}: {content}")
    
    print(f"\nAlias probl√©matique:")
    if alias_line:
        print(f"  Ligne {alias_line[0]}: {alias_line[1]}")
    
    if alias_line and import_lines:
        if alias_line[0] < import_lines[0][0]:
            print("\n‚ùå PROBL√àME: L'alias est AVANT les imports ML!")
            return True, alias_line[0] - 1, ml_imports_start
    
    return False, None, None

def fix_model_trainer_definitely():
    """Correction d√©finitive du probl√®me"""
    
    file_path = Path("ml/model_trainer.py")
    backup_path = file_path.with_suffix('.py.backup2')
    
    # Backup
    shutil.copy2(file_path, backup_path)
    print(f"\nBackup cr√©√©: {backup_path}")
    
    # Lire le fichier
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # Strat√©gie: 
    # 1. Supprimer la ligne SimpleMLModel = SimpleLinearModel o√π qu'elle soit
    # 2. L'ajouter APR√àS la section "# ML Components integration"
    
    new_lines = []
    removed_line = None
    ml_imports_section_end = None
    
    i = 0
    while i < len(lines):
        line = lines[i]
        
        # Supprimer l'alias probl√©matique
        if "SimpleMLModel = SimpleLinearModel" in line:
            print(f"Suppression ligne {i+1}: {line.strip()}")
            removed_line = line.strip()
            i += 1
            continue
        
        # D√©tecter la fin de la section ML imports
        if "from ml.model_validator import" in line:
            ml_imports_section_end = i + 1
        
        new_lines.append(line)
        i += 1
    
    # Si on a trouv√© la section ML imports, ajouter l'alias apr√®s
    if ml_imports_section_end and removed_line:
        # Ins√©rer apr√®s les imports ML
        insert_pos = ml_imports_section_end
        
        # Ajouter une ligne vide si n√©cessaire
        if insert_pos < len(new_lines) and new_lines[insert_pos].strip():
            new_lines.insert(insert_pos, "\n")
            insert_pos += 1
        
        # Ajouter l'alias avec commentaire
        new_lines.insert(insert_pos, "# Alias pour compatibilit√© avec __init__.py\n")
        new_lines.insert(insert_pos + 1, f"{removed_line}\n")
        
        print(f"\nAlias r√©ins√©r√© apr√®s la ligne {ml_imports_section_end}")
    
    # Si on n'a pas trouv√© o√π l'ins√©rer, chercher "# Logger"
    elif removed_line:
        for i, line in enumerate(new_lines):
            if line.strip().startswith("# Logger") or line.strip().startswith("logger ="):
                # Ins√©rer avant le logger
                new_lines.insert(i, "\n# Alias pour compatibilit√©\n")
                new_lines.insert(i + 1, f"{removed_line}\n")
                new_lines.insert(i + 2, "\n")
                print(f"\nAlias ins√©r√© avant le logger (ligne {i+1})")
                break
    
    # √âcrire le fichier corrig√©
    with open(file_path, 'w', encoding='utf-8') as f:
        f.writelines(new_lines)
    
    print("\n‚úÖ Fichier corrig√©!")

def verify_fix():
    """V√©rifier que la correction fonctionne"""
    
    print("\n" + "=" * 80)
    print("V√âRIFICATION DE LA CORRECTION")
    print("=" * 80)
    
    # Tester l'import
    try:
        # Nettoyer les imports en cache
        import sys
        modules_to_remove = [m for m in sys.modules if m.startswith('ml')]
        for m in modules_to_remove:
            del sys.modules[m]
        
        # Tester
        import ml
        print("‚úÖ Import ml r√©ussi!")
        
        # V√©rifier que les composants sont disponibles
        from ml import SimpleLinearModel, ModelTrainer, ModelValidator
        print("‚úÖ Tous les composants ML import√©s avec succ√®s!")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    # 1. Analyser le probl√®me
    has_problem, alias_line, imports_start = analyze_model_trainer()
    
    if has_problem:
        print("\n" + "=" * 80)
        print("APPLICATION DE LA CORRECTION")
        print("=" * 80)
        
        # 2. Appliquer la correction
        fix_model_trainer_definitely()
        
        # 3. V√©rifier
        if verify_fix():
            print("\nüéâ SUCC√àS! Le module ML est maintenant fonctionnel!")
        else:
            print("\n‚ö†Ô∏è La correction n'a pas r√©solu le probl√®me.")
            print("V√©rifiez manuellement ml/model_trainer.py")
    else:
        print("\n‚úÖ Pas de probl√®me d√©tect√© dans l'ordre des imports")