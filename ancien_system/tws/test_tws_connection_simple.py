#!/usr/bin/env python3
"""
Test connexion TWS mode simul√©
"""
from ib_insync import *
import time

def test_tws_connection():
    """Test connexion TWS mode simul√©"""
    print("üîå Test connexion TWS mode simul√©...")
    
    # Configuration TWS simul√©
    config = {
        'host': '127.0.0.1',
        'port': 7497,  # Port TWS simul√©
        'client_id': 1,
        'timeout': 30
    }
    
    try:
        # Connexion TWS
        ib = IB()
        print(f"üì° Connexion √† TWS: {config['host']}:{config['port']}")
        
        ib.connect(
            config['host'], 
            config['port'], 
            clientId=config['client_id'],
            timeout=config['timeout']
        )
        
        print("‚úÖ Connexion TWS r√©ussie !")
        
        # Test donn√©es compte
        print("\nüìä Test donn√©es compte...")
        account_summary = ib.accountSummary()
        print(f"‚úÖ Compte connect√©: {len(account_summary)} √©l√©ments trouv√©s")
        
        # Test donn√©es march√© ES
        print("\nüìà Test donn√©es march√© ES...")
        contract = Future('ES', '202412', 'CME')
        ib.qualifyContracts(contract)
        
        # Subscribe market data
        ib.reqMktData(contract)
        time.sleep(3)  # Attendre donn√©es
        
        ticker = ib.ticker(contract)
        if ticker and ticker.marketName():
            print(f"‚úÖ Donn√©es ES: {ticker.marketName()} - Bid: {ticker.bid} Ask: {ticker.ask}")
        else:
            print("‚ö†Ô∏è Pas de donn√©es ES en temps r√©el (normal hors heures march√©)")
        
        # Test donn√©es historiques
        print("\nüìö Test donn√©es historiques...")
        bars = ib.reqHistoricalData(
            contract,
            endDateTime='',
            durationStr='1 D',
            barSizeSetting='1 hour',
            whatToShow='TRADES',
            useRTH=True
        )
        
        if bars:
            print(f"‚úÖ Donn√©es historiques: {len(bars)} barres trouv√©es")
            print(f"   Derni√®re barre: {bars[-1].date} - Close: {bars[-1].close}")
        else:
            print("‚ö†Ô∏è Pas de donn√©es historiques (v√©rifier permissions)")
        
        # D√©connexion
        ib.disconnect()
        print("\n‚úÖ Test TWS termin√© avec succ√®s !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur connexion TWS: {e}")
        return False

if __name__ == "__main__":
    test_tws_connection() 