#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Correction D√©finitive Donn√©es Simul√©es
Corrige d√©finitivement le probl√®me des donn√©es simul√©es et force les donn√©es ES r√©elles
"""

import os
import sys
import re
import shutil
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def corriger_donnees_simulees_definitif():
    """Correction d√©finitive du probl√®me des donn√©es simul√©es"""
    
    print("üö® MIA_IA_SYSTEM - CORRECTION D√âFINITIVE DONN√âES SIMUL√âES")
    print("=" * 70)
    print("üéØ Objectif: √âliminer TOUTES les donn√©es simul√©es")
    print("üéØ Forcer l'utilisation des donn√©es ES r√©elles uniquement")
    print("=" * 70)
    
    start_time = datetime.now()
    
    print(f"‚è∞ D√©but correction: {start_time.strftime('%H:%M:%S')}")
    
    # 1. CORRECTION CONFIGURATION PRINCIPALE
    print("\nüîß √âTAPE 1: CORRECTION CONFIGURATION PRINCIPALE")
    print("=" * 50)
    
    # Fichiers de configuration critiques
    critical_configs = [
        "config/automation_config.py",
        "config/mia_ia_system_tws_paper_fixed.py",
        "config/tws_paper_config.py",
        "config/ibkr_config.py"
    ]
    
    for config_file in critical_configs:
        if os.path.exists(config_file):
            print(f"   üìÑ Correction: {config_file}")
            
            # Sauvegarder
            backup_file = f"{config_file}.backup_simulation_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            with open(config_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Corrections sp√©cifiques
            corrections = [
                # Configuration principale
                (r'simulation_mode:\s*bool\s*=\s*True', 'simulation_mode: bool = False  # DONN√âES R√âELLES OBLIGATOIRES'),
                (r'SIMULATION_MODE\s*=\s*True', 'SIMULATION_MODE = False  # DONN√âES R√âELLES OBLIGATOIRES'),
                (r'USE_REAL_DATA\s*=\s*False', 'USE_REAL_DATA = True  # DONN√âES R√âELLES OBLIGATOIRES'),
                (r'FORCE_REAL_DATA\s*=\s*False', 'FORCE_REAL_DATA = True  # DONN√âES R√âELLES OBLIGATOIRES'),
                (r'DISABLE_SIMULATION\s*=\s*False', 'DISABLE_SIMULATION = True  # DONN√âES R√âELLES OBLIGATOIRES'),
                (r'FALLBACK_TO_SIMULATION\s*=\s*True', 'FALLBACK_TO_SIMULATION = False  # DONN√âES R√âELLES OBLIGATOIRES'),
                (r'REAL_TIME_DATA_ONLY\s*=\s*False', 'REAL_TIME_DATA_ONLY = True  # DONN√âES R√âELLES OBLIGATOIRES'),
                (r'VALIDATE_REAL_DATA\s*=\s*False', 'VALIDATE_REAL_DATA = True  # DONN√âES R√âELLES OBLIGATOIRES'),
                (r'REJECT_SIMULATED_DATA\s*=\s*False', 'REJECT_SIMULATED_DATA = True  # DONN√âES R√âELLES OBLIGATOIRES'),
                
                # IBKR Configuration
                (r'real_market_data\s*:\s*False', 'real_market_data: True,  # DONN√âES R√âELLES OBLIGATOIRES'),
                (r'market_data_type\s*:\s*[0-9]', 'market_data_type: 1,  # DONN√âES R√âELLES OBLIGATOIRES'),
                (r'paper_trading\s*:\s*True', 'paper_trading: True,  # Paper trading mais donn√©es r√©elles'),
                
                # Connexion
                (r'port\s*:\s*[0-9]+', 'port: 7497,  # Port TWS Paper Trading'),
                (r'host\s*:\s*[\'"]127\.0\.0\.1[\'"]', 'host: "127.0.0.1",  # Localhost TWS'),
            ]
            
            for pattern, replacement in corrections:
                content = re.sub(pattern, replacement, content, flags=re.IGNORECASE)
            
            # √âcrire le fichier corrig√©
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"   ‚úÖ Configuration corrig√©e: {config_file}")
    
    # 2. CORRECTION CONNECTEUR IBKR
    print("\nüîå √âTAPE 2: CORRECTION CONNECTEUR IBKR")
    print("=" * 50)
    
    ibkr_connector_file = "core/ibkr_connector.py"
    if os.path.exists(ibkr_connector_file):
        print(f"   üìÑ Correction: {ibkr_connector_file}")
        
        # Sauvegarder
        backup_file = f"{ibkr_connector_file}.backup_simulation_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        with open(ibkr_connector_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        with open(backup_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # Corrections IBKR Connector
        ibkr_corrections = [
            # Forcer mode r√©el
            (r'self\.simulation_mode\s*=\s*True', 'self.simulation_mode = False  # DONN√âES R√âELLES OBLIGATOIRES'),
            (r'simulation_mode\s*=\s*True', 'simulation_mode = False  # DONN√âES R√âELLES OBLIGATOIRES'),
            
            # Connexion forc√©e
            (r'logger\.warning\("‚ùå Connexion IBKR √âCHOU√âE - Activation mode simulation"\)', 
             'logger.error("‚ùå Connexion IBKR √âCHOU√âE - ERREUR CRITIQUE")'),
            (r'self\.simulation_mode\s*=\s*True.*# Mais on continue en simulation', 
             'raise ConnectionError("‚ùå Connexion IBKR requise - Donn√©es r√©elles obligatoires")'),
            
            # Port et host par d√©faut
            (r'self\.port\s*=\s*[0-9]+', 'self.port = 7497  # Port TWS Paper Trading'),
            (r'self\.host\s*=\s*[\'"]127\.0\.0\.1[\'"]', 'self.host = "127.0.0.1"  # Localhost TWS'),
        ]
        
        for pattern, replacement in ibkr_corrections:
            content = re.sub(pattern, replacement, content, flags=re.IGNORECASE)
        
        # √âcrire le fichier corrig√©
        with open(ibkr_connector_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"   ‚úÖ Connecteur IBKR corrig√©: {ibkr_connector_file}")
    
    # 3. CORRECTION MARKET DATA FEED
    print("\nüìä √âTAPE 3: CORRECTION MARKET DATA FEED")
    print("=" * 50)
    
    market_data_file = "data/market_data_feed.py"
    if os.path.exists(market_data_file):
        print(f"   üìÑ Correction: {market_data_file}")
        
        # Sauvegarder
        backup_file = f"{market_data_file}.backup_simulation_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        with open(market_data_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        with open(backup_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # Corrections Market Data Feed
        feed_corrections = [
            # Forcer source IBKR
            (r'self\.primary_source\s*=\s*DataSource\.SIMULATION', 'self.primary_source = DataSource.IBKR  # DONN√âES R√âELLES OBLIGATOIRES'),
            (r'DataSource\.SIMULATION', 'DataSource.IBKR  # DONN√âES R√âELLES OBLIGATOIRES'),
            
            # D√©sactiver simulation
            (r'elif target_source == DataSource\.SIMULATION:', 
             'elif target_source == DataSource.SIMULATION:\n                logger.error("‚ùå Mode simulation INTERDIT - Donn√©es r√©elles obligatoires")\n                return False'),
            
            # Connexion forc√©e IBKR
            (r'if not self\.connect_to_data_source\(DataSource\.SIMULATION\):', 
             'if not self.connect_to_data_source(DataSource.IBKR):  # DONN√âES R√âELLES OBLIGATOIRES'),
        ]
        
        for pattern, replacement in feed_corrections:
            content = re.sub(pattern, replacement, content, flags=re.IGNORECASE)
        
        # √âcrire le fichier corrig√©
        with open(market_data_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"   ‚úÖ Market Data Feed corrig√©: {market_data_file}")
    
    # 4. CR√âER SCRIPT DE V√âRIFICATION DONN√âES R√âELLES
    print("\nüîç √âTAPE 4: SCRIPT V√âRIFICATION DONN√âES R√âELLES")
    print("=" * 50)
    
    verification_script = """#!/usr/bin/env python3
\"\"\"
V√©rification donn√©es ES r√©elles - Version D√©finitive
\"\"\"

import os
import sys
import re
from datetime import datetime

def verifier_donnees_reelles_definitif():
    \"\"\"V√©rification d√©finitive des donn√©es r√©elles\"\"\"
    
    print("üîç V√âRIFICATION D√âFINITIVE DONN√âES ES R√âELLES")
    print("=" * 50)
    
    # Fichiers √† v√©rifier
    files_to_check = [
        "config/automation_config.py",
        "config/mia_ia_system_tws_paper_fixed.py",
        "core/ibkr_connector.py",
        "data/market_data_feed.py"
    ]
    
    all_ok = True
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            print(f"\\nüìÑ V√©rification: {file_path}")
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # V√©rifications critiques
                checks = [
                    ("simulation_mode = False", "Mode simulation d√©sactiv√©"),
                    ("USE_REAL_DATA = True", "Donn√©es r√©elles activ√©es"),
                    ("FORCE_REAL_DATA = True", "For√ßage donn√©es r√©elles"),
                    ("DataSource.IBKR", "Source IBKR configur√©e"),
                    ("port: 7497", "Port TWS correct"),
                ]
                
                file_ok = True
                for check, description in checks:
                    if check in content:
                        print(f"   ‚úÖ {description}")
                    else:
                        print(f"   ‚ùå {description} - MANQUANT")
                        file_ok = False
                
                # V√©rifications n√©gatives (ne doivent PAS √™tre pr√©sents)
                negative_checks = [
                    ("simulation_mode = True", "Mode simulation encore actif"),
                    ("DataSource.SIMULATION", "Source simulation d√©tect√©e"),
                    ("USE_REAL_DATA = False", "Donn√©es r√©elles d√©sactiv√©es"),
                ]
                
                for check, description in negative_checks:
                    if check in content:
                        print(f"   ‚ùå {description} - PROBL√àME")
                        file_ok = False
                
                if not file_ok:
                    all_ok = False
                    
            except Exception as e:
                print(f"   ‚ùå Erreur v√©rification: {e}")
                all_ok = False
    
    return all_ok

if __name__ == "__main__":
    success = verifier_donnees_reelles_definitif()
    if success:
        print("\\n‚úÖ TOUTES LES V√âRIFICATIONS R√âUSSIES")
        print("‚úÖ Donn√©es ES r√©elles configur√©es")
    else:
        print("\\n‚ùå PROBL√àMES D√âTECT√âS")
        print("‚ùå Correction n√©cessaire")
"""
    
    with open("verifier_donnees_reelles_definitif.py", "w", encoding="utf-8") as f:
        f.write(verification_script)
    
    print("   üìÑ Script de v√©rification cr√©√©: verifier_donnees_reelles_definitif.py")
    
    # 5. CR√âER SCRIPT DE TEST CONNEXION R√âELLE
    print("\nüß™ √âTAPE 5: SCRIPT TEST CONNEXION R√âELLE")
    print("=" * 50)
    
    test_script = """#!/usr/bin/env python3
\"\"\"
Test connexion donn√©es ES r√©elles - Version D√©finitive
\"\"\"

import os
import sys
import socket
import time
from datetime import datetime

def test_connexion_reelle_definitif():
    \"\"\"Test d√©finitif de la connexion donn√©es r√©elles\"\"\"
    
    print("üß™ TEST D√âFINITIF CONNEXION DONN√âES ES R√âELLES")
    print("=" * 50)
    
    # 1. Test TWS accessible
    print("\\nüîå Test 1: Accessibilit√© TWS")
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('127.0.0.1', 7497))
        sock.close()
        
        if result == 0:
            print("   ‚úÖ TWS accessible sur port 7497")
            tws_ok = True
        else:
            print("   ‚ùå TWS non accessible sur port 7497")
            tws_ok = False
    except Exception as e:
        print(f"   ‚ùå Erreur test TWS: {e}")
        tws_ok = False
    
    # 2. Test import IBKR Connector
    print("\\nüì¶ Test 2: Import IBKR Connector")
    try:
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from core.ibkr_connector import IBKRConnector
        print("   ‚úÖ IBKR Connector import√©")
        connector_ok = True
    except ImportError as e:
        print(f"   ‚ùå Erreur import IBKR Connector: {e}")
        connector_ok = False
    
    # 3. Test configuration
    print("\\n‚öôÔ∏è Test 3: Configuration donn√©es r√©elles")
    try:
        from config.automation_config import get_automation_config
        config = get_automation_config()
        
        if hasattr(config, 'simulation_mode') and not config.simulation_mode:
            print("   ‚úÖ Configuration: Mode simulation d√©sactiv√©")
            config_ok = True
        else:
            print("   ‚ùå Configuration: Mode simulation encore actif")
            config_ok = False
    except Exception as e:
        print(f"   ‚ùå Erreur configuration: {e}")
        config_ok = False
    
    # R√©sum√©
    print("\\nüìä R√âSUM√â TESTS")
    print("=" * 30)
    print(f"   TWS Accessible: {'‚úÖ' if tws_ok else '‚ùå'}")
    print(f"   IBKR Connector: {'‚úÖ' if connector_ok else '‚ùå'}")
    print(f"   Configuration: {'‚úÖ' if config_ok else '‚ùå'}")
    
    all_tests_ok = tws_ok and connector_ok and config_ok
    
    if all_tests_ok:
        print("\\n‚úÖ TOUS LES TESTS R√âUSSIS")
        print("‚úÖ Pr√™t pour donn√©es ES r√©elles")
    else:
        print("\\n‚ùå TESTS √âCHOU√âS")
        print("‚ùå Correction n√©cessaire")
    
    return all_tests_ok

if __name__ == "__main__":
    success = test_connexion_reelle_definitif()
    exit(0 if success else 1)
"""
    
    with open("test_connexion_reelle_definitif.py", "w", encoding="utf-8") as f:
        f.write(test_script)
    
    print("   üìÑ Script de test cr√©√©: test_connexion_reelle_definitif.py")
    
    # 6. SCRIPT DE RELANCE AVEC DONN√âES R√âELLES
    print("\nüöÄ √âTAPE 6: SCRIPT RELANCE DONN√âES R√âELLES")
    print("=" * 50)
    
    restart_script = """#!/usr/bin/env python3
\"\"\"
Relance syst√®me avec donn√©es ES r√©elles - Version D√©finitive
\"\"\"

import os
import sys
import subprocess
import time
from datetime import datetime

def relancer_donnees_reelles_definitif():
    \"\"\"Relance d√©finitive avec donn√©es ES r√©elles\"\"\"
    
    print("üöÄ RELANCE D√âFINITIVE AVEC DONN√âES ES R√âELLES")
    print("=" * 50)
    
    # 1. V√©rification
    print("\\nüîç √âtape 1: V√©rification configuration")
    try:
        result = subprocess.run("python verifier_donnees_reelles_definitif.py", 
                              shell=True, capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è Erreurs: {result.stderr}")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
    
    # 2. Test connexion
    print("\\nüß™ √âtape 2: Test connexion r√©elle")
    try:
        result = subprocess.run("python test_connexion_reelle_definitif.py", 
                              shell=True, capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è Erreurs: {result.stderr}")
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")
    
    # 3. Attendre
    print("\\n‚è∞ Attente 10 secondes...")
    time.sleep(10)
    
    # 4. Relancer syst√®me
    print("\\nüöÄ √âtape 3: Relance syst√®me")
    restart_commands = [
        "python launch_24_7_orderflow_trading.py",
        "python lance_mia_ia_tws.py"
    ]
    
    for command in restart_commands:
        if os.path.exists(command.split()[1]):
            try:
                print(f"   üöÄ Lancement: {command}")
                subprocess.Popen(command, shell=True)
                print(f"   ‚úÖ Syst√®me relanc√©: {command}")
                break
            except Exception as e:
                print(f"   ‚ùå Erreur relance: {command} - {e}")
    
    print("\\n‚úÖ Relance avec donn√©es r√©elles termin√©e")

if __name__ == "__main__":
    relancer_donnees_reelles_definitif()
"""
    
    with open("relancer_donnees_reelles_definitif.py", "w", encoding="utf-8") as f:
        f.write(restart_script)
    
    print("   üìÑ Script de relance cr√©√©: relancer_donnees_reelles_definitif.py")
    
    # R√âSUM√â FINAL
    end_time = datetime.now()
    total_duration = end_time - start_time
    
    print("\nüìä R√âSUM√â CORRECTION D√âFINITIVE")
    print("=" * 50)
    print(f"‚è∞ Dur√©e: {total_duration.total_seconds():.1f} secondes")
    print("‚úÖ Configuration principale corrig√©e")
    print("‚úÖ Connecteur IBKR corrig√©")
    print("‚úÖ Market Data Feed corrig√©")
    print("‚úÖ Scripts de v√©rification cr√©√©s")
    print("‚úÖ Scripts de test cr√©√©s")
    print("‚úÖ Script de relance cr√©√©")
    
    print("\nüö® CHANGEMENTS CRITIQUES APPLIQU√âS:")
    print("   ‚Ä¢ Mode simulation D√âSACTIV√â partout")
    print("   ‚Ä¢ Donn√©es r√©elles OBLIGATOIRES")
    print("   ‚Ä¢ Connexion TWS FORC√âE")
    print("   ‚Ä¢ Fallback simulation SUPPRIM√â")
    print("   ‚Ä¢ Validation donn√©es r√©elles ACTIV√âE")
    
    print("\nüöÄ PLAN D'ACTION RECOMMAND√â")
    print("=" * 50)
    print("1. ‚úÖ V√©rifier: python verifier_donnees_reelles_definitif.py")
    print("2. üß™ Tester: python test_connexion_reelle_definitif.py")
    print("3. üöÄ Relancer: python relancer_donnees_reelles_definitif.py")
    print("4. üìä Analyser: python analyse_resultats_temps_reel.py")
    
    print("\n‚ö†Ô∏è ATTENTION:")
    print("   ‚Ä¢ Le syst√®me utilise MAINTENANT UNIQUEMENT des donn√©es ES r√©elles")
    print("   ‚Ä¢ TWS doit √™tre connect√© et configur√©")
    print("   ‚Ä¢ Plus de fallback vers simulation")
    print("   ‚Ä¢ Erreurs de connexion = arr√™t syst√®me")

if __name__ == "__main__":
    corriger_donnees_simulees_definitif()


