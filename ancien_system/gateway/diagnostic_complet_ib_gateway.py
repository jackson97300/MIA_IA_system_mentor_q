#!/usr/bin/env python3
"""
DIAGNOSTIC COMPLET IB GATEWAY
MIA_IA_SYSTEM - Analyse compl√®te des probl√®mes de connexion
"""
import asyncio
import sys
import time
import socket
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from core.ibkr_connector import IBKRConnector

async def diagnostic_complet():
    """Diagnostic complet IB Gateway"""
    
    print("üîç DIAGNOSTIC COMPLET IB GATEWAY")
    print("=" * 50)
    
    # 1. Test connectivit√© port
    print("\n1Ô∏è‚É£ TEST CONNECTIVIT√â PORT 4002")
    print("-" * 30)
    test_port_connectivite()
    
    # 2. Test connexion simple
    print("\n2Ô∏è‚É£ TEST CONNEXION SIMPLE")
    print("-" * 25)
    await test_connexion_simple()
    
    # 3. Test persistance connexion
    print("\n3Ô∏è‚É£ TEST PERSISTANCE CONNEXION")
    print("-" * 30)
    await test_persistance_connexion()
    
    # 4. Test r√©cup√©ration donn√©es
    print("\n4Ô∏è‚É£ TEST R√âCUP√âRATION DONN√âES")
    print("-" * 30)
    await test_recuperation_donnees()
    
    # 5. Analyse erreurs
    print("\n5Ô∏è‚É£ ANALYSE ERREURS")
    print("-" * 20)
    analyser_erreurs()

def test_port_connectivite():
    """Test connectivit√© port 4002"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('127.0.0.1', 4002))
        sock.close()
        
        if result == 0:
            print("‚úÖ Port 4002 accessible")
        else:
            print("‚ùå Port 4002 ferm√©")
            print("üîç V√©rifier IB Gateway d√©marr√©")
    except Exception as e:
        print(f"‚ùå Erreur test port: {e}")

async def test_connexion_simple():
    """Test connexion simple sans donn√©es"""
    config = {
        'ibkr_host': '127.0.0.1',
        'ibkr_port': 4002,
        'ibkr_client_id': 1,
        'connection_timeout': 10,
        'simulation_mode': False,
        'require_real_data': False,  # Pas de donn√©es r√©elles
        'use_ib_insync': True
    }
    
    try:
        connector = IBKRConnector(config)
        success = await connector.connect()
        
        if success:
            print("‚úÖ Connexion simple r√©ussie")
            await connector.disconnect()
            return True
        else:
            print("‚ùå √âchec connexion simple")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur connexion simple: {e}")
        return False

async def test_persistance_connexion():
    """Test persistance de la connexion"""
    config = {
        'ibkr_host': '127.0.0.1',
        'ibkr_port': 4002,
        'ibkr_client_id': 1,
        'connection_timeout': 30,
        'simulation_mode': False,
        'require_real_data': False,
        'use_ib_insync': True
    }
    
    try:
        connector = IBKRConnector(config)
        success = await connector.connect()
        
        if success:
            print("‚úÖ Connexion √©tablie")
            
            # Test persistance 30 secondes
            for i in range(6):
                if connector.is_connected_flag:
                    print(f"   ‚úÖ Connexion maintenue ({i*5}s)")
                    await asyncio.sleep(5)
                else:
                    print(f"   ‚ùå Connexion perdue √† {i*5}s")
                    break
            
            await connector.disconnect()
            return True
        else:
            print("‚ùå √âchec connexion")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur persistance: {e}")
        return False

async def test_recuperation_donnees():
    """Test r√©cup√©ration donn√©es avec gestion d'erreur"""
    config = {
        'ibkr_host': '127.0.0.1',
        'ibkr_port': 4002,
        'ibkr_client_id': 1,
        'connection_timeout': 30,
        'simulation_mode': False,
        'require_real_data': True,
        'use_ib_insync': True
    }
    
    try:
        connector = IBKRConnector(config)
        success = await connector.connect()
        
        if success:
            print("‚úÖ Connexion √©tablie")
            
            # Test r√©cup√©ration donn√©es avec try/catch
            try:
                print("üìä Tentative r√©cup√©ration donn√©es...")
                market_data = await connector.get_market_data("ES")
                
                if market_data:
                    print("‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s")
                    print(f"   Symbol: {getattr(market_data, 'symbol', 'N/A')}")
                    print(f"   Prix: {getattr(market_data, 'close', 'N/A')}")
                else:
                    print("‚ö†Ô∏è Pas de donn√©es r√©cup√©r√©es")
                    
            except AttributeError as e:
                print(f"‚ùå Erreur attribut: {e}")
                print("üîç Probl√®me dans la structure des donn√©es")
            except Exception as e:
                print(f"‚ùå Erreur r√©cup√©ration: {e}")
            
            await connector.disconnect()
            return True
        else:
            print("‚ùå √âchec connexion")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test donn√©es: {e}")
        return False

def analyser_erreurs():
    """Analyse des erreurs identifi√©es"""
    print("üîç ANALYSE ERREURS IDENTIFI√âES:")
    print("-" * 35)
    
    print("1Ô∏è‚É£ IBKR Error 2119:")
    print("   - Probl√®me: Connexion aux donn√©es de march√©")
    print("   - Cause: Abonnement CME Real-Time manquant")
    print("   - Solution: V√©rifier abonnement IBKR")
    
    print("\n2Ô∏è‚É£ Erreur 'dict' object:")
    print("   - Probl√®me: Structure de donn√©es incorrecte")
    print("   - Cause: get_market_data retourne dict au lieu d'objet")
    print("   - Solution: Corriger le code de r√©cup√©ration")
    
    print("\n3Ô∏è‚É£ D√©connexion automatique:")
    print("   - Probl√®me: API se d√©connecte apr√®s quelques secondes")
    print("   - Cause: Timeout ou probl√®me de maintenance")
    print("   - Solution: Augmenter timeout et v√©rifier heartbeat")
    
    print("\nüìã RECOMMANDATIONS:")
    print("-" * 20)
    print("1. V√©rifier abonnement CME Real-Time dans IBKR")
    print("2. Corriger le code get_market_data")
    print("3. Augmenter les timeouts")
    print("4. V√©rifier les param√®tres IB Gateway")

if __name__ == "__main__":
    print("üîç DIAGNOSTIC COMPLET IB GATEWAY")
    print("=" * 50)
    
    asyncio.run(diagnostic_complet())
    
    print("\nüìã DIAGNOSTIC TERMIN√â")
    print("üîç V√©rifier les recommandations ci-dessus")























