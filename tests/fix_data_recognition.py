#!/usr/bin/env python3
"""
üîß CORRECTION RECONNAISSANCE DONN√âES - MIA_IA_SYSTEM
====================================================

Force la reconnaissance des donn√©es SPX par OptionsDataManager
pour permettre le lancement complet du syst√®me.

Author: MIA_IA_SYSTEM
Date: Janvier 2025
"""

import asyncio
import sys
import json
import shutil
from pathlib import Path
from datetime import datetime, timezone

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

from core.logger import get_logger

logger = get_logger(__name__)

def fix_data_recognition():
    """Corrige la reconnaissance des donn√©es SPX"""
    
    logger.info("üîß Correction reconnaissance donn√©es SPX...")
    
    try:
        data_dir = Path("data/options_snapshots")
        
        # 1. V√©rifier les fichiers existants
        json_files = list(data_dir.glob("*.json"))
        logger.info(f"   üìÑ Fichiers JSON trouv√©s: {len(json_files)}")
        
        # 2. Trouver le fichier le plus r√©cent
        if json_files:
            latest_file = max(json_files, key=lambda f: f.stat().st_mtime)
            logger.info(f"   üìÑ Fichier le plus r√©cent: {latest_file}")
            
            # 3. Lire le contenu
            with open(latest_file, 'r') as f:
                data = json.load(f)
            
            logger.info(f"   üìä Donn√©es: VIX {data.get('vix_level', 0):.1f}")
            
            # 4. Cr√©er un fichier de sauvegarde finale avec le bon nom
            today = datetime.now().strftime('%Y%m%d')
            final_file = data_dir / f"spx_final_{today}.json"
            
            # Copier le fichier le plus r√©cent comme sauvegarde finale
            shutil.copy2(latest_file, final_file)
            
            logger.info(f"   ‚úÖ Sauvegarde finale cr√©√©e: {final_file}")
            
            # 5. Cr√©er aussi un fichier "latest" pour faciliter la reconnaissance
            latest_marker = data_dir / "spx_latest.json"
            shutil.copy2(latest_file, latest_marker)
            
            logger.info(f"   ‚úÖ Marqueur latest cr√©√©: {latest_marker}")
            
            return True
        else:
            logger.error("   ‚ùå Aucun fichier JSON trouv√©")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur correction reconnaissance: {e}")
        return False

def create_emergency_data():
    """Cr√©e des donn√©es d'urgence si n√©cessaire"""
    
    logger.info("üö® Cr√©ation donn√©es d'urgence...")
    
    emergency_data = {
        'vix_level': 20.5,
        'put_call_ratio': 0.85,
        'put_call_volume_ratio': 0.80,
        'call_volume': 25000,
        'put_volume': 20000,
        'call_oi': 1000000,
        'put_oi': 800000,
        'gamma_exposure': 75e9,
        'dealer_position': 'neutral',
        'gamma_flip_level': 5400.0,
        'pin_levels': [5400, 5450, 5500],
        'unusual_activity': False,
        'estimated_dealer_hedging': 'neutral',
        'timestamp': datetime.now(timezone.utc).isoformat(),
        'data_source': 'emergency_fix'
    }
    
    # Sauvegarder dans le r√©pertoire options_snapshots
    data_dir = Path("data/options_snapshots")
    data_dir.mkdir(parents=True, exist_ok=True)
    
    today = datetime.now().strftime('%Y%m%d')
    emergency_file = data_dir / f"spx_final_{today}.json"
    
    with open(emergency_file, 'w') as f:
        json.dump(emergency_data, f, indent=2, default=str)
    
    logger.info(f"   ‚úÖ Donn√©es d'urgence: {emergency_file}")
    return emergency_data

def test_data_retrieval():
    """Test la r√©cup√©ration des donn√©es apr√®s correction"""
    
    logger.info("üß™ Test r√©cup√©ration apr√®s correction...")
    
    try:
        from data.options_data_manager import create_options_data_manager
        
        options_manager = create_options_data_manager()
        latest_data = options_manager.get_latest_saved_data()
        
        if latest_data:
            logger.info("‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s!")
            logger.info(f"   üìà VIX: {latest_data.vix_level:.1f}")
            logger.info(f"   üìä Put/Call Ratio: {latest_data.put_call_ratio:.3f}")
            logger.info(f"   üí∞ Gamma Exposure: ${latest_data.gamma_exposure/1e9:.1f}B")
            logger.info(f"   üïê Timestamp: {latest_data.timestamp}")
            return True
        else:
            logger.warning("‚ö†Ô∏è Donn√©es toujours non r√©cup√©rables")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur test r√©cup√©ration: {e}")
        return False

if __name__ == "__main__":
    logger.info("üîß D√âMARRAGE CORRECTION RECONNAISSANCE DONN√âES")
    
    # 1. Correction principale
    success1 = fix_data_recognition()
    
    # 2. Cr√©er donn√©es d'urgence si n√©cessaire
    if not success1:
        logger.warning("‚ö†Ô∏è Correction √©chou√©e, cr√©ation donn√©es d'urgence...")
        create_emergency_data()
    
    # 3. Test r√©cup√©ration
    success2 = test_data_retrieval()
    
    if success2:
        logger.info("üéâ CORRECTION R√âUSSIE!")
        logger.info("   Le syst√®me peut maintenant d√©marrer avec les donn√©es SPX")
    else:
        logger.error("‚ùå √âCHEC DE LA CORRECTION")
        logger.info("   Le syst√®me utilisera les donn√©es d'urgence")

