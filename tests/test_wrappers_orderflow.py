#!/usr/bin/env python3
"""
üß™ TEST DES WRAPPERS ORDERFLOW ANALYZER
=======================================

Script de test pour v√©rifier que les nouveaux wrappers synchrones fonctionnent.
"""

import sys
from pathlib import Path

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

def test_wrappers_orderflow():
    """Test des nouveaux wrappers synchrones"""
    print("üß™ TEST DES WRAPPERS ORDERFLOW ANALYZER")
    print("=" * 50)
    
    try:
        # Import du module
        from features.orderflow_analyzer import OrderFlowAnalyzer
        from config.automation_config import AutomationConfig
        
        print("‚úÖ Import modules: OK")
        
        # Cr√©ation de l'instance
        config = AutomationConfig()
        analyzer = OrderFlowAnalyzer(config)
        print("‚úÖ Cr√©ation instance: OK")
        
        # Donn√©es de test
        test_data = {
            'symbol': 'ES',
            'price': 4500.0,
            'volume': 1000,
            'delta': 0.5,
            'bid_volume': 600,
            'ask_volume': 400,
            'timestamp': '2025-08-26 23:00:00'
        }
        
        print("\nüîß Test 1: Wrapper analyze_orderflow")
        print("-" * 40)
        
        # Test du wrapper analyze_orderflow
        try:
            result = analyzer.analyze_orderflow(test_data)
            print("‚úÖ Wrapper analyze_orderflow: R√âUSSI")
            if result:
                print(f"   Signal g√©n√©r√©: {result.signal_type}")
                print(f"   Confiance: {result.confidence}")
                print(f"   Prix: {result.price_level}")
            else:
                print("   Aucun signal g√©n√©r√© (normal pour donn√©es de test)")
        except Exception as e:
            print(f"‚ùå Wrapper analyze_orderflow: √âCHEC - {e}")
            import traceback
            traceback.print_exc()
            return False
        
        print("\nüîß Test 2: Wrapper calculate_footprint")
        print("-" * 40)
        
        # Test du wrapper calculate_footprint
        try:
            result = analyzer.calculate_footprint(test_data)
            print("‚úÖ Wrapper calculate_footprint: R√âUSSI")
            if result:
                print(f"   R√©sultat: {type(result)}")
                if isinstance(result, dict):
                    print(f"   Cl√©s: {list(result.keys())}")
            else:
                print("   Aucun r√©sultat (normal pour donn√©es de test)")
        except Exception as e:
            print(f"‚ùå Wrapper calculate_footprint: √âCHEC - {e}")
            import traceback
            traceback.print_exc()
            return False
        
        print("\nüîß Test 3: V√©rification des m√©thodes disponibles")
        print("-" * 40)
        
        # V√©rifier que les m√©thodes sont bien disponibles
        methods_to_check = [
            'analyze_orderflow_data',  # M√©thode async originale
            'analyze_orderflow',       # Wrapper sync
            'calculate_footprint',     # Wrapper sync
            '_analyze_footprint'       # M√©thode interne
        ]
        
        for method in methods_to_check:
            if hasattr(analyzer, method):
                print(f"‚úÖ {method}: DISPONIBLE")
            else:
                print(f"‚ùå {method}: MANQUANTE")
                return False
        
        print("\nüéØ R√âSUM√â DU TEST")
        print("=" * 50)
        print("‚úÖ TOUS LES TESTS R√âUSSIS")
        print("\nüí° R√âSULTAT:")
        print("   - Les wrappers synchrones fonctionnent parfaitement")
        print("   - Compatibilit√© avec les tests existants: OK")
        print("   - M√©thodes async originales: Toujours disponibles")
        print("   - Le module est maintenant 100% compatible")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_integration_system():
    """Test d'int√©gration avec le syst√®me principal"""
    print("\nüîß TEST D'INT√âGRATION SYST√àME")
    print("=" * 50)
    
    try:
        # Simuler un appel depuis le syst√®me principal
        from features.orderflow_analyzer import OrderFlowAnalyzer
        from config.automation_config import AutomationConfig
        
        config = AutomationConfig()
        analyzer = OrderFlowAnalyzer(config)
        
        # Donn√©es r√©alistes
        market_data = {
            'symbol': 'ES',
            'price': 4500.0,
            'volume': 1500,
            'delta': 0.7,
            'bid_volume': 800,
            'ask_volume': 700,
            'level2': {'bids': [], 'asks': []},
            'footprint': {'score': 0.6}
        }
        
        # Test d'int√©gration
        signal = analyzer.analyze_orderflow(market_data)
        
        if signal:
            print("‚úÖ Int√©gration syst√®me: R√âUSSIE")
            print(f"   Signal: {signal.signal_type}")
            print(f"   Confiance: {signal.confidence:.3f}")
            print(f"   Raisonnement: {signal.reasoning[:50]}...")
        else:
            print("‚ö†Ô∏è Int√©gration syst√®me: Aucun signal (normal)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur int√©gration: {e}")
        return False

def main():
    """Fonction principale"""
    success1 = test_wrappers_orderflow()
    success2 = test_integration_system()
    
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â FINAL")
    print("=" * 60)
    
    if success1 and success2:
        print("üéâ SUCC√àS COMPLET !")
        print("\n‚úÖ Le module orderflow_analyzer est maintenant :")
        print("   - 100% compatible avec les tests existants")
        print("   - Fonctionnel avec les wrappers synchrones")
        print("   - Int√©gr√© parfaitement dans le syst√®me")
        print("   - Pr√™t pour la production")
        
        print("\nüöÄ PROCHAINES √âTAPES :")
        print("   1. Relancer les tests automation_modules")
        print("   2. V√©rifier que tous les tests passent")
        print("   3. D√©ployer en production")
        
    else:
        print("‚ùå Certains tests ont √©chou√©")
        print("   V√©rification n√©cessaire")

if __name__ == "__main__":
    main()



