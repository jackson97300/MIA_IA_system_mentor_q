#!/usr/bin/env python3
"""
Test Donn√©es Disponibles - MIA_IA_SYSTEM
========================================
Test avec les donn√©es ES Futures disponibles.
"""

import asyncio
import time
from ib_insync import IB, Future, Stock

def test_available_data():
    """Test avec donn√©es disponibles"""
    print("üöÄ TEST DONN√âES DISPONIBLES")
    print("=" * 50)
    
    # Connexion TWS Real
    ib = IB()
    
    try:
        print("1Ô∏è‚É£ Connexion TWS Real...")
        ib.connect('127.0.0.1', 7496, clientId=2)  # Client ID diff√©rent
        print("‚úÖ Connexion TWS Real OK")
        
        # 2. Test ES Futures (d√©j√† confirm√© fonctionnel)
        print("\n2Ô∏è‚É£ Test ES Futures...")
        es_contract = Future('ES', '202412', 'CME')
        ib.qualifyContracts(es_contract)
        es_ticker = ib.reqMktData(es_contract)
        
        print("   ‚è≥ Attente donn√©es ES...")
        time.sleep(3)
        
        if es_ticker.marketPrice():
            print(f"‚úÖ Prix ES: {es_ticker.marketPrice()}")
        else:
            print("‚ùå Pas de prix ES")
            
        if es_ticker.bid:
            print(f"‚úÖ Bid ES: {es_ticker.bid}")
        else:
            print("‚ùå Pas de bid ES")
            
        if es_ticker.ask:
            print(f"‚úÖ Ask ES: {es_ticker.ask}")
        else:
            print("‚ùå Pas de ask ES")
        
        # 3. Test Account Info
        print("\n3Ô∏è‚É£ Test Account Info...")
        account_info = ib.accountSummary()
        
        if account_info:
            print("‚úÖ Account Info r√©cup√©r√©")
            for info in account_info:
                if info.tag == 'NetLiquidation':
                    print(f"   Balance: ${info.value}")
                    break
        else:
            print("‚ùå Pas d'account info")
        
        # 4. R√©sum√©
        print("\n4Ô∏è‚É£ R√âSUM√â SYST√àME")
        print("=" * 30)
        
        es_data_available = (es_ticker.marketPrice() or es_ticker.bid or es_ticker.ask)
        
        if es_data_available:
            print("‚úÖ ES Futures: FONCTIONNEL")
            print("‚úÖ Account Info: FONCTIONNEL")
            print("üéâ VOTRE SYST√àME PEUT FONCTIONNER !")
            print("\nüí° Pour SPX Options, souscrivez aux bundles API")
        else:
            print("‚ùå Probl√®me avec ES Futures")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        print("\n5Ô∏è‚É£ D√©connexion...")
        ib.disconnect()
        print("‚úÖ D√©connexion propre")

if __name__ == "__main__":
    try:
        test_available_data()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrompu")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()


