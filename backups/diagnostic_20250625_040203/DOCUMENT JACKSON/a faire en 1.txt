üî• TOP 5 FICHIERS CRITIQUES (Ordre strict)
1Ô∏è‚É£ config/automation_config.py (Priorit√© ABSOLUE)
python# POURQUOI EN PREMIER :
# - Foundation de tout le syst√®me
# - Aucune d√©pendance locale
# - Tous les autres fichiers en d√©pendent
# - Configuration centralis√©e s√©curis√©e

# CONTENU (~150 lignes) :
@dataclass
class AutomationConfig:
    # Trading parameters
    enable_live_trading: bool = False
    max_position_size: int = 2
    daily_loss_limit: float = 500.0
    
    # Risk management
    emergency_stop_enabled: bool = True
    max_drawdown_percent: float = 15.0
    
    # Data collection
    enable_detailed_snapshots: bool = True
    snapshot_frequency: str = "every_trade"
2Ô∏è‚É£ execution/simple_trader.py (Core automation)
python# POURQUOI EN DEUXI√àME :
# - Core du syst√®me automation
# - D√©pend seulement de automation_config + vos modules existants
# - Orchestrateur principal de votre Battle Navale
# - Base pour tous les autres composants

# CONTENU (~400 lignes) :
class SimpleBattleNavaleTrader:
    def __init__(self, mode="PAPER"):
        self.config = get_automation_config()
        self.battle_detector = create_battle_navale_detector()
        # ... automation logic
    
    def run_trading_session(self):
        # Loop principal automation
3Ô∏è‚É£ execution/trade_snapshotter.py (Data collection)
python# POURQUOI EN TROISI√àME :
# - Utilis√© par simple_trader pour capturer donn√©es
# - D√©pend de automation_config + base_types
# - Critical pour Phase 3 (data = or pour ML)
# - Peut fonctionner ind√©pendamment pour tests

# CONTENU (~300 lignes) :
class TradeSnapshotter:
    def capture_complete_trade_cycle(self, market_data, signal, result):
        # Capture d√©taill√©e chaque trade
        
    def export_training_data(self):
        # Export pour ML futur
4Ô∏è‚É£ automation_main.py (Point d'entr√©e)
python# POURQUOI EN QUATRI√àME :
# - Point d'entr√©e principal syst√®me
# - Utilise simple_trader + snapshotter
# - Permet de tester les 3 premiers fichiers ensemble
# - Interface utilisateur du syst√®me

# CONTENU (~150 lignes) :
def main():
    trader = SimpleBattleNavaleTrader()
    trader.run_trading_session()

if __name__ == "__main__":
    main()
5Ô∏è‚É£ monitoring/live_monitor.py (Surveillance)
python# POURQUOI EN CINQUI√àME :
# - Surveillance temps r√©el du simple_trader
# - S√©curit√© et monitoring critique
# - D√©tecte probl√®mes automation
# - Alertes pr√©coces

# CONTENU (~300 lignes) :
class LiveMonitor:
    def __init__(self, trader: SimpleBattleNavaleTrader):
        self.trader = trader
        
    def monitor_system_health(self):
        # Surveillance continue syst√®me