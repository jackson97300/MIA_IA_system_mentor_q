#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Test TWS Paper Trading Final
Test avec TWS relanc√© en mode Paper Trading
"""

import asyncio
import time
from datetime import datetime

def test_tws_paper_connection():
    """Test connexion TWS Paper Trading"""
    print("üß™ Test TWS Paper Trading...")
    
    try:
        from ib_insync import IB, Contract, Stock
        
        # Configuration TWS Paper Trading
        ib = IB()
        
        print("üîó Connexion TWS Paper Trading...")
        print("   Host: 127.0.0.1")
        print("   Port: 7497 (TWS Paper)")
        print("   Client ID: 1")
        
        # Connexion avec timeout plus long
        ib.connect('127.0.0.1', 7497, clientId=1, timeout=30)
        
        if ib.isConnected():
            print("‚úÖ TWS Paper Trading connect√© !")
            
            # Test donn√©es ES
            print("\nüìä Test donn√©es ES...")
            try:
                # Cr√©er contrat ES
                contract = Contract(
                    symbol='ES',
                    secType='FUT',
                    exchange='CME',
                    currency='USD'
                )
                
                # R√©cup√©rer donn√©es
                ib.reqMktData(contract)
                time.sleep(2)  # Attendre donn√©es
                
                ticker = ib.ticker(contract)
                if ticker and ticker.marketPrice():
                    print(f"‚úÖ ES Prix: {ticker.marketPrice()}")
                    print(f"   Bid: {ticker.bid}")
                    print(f"   Ask: {ticker.ask}")
                    print(f"   Volume: {ticker.volume}")
                else:
                    print("‚ö†Ô∏è Pas de donn√©es ES disponibles")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur donn√©es ES: {e}")
            
            # Test positions
            print("\nüíº Test positions...")
            try:
                positions = ib.positions()
                print(f"‚úÖ Positions: {len(positions)} trouv√©es")
                for pos in positions:
                    print(f"   {pos.contract.symbol}: {pos.position}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur positions: {e}")
            
            # Test compte
            print("\nüè¶ Test compte...")
            try:
                account = ib.accountSummary()
                print(f"‚úÖ Compte: {len(account)} √©l√©ments")
                for item in account:
                    if 'NetLiquidation' in item.tag:
                        print(f"   NetLiquidation: {item.value}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur compte: {e}")
            
            # D√©connexion
            ib.disconnect()
            print("\n‚úÖ Test TWS Paper Trading termin√©")
            return True
            
        else:
            print("‚ùå √âchec connexion TWS Paper Trading")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur TWS: {e}")
        return False

def test_ib_gateway_paper():
    """Test IB Gateway Paper Trading"""
    print("\nüß™ Test IB Gateway Paper Trading...")
    
    try:
        from ib_insync import IB, Contract
        
        # Configuration IB Gateway Paper
        ib = IB()
        
        print("üîó Connexion IB Gateway Paper...")
        print("   Host: 127.0.0.1")
        print("   Port: 4002 (IB Gateway Paper)")
        print("   Client ID: 2")
        
        # Connexion
        ib.connect('127.0.0.1', 4002, clientId=2, timeout=30)
        
        if ib.isConnected():
            print("‚úÖ IB Gateway Paper connect√© !")
            
            # Test donn√©es ES
            print("\nüìä Test donn√©es ES...")
            try:
                contract = Contract(
                    symbol='ES',
                    secType='FUT',
                    exchange='CME',
                    currency='USD'
                )
                
                ib.reqMktData(contract)
                time.sleep(2)
                
                ticker = ib.ticker(contract)
                if ticker and ticker.marketPrice():
                    print(f"‚úÖ ES Prix: {ticker.marketPrice()}")
                else:
                    print("‚ö†Ô∏è Pas de donn√©es ES")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur donn√©es ES: {e}")
            
            ib.disconnect()
            print("‚úÖ Test IB Gateway Paper termin√©")
            return True
            
        else:
            print("‚ùå √âchec connexion IB Gateway Paper")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur IB Gateway: {e}")
        return False

def main():
    """Test principal"""
    print("üöÄ MIA_IA_SYSTEM - Test Connexions IBKR")
    print("=" * 50)
    
    # Test TWS Paper
    tws_success = test_tws_paper_connection()
    
    # Test IB Gateway Paper
    gateway_success = test_ib_gateway_paper()
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìã R√âSUM√â DES TESTS")
    print("=" * 50)
    print(f"TWS Paper Trading: {'‚úÖ SUCC√àS' if tws_success else '‚ùå √âCHEC'}")
    print(f"IB Gateway Paper: {'‚úÖ SUCC√àS' if gateway_success else '‚ùå √âCHEC'}")
    
    if tws_success or gateway_success:
        print("\nüéâ Au moins une connexion fonctionne !")
        if tws_success:
            print("üí° Recommandation: Utiliser TWS Paper Trading")
        else:
            print("üí° Recommandation: Utiliser IB Gateway Paper")
    else:
        print("\n‚ö†Ô∏è Aucune connexion ne fonctionne")
        print("üîß V√©rifiez que TWS/IB Gateway est bien lanc√©")

if __name__ == "__main__":
    main()
















