#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Test Imports Rapide
Validation imports strategies apr√®s correction
"""

import sys
from pathlib import Path

def test_critical_imports():
    """Test des imports critiques qui causaient l'erreur"""
    
    print("üîç TESTING CRITICAL IMPORTS")
    print("="*40)
    
    errors = []
    
    # 1. Test import strategies package
    try:
        import strategies
        print("‚úÖ strategies package imported")
    except ImportError as e:
        errors.append(f"strategies package: {e}")
        print(f"‚ùå strategies package: {e}")
    
    # 2. Test factory functions critiques
    critical_functions = [
        'create_trend_strategy',
        'create_range_strategy', 
        'create_strategy_selector'
    ]
    
    for func_name in critical_functions:
        try:
            from strategies import *
            func = globals().get(func_name)
            if func:
                print(f"‚úÖ {func_name} imported successfully")
            else:
                errors.append(f"{func_name}: not found in globals")
                print(f"‚ùå {func_name}: not found in globals")
        except ImportError as e:
            errors.append(f"{func_name}: {e}")
            print(f"‚ùå {func_name}: {e}")
    
    # 3. Test import direct depuis le module
    try:
        from strategies import (
            StrategyOrchestrator, TrendStrategy, RangeStrategy,
            create_trend_strategy, create_range_strategy
        )
        print("‚úÖ All main imports successful")
    except ImportError as e:
        errors.append(f"Main imports: {e}")
        print(f"‚ùå Main imports: {e}")
    
    # 4. Test __all__ exports
    try:
        import strategies
        all_exports = getattr(strategies, '__all__', [])
        print(f"üìã __all__ exports count: {len(all_exports)}")
        
        missing_in_all = []
        for func in critical_functions:
            if func not in all_exports:
                missing_in_all.append(func)
        
        if missing_in_all:
            errors.append(f"Missing in __all__: {missing_in_all}")
            print(f"‚ùå Missing in __all__: {missing_in_all}")
        else:
            print("‚úÖ All critical functions in __all__")
            
    except Exception as e:
        errors.append(f"__all__ check: {e}")
        print(f"‚ùå __all__ check: {e}")
    
    # 5. Test instantiation rapide
    try:
        from strategies import create_trend_strategy
        trend_strategy = create_trend_strategy()
        print("‚úÖ create_trend_strategy() instantiation successful")
    except Exception as e:
        errors.append(f"Instantiation: {e}")
        print(f"‚ùå Instantiation: {e}")
    
    return len(errors) == 0, errors

def main():
    print("üöÄ MIA_IA_SYSTEM - Import Validation")
    print("="*50)
    
    # Nettoyer cache modules
    modules_to_clean = [k for k in sys.modules.keys() if k.startswith('strategies')]
    for mod in modules_to_clean:
        del sys.modules[mod]
    print("üßπ Module cache cleaned")
    
    success, errors = test_critical_imports()
    
    print(f"\n{'='*50}")
    if success:
        print("üéâ TOUS LES IMPORTS R√âUSSIS!")
        print("‚úÖ Vous pouvez relancer: python test_phase2_integration.py")
    else:
        print("‚ùå ERREURS D√âTECT√âES:")
        for error in errors:
            print(f"   ‚Ä¢ {error}")
        print("\nüí° SOLUTIONS POSSIBLES:")
        print("1. V√©rifier que strategies/__init__.py contient les factory functions")
        print("2. V√©rifier que create_trend_strategy est dans __all__")
        print("3. V√©rifier la syntaxe Python dans les fichiers strategies/")
    
    return success

if __name__ == "__main__":
    main()