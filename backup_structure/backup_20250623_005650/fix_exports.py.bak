#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Fix Missing Exports
Correction des exports manquants dans strategies/__init__.py
"""

import shutil
from pathlib import Path

def check_test_imports():
    """V√©rifie quoi test_phase2_integration.py essaie d'importer"""
    
    print("üîç ANALYSE DES IMPORTS DEMAND√âS")
    print("="*45)
    
    test_path = Path("test_phase2_integration.py")
    
    if not test_path.exists():
        print("‚ùå test_phase2_integration.py non trouv√©")
        return []
    
    with open(test_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Chercher les imports depuis strategies
    lines = content.split('\n')
    imports_needed = []
    
    in_strategies_import = False
    for line in lines:
        line = line.strip()
        
        if line.startswith('from strategies import ('):
            in_strategies_import = True
            # Extraire le premier import si sur la m√™me ligne
            if ')' in line:
                import_part = line.split('(')[1].split(')')[0]
                imports_needed.extend([imp.strip() for imp in import_part.split(',') if imp.strip()])
                in_strategies_import = False
            continue
        
        if in_strategies_import:
            if ')' in line:
                # Fin de l'import multi-ligne
                import_part = line.split(')')[0]
                imports_needed.extend([imp.strip() for imp in import_part.split(',') if imp.strip()])
                in_strategies_import = False
            else:
                # Ligne d'import continue
                imports_needed.extend([imp.strip() for imp in line.split(',') if imp.strip()])
    
    print("üìã IMPORTS DEMAND√âS PAR test_phase2_integration.py:")
    for imp in imports_needed:
        print(f"   ‚Ä¢ {imp}")
    
    return imports_needed

def check_available_exports():
    """V√©rifie ce qui est disponible dans strategies/__init__.py"""
    
    print(f"\nüîç EXPORTS ACTUELS dans strategies/__init__.py")
    print("="*50)
    
    init_path = Path("strategies/__init__.py")
    
    if not init_path.exists():
        print("‚ùå strategies/__init__.py non trouv√©")
        return []
    
    with open(init_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Extraire __all__
    if '__all__' in content:
        try:
            start = content.find('__all__ = [')
            if start != -1:
                end = content.find(']', start)
                all_content = content[start:end+1]
                
                # Parser grossi√®rement __all__
                exports = []
                for line in all_content.split('\n'):
                    if "'" in line or '"' in line:
                        # Extraire noms entre quotes
                        import re
                        matches = re.findall(r"['\"]([^'\"]+)['\"]", line)
                        exports.extend(matches)
                
                print("üìã EXPORTS ACTUELS:")
                for exp in exports:
                    print(f"   ‚Ä¢ {exp}")
                
                return exports
        except:
            pass
    
    print("‚ùå Impossible de parser __all__")
    return []

def find_missing_exports(needed, available):
    """Trouve les exports manquants"""
    
    missing = []
    for item in needed:
        if item not in available:
            missing.append(item)
    
    if missing:
        print(f"\n‚ùå EXPORTS MANQUANTS:")
        for item in missing:
            print(f"   ‚Ä¢ {item}")
    else:
        print(f"\n‚úÖ Tous les exports n√©cessaires sont pr√©sents")
    
    return missing

def fix_exports():
    """Corrige les exports manquants"""
    
    print(f"\nüîß CORRECTION DES EXPORTS")
    print("="*35)
    
    init_path = Path("strategies/__init__.py")
    
    # Backup
    backup_path = Path("strategies/__init__.py.backup_exports")
    shutil.copy2(init_path, backup_path)
    print(f"‚úÖ Backup cr√©√©: {backup_path}")
    
    # Contenu corrig√© avec tous les exports n√©cessaires
    corrected_content = '''"""
MIA_IA_SYSTEM - Strategies Package
Version: All Exports Fixed
"""

import time
import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional, Any, Union
from dataclasses import dataclass
from enum import Enum
import logging

# Local imports de base
from core.base_types import (
    MarketData, OrderFlowData, TradingSignal, SignalType,
    ES_TICK_SIZE
)
from features.feature_calculator import (
    FeatureCalculationResult, FeatureCalculator, SignalQuality
)

# Strategy imports DIRECTS
from .trend_strategy import (
    TrendStrategy, TrendSignalData, TrendSignalType, 
    create_trend_strategy, analyze_trend_opportunity
)
from .range_strategy import (
    RangeStrategy, RangeSignalData, RangeSignalType, 
    create_range_strategy, analyze_range_opportunity
)

# Market regime
from features.market_regime import (
    MarketRegimeDetector, MarketRegimeData, MarketRegime as RegimeType,
    analyze_market_regime
)

logger = logging.getLogger(__name__)

# === FACTORY FUNCTIONS SAFE ===

def create_strategy_selector(config: Optional[Dict[str, Any]] = None):
    """Factory avec import LOCAL pour √©viter cycle"""
    from .strategy_selector import StrategySelector
    return StrategySelector(config)

def create_strategy_orchestrator(config: Optional[Dict[str, Any]] = None):
    """Factory function orchestrateur"""
    return create_strategy_selector(config)

def analyze_complete_trading_opportunity(
    market_data: MarketData,
    order_flow: Optional[OrderFlowData] = None,
    options_data: Optional[Dict[str, Any]] = None,
    structure_data: Optional[Dict[str, Any]] = None,
    es_nq_data: Optional[Dict[str, float]] = None,
    sierra_patterns: Optional[Dict[str, float]] = None,
    orchestrator = None
) -> Optional[Any]:
    """FONCTION PRINCIPALE avec imports locaux"""
    
    if orchestrator is None:
        orchestrator = create_strategy_selector()
    
    # Import LOCAL pour √©viter cycle
    from .strategy_selector import TradingContext, ExecutionMode
    
    trading_context = TradingContext(
        timestamp=market_data.timestamp,
        market_data=market_data,
        es_nq_data=es_nq_data,
        structure_data=structure_data,
        sierra_patterns=sierra_patterns,
        execution_mode=ExecutionMode.PAPER_TRADING
    )
    
    return orchestrator.analyze_and_select(trading_context)

# === EXPORTS VIA GETATTR POUR √âVITER IMPORT CIRCULAIRE ===

def __getattr__(name):
    """Dynamic import pour √©viter cycles"""
    
    # Classes depuis strategy_selector
    selector_classes = [
        'StrategySelector', 'StrategySelectionResult', 'TradingContext', 
        'SystemPerformance', 'StrategyType', 'SignalDecision', 'ExecutionMode'
    ]
    
    if name in selector_classes:
        from .strategy_selector import globals as selector_globals
        return getattr(selector_globals(), name, None)
    
    # Fallback pour autres noms
    raise AttributeError(f"module 'strategies' has no attribute '{name}'")

# Package exports COMPLETS
__all__ = [
    # Core strategy classes
    'TrendStrategy',
    'RangeStrategy', 
    
    # Data classes
    'TrendSignalData',
    'RangeSignalData', 
    
    # Enums
    'TrendSignalType',
    'RangeSignalType',
    
    # Factory functions ‚úÖ
    'create_trend_strategy',        # ‚úÖ WORKING
    'create_range_strategy',        # ‚úÖ WORKING
    'create_strategy_selector',     # ‚úÖ WORKING
    'create_strategy_orchestrator', # ‚úÖ WORKING
    
    # Analysis functions
    'analyze_trend_opportunity',
    'analyze_range_opportunity', 
    'analyze_market_regime',
    'analyze_complete_trading_opportunity',
    
    # Market regime
    'MarketRegimeDetector',
    'MarketRegimeData',
    
    # Strategy Selector classes (via __getattr__)
    'StrategySelector',
    'StrategySelectionResult', 
    'TradingContext',           # ‚úÖ NEEDED BY TEST
    'SystemPerformance',
    'StrategyType',
    'SignalDecision', 
    'ExecutionMode',
]

def get_package_info() -> dict:
    """Information du package"""
    return {
        'version': '2.0.4',
        'status': 'ALL_EXPORTS_AVAILABLE',
        'exports_count': len(__all__),
        'dynamic_imports': True
    }
'''
    
    # √âcrire version corrig√©e
    with open(init_path, 'w', encoding='utf-8') as f:
        f.write(corrected_content)
    
    print("‚úÖ strategies/__init__.py corrig√© avec tous les exports")
    return True

def test_all_imports():
    """Test de tous les imports n√©cessaires"""
    
    print(f"\nüîç TEST DE TOUS LES IMPORTS")
    print("="*40)
    
    try:
        # Nettoyer cache
        import sys
        modules_to_clean = [k for k in sys.modules.keys() if k.startswith('strategies')]
        for mod in modules_to_clean:
            del sys.modules[mod]
        print("üßπ Cache nettoy√©")
        
        # Test imports basiques
        from strategies import create_trend_strategy, create_range_strategy
        print("‚úÖ Factory functions OK")
        
        # Test classes probl√©matiques
        from strategies import TradingContext, StrategySelector
        print("‚úÖ TradingContext et StrategySelector OK")
        
        # Test StrategyOrchestrator
        from strategies import StrategyOrchestrator
        print("‚úÖ StrategyOrchestrator OK")
        
        # Test instantiation
        strategy = create_trend_strategy()
        print("‚úÖ Instantiation trend strategy OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Diagnostic et correction complets"""
    
    print("üéØ FIX: cannot import name 'TradingContext' from 'strategies'")
    print("="*65)
    
    # 1. Analyser ce qui est demand√©
    needed = check_test_imports()
    
    # 2. Analyser ce qui est disponible
    available = check_available_exports()
    
    # 3. Trouver ce qui manque
    missing = find_missing_exports(needed, available)
    
    if missing:
        # 4. Corriger les exports
        fix_exports()
        
        # 5. Tester
        if test_all_imports():
            print(f"\nüéâ TOUS LES IMPORTS R√âSOLUS!")
            print("‚úÖ TradingContext maintenant disponible")
            print("‚úÖ Tous les exports n√©cessaires ajout√©s")
            print()
            print("üöÄ RELANCEZ:")
            print("   python test_phase2_integration.py")
        else:
            print(f"\n‚ö†Ô∏è Probl√®mes persistants")
    else:
        print(f"\nü§î Exports semblent OK, probl√®me ailleurs")

if __name__ == "__main__":
    main()