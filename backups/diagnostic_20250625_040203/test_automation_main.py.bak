#!/usr/bin/env python3
"""
Test Automation Main - Validation syst√®me automation complet
Teste la nouvelle version automation_main.py avec SignalGenerator int√©gr√©
"""

import sys
import asyncio
import time
import pandas as pd
from pathlib import Path
from datetime import datetime, timedelta
import subprocess
import signal
import os

print("üß™ TEST AUTOMATION_MAIN.PY INT√âGR√â")
print("=" * 50)

current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

def test_automation_imports():
    """Test imports automation_main.py"""
    print("\n1Ô∏è‚É£ TEST IMPORTS AUTOMATION")
    print("-" * 30)
    
    import_results = {}
    
    # Test import automation_main
    try:
        # Import en tant que module
        sys.path.insert(0, str(current_dir))
        import automation_main
        import_results['automation_main'] = True
        print("‚úÖ automation_main.py: Import r√©ussi")
    except Exception as e:
        import_results['automation_main'] = False
        print(f"‚ùå automation_main.py: {e}")
    
    # Test imports critiques dans automation_main
    try:
        from automation_main import MIAAutomationBot, create_config_from_args
        import_results['automation_classes'] = True
        print("‚úÖ Classes automation: MIAAutomationBot, create_config_from_args")
    except Exception as e:
        import_results['automation_classes'] = False
        print(f"‚ùå Classes automation: {e}")
    
    # Test d√©pendances SignalGenerator
    try:
        from strategies import get_signal_now, SignalGenerator, SignalDecision
        import_results['signal_generator'] = True
        print("‚úÖ SignalGenerator: Disponible dans automation")
    except Exception as e:
        import_results['signal_generator'] = False
        print(f"‚ùå SignalGenerator: {e}")
    
    # Test core types
    try:
        from core.base_types import MarketData, SignalType
        import_results['core_types'] = True
        print("‚úÖ Core types: Disponibles")
    except Exception as e:
        import_results['core_types'] = False
        print(f"‚ùå Core types: {e}")
    
    success_rate = sum(import_results.values()) / len(import_results) * 100
    print(f"\nüìä Imports r√©ussis: {sum(import_results.values())}/{len(import_results)} ({success_rate:.1f}%)")
    
    return import_results, success_rate >= 75

def test_automation_bot_creation():
    """Test cr√©ation MIAAutomationBot"""
    print("\n2Ô∏è‚É£ TEST CR√âATION AUTOMATION BOT")
    print("-" * 35)
    
    try:
        from automation_main import MIAAutomationBot, DEFAULT_CONFIG
        
        # Test cr√©ation simulation mode
        bot = MIAAutomationBot(mode="simulation", config=DEFAULT_CONFIG)
        print("‚úÖ MIAAutomationBot cr√©√© (mode simulation)")
        
        # V√©rifier composants critiques
        if hasattr(bot, 'signal_generator'):
            print("‚úÖ SignalGenerator int√©gr√©")
        else:
            print("‚ùå SignalGenerator manquant")
            return False
        
        # V√©rifier configuration
        if bot.config and 'min_signal_confidence' in bot.config:
            print(f"‚úÖ Configuration: min_confidence = {bot.config['min_signal_confidence']}")
        else:
            print("‚ö†Ô∏è Configuration incompl√®te")
        
        # Test session stats
        if hasattr(bot, 'session_stats'):
            print("‚úÖ Session stats initialis√©es")
        else:
            print("‚ùå Session stats manquantes")
            return False
        
        return True, bot
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation bot: {e}")
        import traceback
        traceback.print_exc()
        return False, None

def test_signal_generation_integration():
    """Test int√©gration g√©n√©ration signaux"""
    print("\n3Ô∏è‚É£ TEST INT√âGRATION G√âN√âRATION SIGNAUX")
    print("-" * 40)
    
    try:
        from automation_main import MIAAutomationBot
        from core.base_types import MarketData
        
        # Cr√©er bot
        bot = MIAAutomationBot(mode="simulation")
        
        # Donn√©es test
        test_data = MarketData(
            timestamp=pd.Timestamp.now(),
            symbol="ES",
            open=4500.0,
            high=4505.0,
            low=4495.0,
            close=4502.0,
            volume=1000
        )
        
        print(f"üìä Test avec: ES {test_data.close} (Vol: {test_data.volume})")
        
        # Test g√©n√©ration signal via bot
        start_time = time.perf_counter()
        signal = bot.signal_generator.generate_signal(test_data)
        generation_time = (time.perf_counter() - start_time) * 1000
        
        print(f"‚ö° Signal g√©n√©r√© en {generation_time:.2f}ms")
        print(f"üìà D√©cision: {signal.decision.value}")
        print(f"üí™ Confiance: {signal.confidence:.3f}")
        print(f"üèÜ Qualit√©: {signal.quality_level.value}")
        print(f"üéØ Type: {signal.signal_type.value}")
        
        # Validation signal
        is_valid = (
            signal.entry_price > 0 and
            0 <= signal.confidence <= 1 and
            signal.quality_level is not None and
            signal.decision is not None
        )
        
        if is_valid:
            print("‚úÖ Signal structurellement valide")
        else:
            print("‚ùå Signal invalide")
            return False
        
        # Test performance
        performance_ok = generation_time < 20  # <20ms acceptable
        if performance_ok:
            print(f"üöÄ Performance OK: {generation_time:.2f}ms < 20ms")
        else:
            print(f"‚ö†Ô∏è Performance lente: {generation_time:.2f}ms")
        
        return True, signal, generation_time
        
    except Exception as e:
        print(f"‚ùå Erreur test int√©gration: {e}")
        import traceback
        traceback.print_exc()
        return False, None, 999

async def test_automation_workflow():
    """Test workflow automation complet"""
    print("\n4Ô∏è‚É£ TEST WORKFLOW AUTOMATION")
    print("-" * 32)
    
    try:
        from automation_main import MIAAutomationBot
        
        # Cr√©er bot avec timeout court
        bot = MIAAutomationBot(mode="simulation")
        
        print("üéÆ Test workflow simulation (10 secondes)...")
        
        # Cr√©er task avec timeout
        workflow_task = asyncio.create_task(
            bot.start_automation(duration_hours=0.003)  # ~10 secondes
        )
        
        # Attendre avec timeout
        try:
            result = await asyncio.wait_for(workflow_task, timeout=15)
            
            if result:
                print("‚úÖ Workflow automation termin√© avec succ√®s")
                
                # V√©rifier stats
                stats = bot.session_stats
                print(f"üìä Stats session:")
                print(f"   ‚îî‚îÄ Signaux g√©n√©r√©s: {stats['signals_generated']}")
                print(f"   ‚îî‚îÄ Signaux ex√©cut√©s: {stats['signals_executed']}")
                
                if stats['signals_generated'] > 0:
                    execution_rate = (stats['signals_executed'] / stats['signals_generated']) * 100
                    print(f"   ‚îî‚îÄ Taux ex√©cution: {execution_rate:.1f}%")
                
                return True, stats
            else:
                print("‚ö†Ô∏è Workflow termin√© avec avertissements")
                return False, {}
                
        except asyncio.TimeoutError:
            print("‚è∞ Timeout workflow (normal pour test)")
            # Arr√™ter bot
            bot.is_running = False
            return True, bot.session_stats  # Timeout acceptable pour test
            
    except Exception as e:
        print(f"‚ùå Erreur workflow: {e}")
        import traceback
        traceback.print_exc()
        return False, {}

def test_cli_interface():
    """Test interface CLI"""
    print("\n5Ô∏è‚É£ TEST INTERFACE CLI")
    print("-" * 22)
    
    try:
        from automation_main import parse_arguments, create_config_from_args
        
        # Test parsing arguments par d√©faut
        import sys
        original_argv = sys.argv
        
        # Test arguments simulation
        sys.argv = ['automation_main.py', '--mode', 'simulation', '--config', 'conservative']
        args = parse_arguments()
        
        print(f"‚úÖ Arguments pars√©s: mode={args.mode}, config={args.config}")
        
        # Test cr√©ation config
        config = create_config_from_args(args)
        
        if config and 'min_signal_confidence' in config:
            print(f"‚úÖ Config cr√©√©e: confidence={config['min_signal_confidence']}")
        else:
            print("‚ùå Config cr√©ation √©chou√©e")
            return False
        
        # Test config conservative
        if args.config == 'conservative':
            expected_confidence = 0.80
            if config.get('min_signal_confidence') == expected_confidence:
                print(f"‚úÖ Config conservative: {expected_confidence}")
            else:
                print(f"‚ö†Ô∏è Config conservative incorrecte: {config.get('min_signal_confidence')} != {expected_confidence}")
        
        # Restaurer argv
        sys.argv = original_argv
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test CLI: {e}")
        return False

def test_status_command():
    """Test commande status"""
    print("\n6Ô∏è‚É£ TEST COMMANDE STATUS")
    print("-" * 25)
    
    try:
        # Test status function
        from automation_main import show_status
        
        print("üìä Test fonction show_status():")
        show_status()
        
        print("\n‚úÖ Commande status fonctionnelle")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test status: {e}")
        return False

def test_performance_metrics():
    """Test m√©triques performance"""
    print("\n7Ô∏è‚É£ TEST M√âTRIQUES PERFORMANCE")
    print("-" * 32)
    
    try:
        from automation_main import MIAAutomationBot
        from core.base_types import MarketData
        
        bot = MIAAutomationBot(mode="simulation")
        
        # Test g√©n√©ration multiple signaux
        generation_times = []
        signal_qualities = []
        
        print("üîÑ Test 10 g√©n√©rations signaux...")
        
        for i in range(10):
            # Donn√©es variables
            test_data = MarketData(
                timestamp=pd.Timestamp.now() + pd.Timedelta(seconds=i),
                symbol="ES",
                open=4500 + i,
                high=4505 + i,
                low=4495 + i,
                close=4502 + i,
                volume=1000 + i * 50
            )
            
            # G√©n√©ration
            start_time = time.perf_counter()
            signal = bot.signal_generator.generate_signal(test_data)
            gen_time = (time.perf_counter() - start_time) * 1000
            
            generation_times.append(gen_time)
            signal_qualities.append(signal.quality_level.value)
            
            if i % 3 == 0:  # Log quelques r√©sultats
                print(f"   Signal {i+1}: {signal.decision.value} ({gen_time:.2f}ms, {signal.quality_level.value})")
        
        # Statistiques
        import statistics
        avg_time = statistics.mean(generation_times)
        max_time = max(generation_times)
        min_time = min(generation_times)
        
        print(f"\nüìä M√âTRIQUES PERFORMANCE:")
        print(f"   ‚îî‚îÄ Temps moyen: {avg_time:.2f}ms")
        print(f"   ‚îî‚îÄ Temps min: {min_time:.2f}ms")
        print(f"   ‚îî‚îÄ Temps max: {max_time:.2f}ms")
        
        # Distribution qualit√©
        from collections import Counter
        quality_dist = Counter(signal_qualities)
        print(f"   ‚îî‚îÄ Distribution qualit√©: {dict(quality_dist)}")
        
        # √âvaluation
        performance_excellent = avg_time < 5
        performance_good = avg_time < 10
        
        if performance_excellent:
            print("üöÄ Performance EXCELLENTE: <5ms moyen")
            return True, "excellent"
        elif performance_good:
            print("‚úÖ Performance BONNE: <10ms moyen")
            return True, "good"
        else:
            print("‚ö†Ô∏è Performance √Ä AM√âLIORER: >10ms moyen")
            return True, "needs_improvement"
            
    except Exception as e:
        print(f"‚ùå Erreur test performance: {e}")
        return False, "error"

def test_integration_completeness():
    """Test compl√©tude int√©gration"""
    print("\n8Ô∏è‚É£ TEST COMPL√âTUDE INT√âGRATION")
    print("-" * 35)
    
    integration_checks = []
    
    try:
        from automation_main import MIAAutomationBot
        
        bot = MIAAutomationBot(mode="simulation")
        
        # Check 1: SignalGenerator int√©gr√©
        has_signal_gen = hasattr(bot, 'signal_generator') and bot.signal_generator is not None
        integration_checks.append(("SignalGenerator", has_signal_gen))
        
        # Check 2: Configuration compl√®te
        has_config = bool(bot.config and len(bot.config) >= 10)
        integration_checks.append(("Configuration", has_config))
        
        # Check 3: Session stats
        has_stats = hasattr(bot, 'session_stats') and isinstance(bot.session_stats, dict)
        integration_checks.append(("Session Stats", has_stats))
        
        # Check 4: M√©thodes critiques
        critical_methods = ['start_automation', '_process_trading_signal', '_run_simulation_loop']
        has_methods = all(hasattr(bot, method) for method in critical_methods)
        integration_checks.append(("M√©thodes critiques", has_methods))
        
        # Check 5: Test fonctionnel complet
        try:
            # Test cr√©ation signal
            test_data = bot._create_test_market_data()
            signal = bot.signal_generator.generate_signal(test_data)
            functional_ok = signal is not None and hasattr(signal, 'decision')
        except:
            functional_ok = False
        
        integration_checks.append(("Test fonctionnel", functional_ok))
        
        # Affichage r√©sultats
        for check_name, passed in integration_checks:
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check_name}")
        
        # Score global
        success_count = sum(1 for _, passed in integration_checks if passed)
        total_checks = len(integration_checks)
        integration_score = (success_count / total_checks) * 100
        
        print(f"\nüìä Score int√©gration: {success_count}/{total_checks} ({integration_score:.1f}%)")
        
        return integration_score >= 80, integration_score
        
    except Exception as e:
        print(f"‚ùå Erreur test int√©gration: {e}")
        return False, 0

def generate_automation_test_report(test_results):
    """G√©n√®re rapport test automation"""
    print("\n" + "=" * 50)
    print("üìä RAPPORT FINAL TEST AUTOMATION_MAIN.PY")
    print("=" * 50)
    
    # Calcul scores
    total_tests = len(test_results)
    passed_tests = sum(1 for result in test_results.values() if result.get('success', False))
    success_rate = (passed_tests / total_tests) * 100
    
    print(f"\nüéØ R√âSULTATS PAR COMPOSANT:")
    for test_name, result in test_results.items():
        status = "‚úÖ" if result.get('success', False) else "‚ùå"
        description = result.get('description', 'Test ex√©cut√©')
        print(f"   {status} {test_name}: {description}")
    
    print(f"\nüìà SCORE GLOBAL: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
    
    # √âvaluation finale
    if success_rate >= 90:
        print("\nüéâ AUTOMATION PARFAITEMENT INT√âGR√âE!")
        print("   ‚îî‚îÄ automation_main.py utilise SignalGenerator")
        print("   ‚îî‚îÄ Workflow complet fonctionnel")
        print("   ‚îî‚îÄ Pr√™t pour d√©ploiement")
        verdict = "EXCELLENT"
    elif success_rate >= 75:
        print("\n‚úÖ AUTOMATION BIEN INT√âGR√âE!")
        print("   ‚îî‚îÄ Fonctionnalit√©s principales OK")
        print("   ‚îî‚îÄ Corrections mineures possibles")
        verdict = "GOOD"
    elif success_rate >= 60:
        print("\n‚ö†Ô∏è AUTOMATION PARTIELLEMENT INT√âGR√âE")
        print("   ‚îî‚îÄ Fonctionnalit√©s de base OK")
        print("   ‚îî‚îÄ Am√©liorations n√©cessaires")
        verdict = "ACCEPTABLE"
    else:
        print("\n‚ùå AUTOMATION N√âCESSITE CORRECTIONS")
        print("   ‚îî‚îÄ Probl√®mes majeurs d√©tect√©s")
        verdict = "NEEDS_WORK"
    
    # Recommandations
    print(f"\nüöÄ PROCHAINES √âTAPES:")
    if verdict == "EXCELLENT":
        print("   1. ‚úÖ Tester avec donn√©es r√©elles")
        print("   2. ‚úÖ D√©marrer paper trading")
        print("   3. ‚úÖ Configurer alertes monitoring")
    elif verdict in ["GOOD", "ACCEPTABLE"]:
        print("   1. üîß Corriger tests √©chou√©s")
        print("   2. ‚úÖ Re-tester automation")
        print("   3. ‚úÖ Valider performance")
    else:
        print("   1. üö® R√©viser automation_main.py")
        print("   2. üö® V√©rifier int√©gration SignalGenerator")
        print("   3. üö® Debug composants d√©faillants")
    
    return verdict, success_rate

async def main():
    """Test automation complet"""
    print("üöÄ Lancement test automation_main.py...")
    
    test_results = {}
    
    # Tests s√©quentiels
    print("\nüîÑ EX√âCUTION TESTS AUTOMATION...")
    
    # 1. Imports
    import_results, import_success = test_automation_imports()
    test_results['imports'] = {
        'success': import_success,
        'description': f"Imports automation ({sum(import_results.values())}/{len(import_results)})"
    }
    
    if not import_success:
        print("\nüö® ARR√äT: Imports critiques √©chou√©s")
        generate_automation_test_report(test_results)
        return False
    
    # 2. Cr√©ation bot
    creation_success, bot = test_automation_bot_creation()
    test_results['bot_creation'] = {
        'success': creation_success,
        'description': "Cr√©ation MIAAutomationBot"
    }
    
    # 3. Int√©gration signaux
    signal_success, signal, gen_time = test_signal_generation_integration()
    test_results['signal_integration'] = {
        'success': signal_success and gen_time < 50,
        'description': f"Int√©gration signaux ({gen_time:.1f}ms)" if signal_success else "Int√©gration signaux"
    }
    
    # 4. Workflow automation
    workflow_success, workflow_stats = await test_automation_workflow()
    test_results['workflow'] = {
        'success': workflow_success,
        'description': f"Workflow automation ({workflow_stats.get('signals_generated', 0)} signaux)"
    }
    
    # 5. Interface CLI
    cli_success = test_cli_interface()
    test_results['cli'] = {
        'success': cli_success,
        'description': "Interface CLI"
    }
    
    # 6. Status command
    status_success = test_status_command()
    test_results['status'] = {
        'success': status_success,
        'description': "Commande status"
    }
    
    # 7. Performance
    perf_success, perf_level = test_performance_metrics()
    test_results['performance'] = {
        'success': perf_success and perf_level in ['excellent', 'good'],
        'description': f"Performance ({perf_level})"
    }
    
    # 8. Int√©gration compl√®te
    integration_success, integration_score = test_integration_completeness()
    test_results['integration'] = {
        'success': integration_success,
        'description': f"Int√©gration compl√®te ({integration_score:.1f}%)"
    }
    
    # Rapport final
    verdict, success_rate = generate_automation_test_report(test_results)
    
    return verdict in ["EXCELLENT", "GOOD"]

if __name__ == "__main__":
    print("üß™ TEST AUTOMATION_MAIN.PY INT√âGR√â")
    print("Validation automation avec SignalGenerator")
    print("")
    
    try:
        success = asyncio.run(main())
        
        if success:
            print("\nüéâ AUTOMATION VALID√âE!")
            print("   ‚îî‚îÄ Pr√™t pour utilisation")
        else:
            print("\n‚ö†Ô∏è AUTOMATION PARTIELLEMENT VALID√âE")
            print("   ‚îî‚îÄ V√©rifiez les erreurs ci-dessus")
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrompu par utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur critique test: {e}")
    
    input("\nüìé Appuyez sur Entr√©e pour fermer...")