"""
Test des soft-caps dans confluence_analyzer.py
==============================================

Script de validation des soft-caps pour diff√©rents r√©gimes de march√©.
"""

import numpy as np
from features.confluence_analyzer import ConfluenceAnalyzer

def test_soft_caps():
    """Test complet des soft-caps"""
    print("üéØ TEST SOFT-CAPS CONFLUENCE ANALYZER")
    print("=" * 50)
    
    # Cr√©er l'analyseur
    analyzer = ConfluenceAnalyzer()
    
    # Test 1: Score neutre (pas de soft-caps)
    print("\n1. Test score neutre...")
    result = analyzer.calculate_elite_mtf_confluence({})
    print(f"   Score final: {result[0]:.3f}")
    print(f"   Soft-caps appliqu√©s: {result[1].get('soft_caps_applied', False)}")
    print(f"   Score brut: {result[1].get('raw_score', 'N/A')}")
    
    # Test 2: Simulation score extr√™me positif
    print("\n2. Test soft-caps avec score extr√™me...")
    
    # Cr√©er des donn√©es de test avec score extr√™me
    test_data = {
        'close': 4500.0,
        'high': 4510.0,
        'low': 4490.0,
        'volume': 1000000,
        'timestamp': '2025-01-01T10:00:00Z'
    }
    
    # Simuler un score extr√™me en modifiant temporairement la m√©thode
    original_method = analyzer.elite_mtf.calculate_elite_mtf_confluence
    
    def mock_extreme_score(market_data):
        # Retourner un score extr√™me pour tester les soft-caps
        return 1.5, {"raw_score": 1.5, "test": True}
    
    # Remplacer temporairement la m√©thode
    analyzer.elite_mtf.calculate_elite_mtf_confluence = mock_extreme_score
    
    try:
        result = analyzer.calculate_elite_mtf_confluence(test_data)
        print(f"   Score final: {result[0]:.3f}")
        print(f"   Soft-caps appliqu√©s: {result[1].get('soft_caps_applied', False)}")
        print(f"   Score brut: {result[1].get('raw_score', 'N/A')}")
        
        # V√©rifier que les soft-caps ont √©t√© appliqu√©s
        if result[1].get('soft_caps_applied', False):
            print("   ‚úÖ Soft-caps appliqu√©s correctement")
        else:
            print("   ‚ö†Ô∏è Soft-caps non appliqu√©s (score dans les limites)")
            
    finally:
        # Restaurer la m√©thode originale
        analyzer.elite_mtf.calculate_elite_mtf_confluence = original_method
    
    # Test 3: Test direct de la m√©thode _apply_soft_caps
    print("\n3. Test direct m√©thode _apply_soft_caps...")
    
    test_scores = [0.0, 0.5, 0.8, 1.0, 1.5, -0.5, -0.8, -1.0, -1.5]
    
    for score in test_scores:
        capped_score = analyzer.elite_mtf._apply_soft_caps(score, test_data)
        print(f"   Score {score:+.1f} ‚Üí {capped_score:+.3f}")
    
    print("\n‚úÖ Test soft-caps termin√© avec succ√®s!")
    return True

if __name__ == "__main__":
    test_soft_caps()


