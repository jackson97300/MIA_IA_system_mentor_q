#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Test Donn√©es R√©elles 10 Minutes
V√©rifie que MIA fonctionne avec les donn√©es r√©elles
"""

import os
import sys
import time
import json
import glob
from datetime import datetime, timedelta
import subprocess
import threading

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_donnees_reelles_10min():
    """Test de 10 minutes avec donn√©es r√©elles"""
    
    print("MIA_IA_SYSTEM - TEST DONN√âES R√âELLES 10 MINUTES")
    print("=" * 60)
    print("üîç Test syst√®me avec donn√©es r√©elles")
    print("‚è∞ Dur√©e: 10 minutes")
    print("üéØ Objectif: Confirmer donn√©es r√©elles + fonctionnement MIA")
    print("=" * 60)
    
    start_time = datetime.now()
    test_duration = timedelta(minutes=10)
    
    print(f"‚è∞ D√©but test: {start_time.strftime('%H:%M:%S')}")
    print(f"‚è∞ Fin pr√©vue: {(start_time + test_duration).strftime('%H:%M:%S')}")
    
    # Variables de suivi
    real_data_confirmations = 0
    mia_activities = 0
    trades_detected = 0
    signals_detected = 0
    connection_checks = 0
    price_checks = 0
    
    print("\nüìä MONITORING DONN√âES R√âELLES:")
    print("=" * 40)
    
    try:
        while datetime.now() < start_time + test_duration:
            current_time = datetime.now()
            elapsed = current_time - start_time
            remaining = test_duration - elapsed
            
            print(f"\n‚è∞ {current_time.strftime('%H:%M:%S')} | "
                  f"√âcoul√©: {elapsed.total_seconds():.0f}s | "
                  f"Reste: {remaining.total_seconds():.0f}s")
            
            # 1. V√âRIFIER CONFIGURATION DONN√âES R√âELLES
            print("üîç V√©rification configuration donn√©es r√©elles...")
            
            config_files = [
                "config/automation_config.py",
                "config/mia_ia_system_tws_paper_fixed.py", 
                "core/ibkr_connector.py",
                "data/market_data_feed.py"
            ]
            
            for config_file in config_files:
                if os.path.exists(config_file):
                    try:
                        with open(config_file, 'r', encoding='utf-8') as f:
                            content = f.read()
                            
                        # V√©rifier param√®tres critiques
                        checks = [
                            ("simulation_mode = False", "Mode simulation d√©sactiv√©"),
                            ("USE_REAL_DATA = True", "Donn√©es r√©elles activ√©es"),
                            ("FORCE_REAL_DATA = True", "For√ßage donn√©es r√©elles"),
                            ("DataSource.IBKR", "Source IBKR configur√©e"),
                            ("port: 7497", "Port TWS correct")
                        ]
                        
                        for check, description in checks:
                            if check in content:
                                print(f"   ‚úÖ {description}")
                                real_data_confirmations += 1
                            else:
                                print(f"   ‚ùå {description} - MANQUANT")
                    except Exception as e:
                        print(f"   ‚ùå Erreur lecture {config_file}: {e}")
            
            # 2. V√âRIFIER CONNEXION TWS
            print("\nüîå V√©rification connexion TWS...")
            try:
                # V√©rifier si TWS est connect√©
                result = subprocess.run(['netstat', '-an'], capture_output=True, text=True)
                if '127.0.0.1:7497' in result.stdout:
                    print("   ‚úÖ TWS connect√© sur port 7497")
                    connection_checks += 1
                else:
                    print("   ‚ùå TWS non connect√© sur port 7497")
            except Exception as e:
                print(f"   ‚ùå Erreur v√©rification TWS: {e}")
            
            # 3. ANALYSER LOGS R√âCENTS
            print("\nüìÑ Analyse logs r√©cents...")
            
            log_files = []
            for pattern in ["logs/*.log", "*.log"]:
                log_files.extend(glob.glob(pattern))
            
            for log_file in log_files:
                try:
                    with open(log_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                    
                    # Analyser les derni√®res lignes
                    recent_lines = lines[-50:] if len(lines) > 50 else lines
                    
                    for line in recent_lines:
                        line = line.strip()
                        
                        # V√©rifier donn√©es r√©elles
                        if "REAL_DATA" in line or "IBKR" in line or "TWS" in line:
                            if "connected" in line.lower() or "success" in line.lower():
                                print(f"   ‚úÖ Donn√©es r√©elles: {line[:80]}...")
                                real_data_confirmations += 1
                        
                        # V√©rifier activit√© MIA
                        if "MIA" in line or "TRADE" in line or "SIGNAL" in line:
                            print(f"   üéØ Activit√© MIA: {line[:80]}...")
                            mia_activities += 1
                            
                            if "TRADE" in line:
                                trades_detected += 1
                            if "SIGNAL" in line:
                                signals_detected += 1
                        
                        # V√©rifier prix ES
                        if "ES" in line and any(char.isdigit() for char in line):
                            if "648" in line or "649" in line:  # Prix ES actuel
                                print(f"   üí∞ Prix ES r√©el: {line[:80]}...")
                                price_checks += 1
                
                except Exception as e:
                    print(f"   ‚ùå Erreur lecture {log_file}: {e}")
            
            # 4. V√âRIFIER PROCESSUS MIA
            print("\nüîÑ V√©rification processus MIA...")
            try:
                result = subprocess.run(['tasklist'], capture_output=True, text=True)
                if 'python' in result.stdout.lower():
                    print("   ‚úÖ Processus Python actif")
                    mia_activities += 1
                else:
                    print("   ‚ùå Aucun processus Python d√©tect√©")
            except Exception as e:
                print(f"   ‚ùå Erreur v√©rification processus: {e}")
            
            # Attendre 30 secondes avant prochaine v√©rification
            time.sleep(30)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrompu par l'utilisateur")
    
    # R√âSULTATS FINAUX
    end_time = datetime.now()
    total_duration = end_time - start_time
    
    print("\n" + "=" * 60)
    print("üìä R√âSULTATS TEST DONN√âES R√âELLES")
    print("=" * 60)
    print(f"‚è∞ Dur√©e totale: {total_duration}")
    print(f"üîç Confirmations donn√©es r√©elles: {real_data_confirmations}")
    print(f"üîÑ Activit√©s MIA d√©tect√©es: {mia_activities}")
    print(f"üéØ Trades d√©tect√©s: {trades_detected}")
    print(f"üì° Signaux d√©tect√©s: {signals_detected}")
    print(f"üîå V√©rifications connexion: {connection_checks}")
    print(f"üí∞ V√©rifications prix: {price_checks}")
    
    # √âVALUATION
    print("\nüí° √âVALUATION:")
    if real_data_confirmations >= 10:
        print("   ‚úÖ Donn√©es r√©elles confirm√©es")
    else:
        print("   ‚ùå Donn√©es r√©elles insuffisantes")
    
    if mia_activities >= 5:
        print("   ‚úÖ MIA fonctionne correctement")
    else:
        print("   ‚ùå Activit√© MIA faible")
    
    if connection_checks >= 1:
        print("   ‚úÖ Connexion TWS stable")
    else:
        print("   ‚ùå Probl√®mes connexion TWS")
    
    if price_checks >= 1:
        print("   ‚úÖ Prix ES r√©els d√©tect√©s")
    else:
        print("   ‚ùå Prix ES non d√©tect√©s")
    
    print("\nüéØ RECOMMANDATION:")
    if real_data_confirmations >= 10 and mia_activities >= 5:
        print("   ‚úÖ Syst√®me pr√™t pour test 2h - Donn√©es r√©elles confirm√©es")
    else:
        print("   ‚ùå Probl√®mes d√©tect√©s - Correction n√©cessaire")
    
    print("=" * 60)

if __name__ == "__main__":
    test_donnees_reelles_10min()


