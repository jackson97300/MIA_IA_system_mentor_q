#!/usr/bin/env python3
"""
Test du cache avec des calculs plus r√©alistes
Simule des calculs plus co√ªteux pour mieux voir les b√©n√©fices du cache
"""

import time
import numpy as np
import pandas as pd
from typing import Dict, List
import sys
from pathlib import Path
import logging

# Configure logging
logger = logging.getLogger(__name__)


# Ajouter le dossier parent au path
sys.path.append(str(Path(__file__).parent))

# Import des composants
from core.base_types import MarketData
from features import create_feature_calculator

def create_complex_market_data(seed: int = 42) -> List[MarketData]:
    """Cr√©e une s√©rie de donn√©es de march√© plus complexes"""
    np.random.seed(seed)
    
    base_price = 4500.0
    data_list = []
    
    # Cr√©er 100 points de donn√©es
    for i in range(100):
        # Simuler mouvement de prix r√©aliste
        change = np.random.normal(0, 10)
        base_price += change
        
        high = base_price + abs(np.random.normal(0, 5))
        low = base_price - abs(np.random.normal(0, 5))
        
        data = MarketData(
            timestamp=pd.Timestamp.now() + pd.Timedelta(minutes=i),
            symbol="ES",
            open=base_price - np.random.uniform(-2, 2),
            high=high,
            low=low,
            close=base_price,
            volume=np.random.randint(1000, 5000),
            # Param√®tres optionnels de base
            bid=base_price - 0.25,
            ask=base_price + 0.25
        )
        data_list.append(data)
    
    return data_list

def simulate_heavy_calculation(calculator, market_data: MarketData) -> Dict:
    """Simule un calcul plus lourd en appelant plusieurs fois les features"""
    # Appeler plusieurs fois pour simuler un calcul complexe
    features = calculator.calculate_all_features(market_data)
    
    # Simuler des calculs suppl√©mentaires
    time.sleep(0.001)  # 1ms de calcul simul√©
    
    return features

def main():
    logger.info("üß™ TEST CACHE AVEC CALCULS R√âALISTES")
    print("=" * 50)
    
    # Cr√©er calculator avec cache
    calculator = create_feature_calculator(
        optimized=True,
        cache_config={
            'cache_ttl': 300,  # 5 minutes
            'cache_size': 1000  # 1000 entr√©es
        }
    )
    
    # Cr√©er donn√©es de test
    logger.info("üìä Cr√©ation de 100 points de donn√©es...")
    data_list = create_complex_market_data()
    
    # Test 1: Premier passage (tout en cache miss)
    logger.info("\nüîÑ Test 1: Premier passage (cache miss)")
    start = time.time()
    results_first = []
    
    for i, data in enumerate(data_list[:20]):  # Tester avec 20 points
        result = simulate_heavy_calculation(calculator, data)
        results_first.append(result)
        
        if i % 5 == 0:
            logger.info("  Trait√© {i+1}/20 points...")
    
    time_first = time.time() - start
    logger.info("‚è±Ô∏è Temps total: {time_first*1000:.2f}ms")
    logger.info("‚è±Ô∏è Temps moyen par point: {(time_first/20)*1000:.2f}ms")
    
    # Afficher stats cache
    if hasattr(calculator, 'get_cache_stats'):
        stats = calculator.get_cache_stats()
        logger.info("\nüìä STATS CACHE APR√àS PREMIER PASSAGE:")
        logger.info("  Hit rate: {stats.get('hit_rate', 0):.1%}")
        logger.info("  Hits: {stats.get('cache_hits', 0)}")
        logger.info("  Misses: {stats.get('cache_misses', 0)}")
    
    # Test 2: Deuxi√®me passage avec m√™mes donn√©es (cache hits)
    logger.info("\nüöÄ Test 2: Deuxi√®me passage (cache hits)")
    start = time.time()
    results_second = []
    
    for i, data in enumerate(data_list[:20]):  # M√™mes 20 points
        result = simulate_heavy_calculation(calculator, data)
        results_second.append(result)
    
    time_second = time.time() - start
    logger.info("‚è±Ô∏è Temps total: {time_second*1000:.2f}ms")
    logger.info("‚è±Ô∏è Temps moyen par point: {(time_second/20)*1000:.2f}ms")
    logger.info("üöÄ SPEEDUP: {time_first/time_second:.1f}x plus rapide!")
    
    # V√©rifier que les r√©sultats sont identiques
    all_identical = all(
        str(r1) == str(r2) 
        for r1, r2 in zip(results_first, results_second)
    )
    logger.info("R√©sultats identiques: {all_identical}")
    
    # Stats finales
    if hasattr(calculator, 'get_cache_stats'):
        stats = calculator.get_cache_stats()
        logger.info("\nüìä STATS CACHE FINALES:")
        logger.info("  Hit rate: {stats.get('hit_rate', 0):.1%}")
        logger.info("  Hits: {stats.get('cache_hits', 0)}")
        logger.info("  Misses: {stats.get('cache_misses', 0)}")
        logger.info("  Avg calc time: {stats.get('avg_calculation_time_ms', 0):.2f}ms")
    
    # Test 3: Pattern r√©aliste (m√©lange de hits et misses)
    logger.info("\nüéØ Test 3: Pattern r√©aliste (80% r√©p√©titions)")
    start = time.time()
    
    # Cr√©er un pattern avec 80% de r√©p√©titions
    pattern_indices = []
    for i in range(50):
        if np.random.random() < 0.8:  # 80% de chance de r√©p√©tition
            pattern_indices.append(np.random.randint(0, 10))
        else:
            pattern_indices.append(np.random.randint(10, 20))
    
    for idx in pattern_indices:
        _ = simulate_heavy_calculation(calculator, data_list[idx])
    
    time_pattern = time.time() - start
    logger.info("‚è±Ô∏è Temps pour 50 calculs: {time_pattern*1000:.2f}ms")
    
    # Stats finales apr√®s pattern
    if hasattr(calculator, 'get_cache_stats'):
        stats = calculator.get_cache_stats()
        logger.info("\nüìä STATS APR√àS PATTERN R√âALISTE:")
        logger.info("  Hit rate: {stats.get('hit_rate', 0):.1%}")
        logger.info("  Total calculations: {stats.get('total_calculations', 0)}")
        
        # Calculer √©conomie de temps estim√©e
        if stats.get('hit_rate', 0) > 0:
            time_saved = stats.get('cache_hits', 0) * stats.get('avg_calculation_time_ms', 0)
            logger.info("  ‚è∞ Temps √©conomis√©: ~{time_saved:.0f}ms")
    
    logger.info("\n‚úÖ TEST R√âALISTE TERMIN√â!")
    
    # Test 4: Vider le cache
    logger.info("\nüßπ Test 4: Clear cache")
    if hasattr(calculator, 'clear_cache'):
        calculator.clear_cache()
        logger.info("Cache vid√©")
        
        # V√©rifier que le cache est vide
        if hasattr(calculator, 'get_cache_stats'):
            stats = calculator.get_cache_stats()
            logger.info("  Hits apr√®s clear: {stats.get('cache_hits', 0)}")
            logger.info("  Misses apr√®s clear: {stats.get('cache_misses', 0)}")

if __name__ == "__main__":
    main()