#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Diagnostic Connexion TWS Pr√©cis
Diagnostic pr√©cis de la connexion TWS sur port 7497
"""

import os
import sys
import subprocess
import asyncio
import time
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def verifier_processus_tws():
    """V√©rifier processus TWS"""
    print("1. V√âRIFICATION PROCESSUS TWS")
    print("-" * 30)
    
    try:
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq TWS.exe'], 
                              capture_output=True, text=True, shell=True)
        
        if 'TWS.exe' in result.stdout:
            print("‚úÖ TWS.exe d√©tect√©")
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if 'TWS.exe' in line:
                    print(f"   {line.strip()}")
            return True
        else:
            print("‚ùå TWS.exe non d√©tect√©")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def verifier_port_7497():
    """V√©rifier port 7497"""
    print("\n2. V√âRIFICATION PORT 7497")
    print("-" * 30)
    
    try:
        result = subprocess.run(['netstat', '-an'], 
                              capture_output=True, text=True, shell=True)
        
        if '7497' in result.stdout:
            print("‚úÖ Port 7497 d√©tect√©")
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if '7497' in line:
                    print(f"   {line.strip()}")
            return True
        else:
            print("‚ùå Port 7497 non d√©tect√©")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def verifier_configuration_api():
    """V√©rifier configuration API TWS"""
    print("\n3. V√âRIFICATION CONFIGURATION API TWS")
    print("-" * 30)
    
    print("üîß V√âRIFICATIONS MANUELLES DANS TWS:")
    print("1. Configuration > API > Settings:")
    print("   - Enable ActiveX and Socket Clients: ‚úÖ")
    print("   - Socket port: 7497")
    print("   - Allow connections from localhost: ‚úÖ")
    print("   - Read-Only API: ‚ùå (d√©sactiv√©)")
    print("2. Configuration > API > Precautions:")
    print("   - Bypass Order Precautions for API Orders: ‚úÖ")
    print("3. TWS est-il en mode Paper Trading?")
    print("4. TWS est-il connect√© aux march√©s?")
    
    return True

async def test_connexion_directe():
    """Test connexion directe"""
    print("\n4. TEST CONNEXION DIRECTE")
    print("-" * 30)
    
    try:
        from ib_insync import IB
        
        ib = IB()
        
        print("   Test connexion 127.0.0.1:7497...")
        
        try:
            await asyncio.wait_for(
                ib.connectAsync('127.0.0.1', 7497, clientId=1),
                timeout=8.0
            )
            
            if ib.isConnected():
                print("‚úÖ Connexion r√©ussie!")
                print(f"   Status: {ib.connectionStatus()}")
                ib.disconnect()
                return True
            else:
                print("‚ùå Connexion √©chou√©e")
                return False
                
        except asyncio.TimeoutError:
            print("‚ùå Timeout connexion (8s)")
            return False
        except Exception as e:
            print(f"‚ùå Erreur connexion: {e}")
            return False
            
    except ImportError:
        print("‚ùå ib_insync non disponible")
        return False
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")
        return False

async def test_client_ids_differents():
    """Tester diff√©rents client IDs"""
    print("\n5. TEST CLIENT IDS DIFF√âRENTS")
    print("-" * 30)
    
    client_ids = [1, 2, 3, 10, 100]
    
    for client_id in client_ids:
        try:
            from ib_insync import IB
            
            ib = IB()
            
            print(f"   Test client ID {client_id}...")
            
            try:
                await asyncio.wait_for(
                    ib.connectAsync('127.0.0.1', 7497, clientId=client_id),
                    timeout=5.0
                )
                
                if ib.isConnected():
                    print(f"‚úÖ SUCC√àS avec client ID {client_id}")
                    ib.disconnect()
                    return client_id
                else:
                    print(f"‚ùå √âCHEC avec client ID {client_id}")
                    
            except asyncio.TimeoutError:
                print(f"‚ùå TIMEOUT avec client ID {client_id}")
            except Exception as e:
                print(f"‚ùå ERREUR avec client ID {client_id}: {e}")
                
            await asyncio.sleep(1)
            
        except Exception as e:
            print(f"‚ùå Erreur test client ID {client_id}: {e}")
    
    return None

def verifier_fichiers_configuration():
    """V√©rifier les fichiers de configuration"""
    print("\n6. V√âRIFICATION FICHIERS CONFIGURATION")
    print("-" * 30)
    
    fichiers_config = [
        "config/mia_ia_system_tws_paper_fixed.py",
        "config/tws_paper_config.py",
        "config/ibkr_config.py",
        "core/ibkr_connector.py"
    ]
    
    for fichier in fichiers_config:
        if os.path.exists(fichier):
            try:
                with open(fichier, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                if '7497' in content:
                    print(f"‚úÖ {fichier} - Port 7497 configur√©")
                else:
                    print(f"‚ö†Ô∏è {fichier} - Port 7497 non trouv√©")
                    
                if 'clientId=1' in content or 'client_id=1' in content:
                    print(f"   - Client ID 1 configur√©")
                else:
                    print(f"   - Client ID non trouv√©")
                    
            except Exception as e:
                print(f"‚ùå {fichier} - Erreur lecture: {e}")
        else:
            print(f"‚ö†Ô∏è {fichier} - Fichier non trouv√©")
    
    return True

async def main():
    """Fonction principale"""
    print("MIA_IA_SYSTEM - DIAGNOSTIC CONNEXION TWS PR√âCIS")
    print("=" * 60)
    print(f"Diagnostic: {datetime.now()}")
    print("=" * 60)
    
    # V√©rifications
    tws_ok = verifier_processus_tws()
    port_ok = verifier_port_7497()
    config_ok = verifier_configuration_api()
    connexion_ok = await test_connexion_directe()
    client_id_ok = await test_client_ids_differents()
    fichiers_ok = verifier_fichiers_configuration()
    
    # R√©sultats
    print("\n" + "=" * 60)
    print("R√âSULTATS DIAGNOSTIC")
    print("=" * 60)
    
    print(f"Processus TWS: {'‚úÖ' if tws_ok else '‚ùå'}")
    print(f"Port 7497: {'‚úÖ' if port_ok else '‚ùå'}")
    print(f"Configuration API: {'‚úÖ' if config_ok else '‚ö†Ô∏è'}")
    print(f"Connexion directe: {'‚úÖ' if connexion_ok else '‚ùå'}")
    print(f"Client ID fonctionnel: {'‚úÖ' if client_id_ok else '‚ùå'}")
    print(f"Fichiers config: {'‚úÖ' if fichiers_ok else '‚ö†Ô∏è'}")
    
    if connexion_ok:
        print("\nüéâ SUCC√àS: Connexion TWS fonctionnelle!")
        print("‚úÖ Syst√®me pr√™t pour test")
    elif client_id_ok:
        print(f"\nüîß SOLUTION: Utiliser client ID {client_id_ok}")
        print("üìã Cr√©er script de correction...")
        create_correction_script(client_id_ok)
    else:
        print("\n‚ùå PROBL√àME: Connexion TWS √©choue")
        print("\nüîß SOLUTIONS √Ä ESSAYER:")
        print("1. V√©rifier configuration API dans TWS")
        print("2. Red√©marrer TWS")
        print("3. V√©rifier que TWS est en mode Paper Trading")
        print("4. V√©rifier que TWS est connect√© aux march√©s")
        print("5. Tester avec un autre client ID")
    
    print("=" * 60)

def create_correction_script(client_id):
    """Cr√©er script de correction"""
    script_content = f'''#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Correction Client ID {client_id}
Corrige le client ID dans les fichiers de configuration
"""

import os
import sys

def corriger_client_id():
    """Corriger le client ID dans les fichiers de configuration"""
    
    print("MIA_IA_SYSTEM - CORRECTION CLIENT ID")
    print("=" * 40)
    print(f"Application client ID: {client_id}")
    print("=" * 40)
    
    fichiers_config = [
        "config/mia_ia_system_tws_paper_fixed.py",
        "config/tws_paper_config.py",
        "config/ibkr_config.py",
        "core/ibkr_connector.py"
    ]
    
    for fichier in fichiers_config:
        if os.path.exists(fichier):
            try:
                with open(fichier, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Remplacer client ID
                content_modified = content.replace('clientId=1', f'clientId={client_id}')
                content_modified = content_modified.replace('client_id=1', f'client_id={client_id}')
                content_modified = content_modified.replace('clientId = 1', f'clientId = {client_id}')
                content_modified = content_modified.replace('client_id = 1', f'client_id = {client_id}')
                
                if content != content_modified:
                    with open(fichier, 'w', encoding='utf-8') as f:
                        f.write(content_modified)
                    print(f"‚úÖ {fichier} - Client ID corrig√©")
                else:
                    print(f"‚ö†Ô∏è {fichier} - Aucun changement n√©cessaire")
                    
            except Exception as e:
                print(f"‚ùå {fichier} - Erreur: {{e}}")
        else:
            print(f"‚ö†Ô∏è {fichier} - Fichier non trouv√©")
    
    print("\\nüéâ Correction client ID termin√©e!")
    print(f"üöÄ Client ID {client_id} appliqu√©")
    print("üìã Prochaine √©tape: python test_connexion_ibkr_simple.py")

if __name__ == "__main__":
    corriger_client_id()
'''
    
    with open('corriger_client_id_final.py', 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print("‚úÖ Script cr√©√©: corriger_client_id_final.py")
    print("üìã Ex√©cuter: python corriger_client_id_final.py")

if __name__ == "__main__":
    asyncio.run(main())

