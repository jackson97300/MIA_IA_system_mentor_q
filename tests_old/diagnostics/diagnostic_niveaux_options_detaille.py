#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Diagnostic D√©taill√© Niveaux Options R√©els
Diagnostic √©tape par √©tape pour identifier les probl√®mes
"""

import os
import sys
import asyncio
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def diagnostic_niveaux_options():
    """Diagnostic d√©taill√© des niveaux options r√©els"""
    
    print("MIA_IA_SYSTEM - DIAGNOSTIC D√âTAILL√â NIVEAUX OPTIONS")
    print("=" * 70)
    print("Objectif: Identifier pr√©cis√©ment o√π √ßa bloque")
    print("=" * 70)
    
    # √âTAPE 1: V√©rification imports
    print("\n1. V√âRIFICATION IMPORTS...")
    try:
        from core.ibkr_connector import IBKRConnector
        print("   ‚úÖ IBKRConnector import√©")
    except Exception as e:
        print(f"   ‚ùå Erreur import IBKRConnector: {e}")
        return False
    
    try:
        from features.spx_options_retriever import SPXOptionsRetriever
        print("   ‚úÖ SPXOptionsRetriever import√©")
    except Exception as e:
        print(f"   ‚ùå Erreur import SPXOptionsRetriever: {e}")
        return False
    
    # √âTAPE 2: Configuration
    print("\n2. CONFIGURATION...")
    config = {
        'ibkr_host': '127.0.0.1',
        'ibkr_port': 7497,
        'ibkr_client_id': 1,
        'simulation_mode': False,
        'require_real_data': True,
        'fallback_to_saved_data': False
    }
    print(f"   Configuration: {config}")
    
    # √âTAPE 3: Cr√©ation connector
    print("\n3. CR√âATION IBKR CONNECTOR...")
    try:
        connector = IBKRConnector(config)
        print("   ‚úÖ IBKRConnector cr√©√©")
        print(f"   Host: {connector.host}")
        print(f"   Port: {connector.port}")
        print(f"   Simulation mode: {connector.simulation_mode}")
        print(f"   Require real data: {connector.require_real_data}")
    except Exception as e:
        print(f"   ‚ùå Erreur cr√©ation connector: {e}")
        return False
    
    # √âTAPE 4: Test connexion IBKR
    print("\n4. TEST CONNEXION IBKR...")
    try:
        print("   Tentative connexion...")
        connected = await connector.connect()
        print(f"   R√©sultat connexion: {connected}")
        
        if connected:
            print("   ‚úÖ IBKR connect√© avec succ√®s")
            print(f"   Status: {connector.connection_status}")
            print(f"   Is connected: {connector.is_connected_flag}")
        else:
            print("   ‚ùå √âchec connexion IBKR")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur connexion: {e}")
        return False
    
    # √âTAPE 5: Cr√©ation SPX Retriever
    print("\n5. CR√âATION SPX OPTIONS RETRIEVER...")
    try:
        spx_retriever = SPXOptionsRetriever(connector)
        print("   ‚úÖ SPXOptionsRetriever cr√©√©")
        
        # V√©rification attributs
        print(f"   Force real data: {getattr(spx_retriever, 'force_real_data', 'N/A')}")
        print(f"   Use ib insync: {getattr(spx_retriever, 'use_ib_insync', 'N/A')}")
        
    except Exception as e:
        print(f"   ‚ùå Erreur cr√©ation SPX retriever: {e}")
        return False
    
    # √âTAPE 6: Test r√©cup√©ration donn√©es SPX
    print("\n6. TEST R√âCUP√âRATION DONN√âES SPX...")
    try:
        print("   Tentative r√©cup√©ration donn√©es...")
        spx_data = await spx_retriever.get_real_spx_data()
        print("   ‚úÖ Donn√©es SPX r√©cup√©r√©es")
        
        # Affichage d√©taill√© des donn√©es
        print("\n   D√âTAILS DONN√âES SPX:")
        print(f"      Put/Call Ratio: {spx_data.get('put_call_ratio', 'N/A')}")
        print(f"      VIX Level: {spx_data.get('vix_level', 'N/A')}")
        print(f"      Gamma Exposure: ${spx_data.get('gamma_exposure', 0)/1e9:.1f}B")
        print(f"      Dealer Position: {spx_data.get('dealer_position', 'N/A')}")
        print(f"      Source: {spx_data.get('data_source', 'N/A')}")
        print(f"      Timestamp: {spx_data.get('timestamp', 'N/A')}")
        
        # V√©rification source
        data_source = spx_data.get('data_source', 'N/A')
        print(f"\n   V√âRIFICATION SOURCE: {data_source}")
        
        if data_source == 'ibkr_real':
            print("   ‚úÖ DONN√âES SPX REELLES CONFIRM√âES")
            return True
        else:
            print(f"   ‚ùå Source non r√©elle: {data_source}")
            print("   üîç Analyse des causes possibles...")
            
            # V√©rification m√©thodes internes
            print("\n   V√âRIFICATION M√âTHODES INTERNES:")
            
            # Test m√©thode _get_real_ibkr_data
            try:
                real_data = await spx_retriever._get_real_ibkr_data()
                print(f"      _get_real_ibkr_data: {real_data.get('data_source', 'N/A')}")
            except Exception as e:
                print(f"      _get_real_ibkr_data: Erreur - {e}")
            
            # Test m√©thode _get_fallback_data
            try:
                fallback_data = spx_retriever._get_fallback_data()
                print(f"      _get_fallback_data: {fallback_data.get('data_source', 'N/A')}")
            except Exception as e:
                print(f"      _get_fallback_data: Erreur - {e}")
            
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur r√©cup√©ration donn√©es: {e}")
        return False

def main():
    """Fonction principale"""
    try:
        print(f"D√©but diagnostic: {datetime.now()}")
        
        # Ex√©cuter diagnostic async
        success = asyncio.run(diagnostic_niveaux_options())
        
        print("\n" + "=" * 70)
        print("R√âSULTATS DIAGNOSTIC D√âTAILL√â")
        print("=" * 70)
        
        if success:
            print("‚úÖ SUCC√àS: Niveaux options r√©els confirm√©s")
            print("‚úÖ Syst√®me pr√™t pour test 2h avec vraies donn√©es")
            print("üöÄ Lancement recommand√©: python lance_mia_ia_tws.py")
        else:
            print("‚ùå √âCHEC: Niveaux options non confirm√©s")
            print("üîß Correction manuelle n√©cessaire")
            print("üìã V√©rifier:")
            print("   - Connexion TWS sur port 7497")
            print("   - Souscription donn√©es SPX options")
            print("   - Configuration IBKR")
        
        print("=" * 70)
        
    except Exception as e:
        print(f"‚ùå Erreur ex√©cution diagnostic: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()


