#!/usr/bin/env python3
"""
Test r√©cup√©ration donn√©es ES futures avec OHLC, volume et prix
"""

import sys
import time
import json
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent))

from core.ibkr_beta_connector import IBKRBetaConnector, IBKRBetaConfig

def test_es_data_retrieval():
    """Tester la r√©cup√©ration des donn√©es ES futures"""
    
    print("üìä Test r√©cup√©ration donn√©es ES futures (OHLC, Volume, Prix)")
    print("=" * 70)
    
    # Configuration
    config = IBKRBetaConfig()
    connector = IBKRBetaConnector(config)
    
    try:
        # 1. Connexion et authentification
        print("1Ô∏è‚É£ Connexion au gateway...")
        if not connector.connect():
            print("‚ùå Impossible de se connecter au gateway")
            return False
        
        print("2Ô∏è‚É£ V√©rification authentification...")
        if not connector.config.authenticated:
            print("‚ö†Ô∏è Non authentifi√© - tentative d'authentification...")
            if not connector.authenticate():
                print("‚ùå Authentification √©chou√©e")
                return False
        
        # 3. Recherche du contrat ES futures
        print("3Ô∏è‚É£ Recherche contrat ES futures...")
        es_contracts = connector.search_contract("ES", "FUT")
        
        if not es_contracts:
            print("‚ùå Aucun contrat ES futures trouv√©")
            return False
        
        print(f"‚úÖ {len(es_contracts)} contrat(s) ES trouv√©(s)")
        
        # Afficher les contrats trouv√©s
        for i, contract in enumerate(es_contracts[:3]):  # Afficher les 3 premiers
            print(f"   Contrat {i+1}: {contract}")
        
        # Prendre le premier contrat ES
        es_conid = str(es_contracts[0].get("conid"))
        print(f"üìã Utilisation du contrat: {es_conid}")
        
        # 4. R√©cup√©ration donn√©es historiques (OHLC)
        print("\n4Ô∏è‚É£ R√©cup√©ration donn√©es historiques ES (OHLC)...")
        
        # Diff√©rentes p√©riodes √† tester
        periods = [
            ("1d", "1min", "1 jour - 1 minute"),
            ("5d", "5min", "5 jours - 5 minutes"),
            ("1m", "1hour", "1 mois - 1 heure")
        ]
        
        for period, bar, description in periods:
            print(f"\n   üìà {description}...")
            historical_data = connector.get_historical_data(es_conid, period, bar)
            
            if historical_data:
                print(f"   ‚úÖ {len(historical_data)} barres r√©cup√©r√©es")
                
                # Afficher les 3 premi√®res barres
                for i, bar_data in enumerate(historical_data[:3]):
                    print(f"      Barre {i+1}: {bar_data}")
            else:
                print(f"   ‚ùå Aucune donn√©e pour {description}")
        
        # 5. R√©cup√©ration donn√©es temps r√©el (prix actuels)
        print("\n5Ô∏è‚É£ R√©cup√©ration donn√©es temps r√©el ES...")
        
        # Champs pour les donn√©es de march√©
        fields = [
            "31",  # bid
            "83",  # ask  
            "84",  # last
            "86",  # volume
            "87",  # high
            "88",  # low
            "89",  # open
            "90"   # close
        ]
        
        market_data = connector.get_market_data(es_conid, fields)
        
        if market_data:
            print("‚úÖ Donn√©es de march√© r√©cup√©r√©es")
            print(f"   Donn√©es: {json.dumps(market_data, indent=2)}")
        else:
            print("‚ùå Impossible de r√©cup√©rer les donn√©es de march√©")
        
        # 6. Test WebSocket pour donn√©es temps r√©el
        print("\n6Ô∏è‚É£ Test WebSocket pour donn√©es temps r√©el...")
        if connector.connect_websocket():
            print("‚úÖ WebSocket connect√©")
            
            # S'abonner aux donn√©es ES
            def market_data_callback(data):
                print(f"üìä Donn√©es temps r√©el re√ßues: {data}")
            
            if connector.subscribe_market_data(es_conid, fields, market_data_callback):
                print("‚úÖ Abonnement aux donn√©es ES activ√©")
                print("   Attente de donn√©es temps r√©el (10 secondes)...")
                time.sleep(10)
            else:
                print("‚ùå √âchec abonnement WebSocket")
        else:
            print("‚ùå Impossible de connecter le WebSocket")
        
        print("\nüéâ Test termin√© avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False
        
    finally:
        connector.disconnect()

if __name__ == "__main__":
    success = test_es_data_retrieval()
    if not success:
        print("\nüí° Solutions possibles:")
        print("   1. V√©rifiez que vous √™tes connect√© sur https://localhost:5000/")
        print("   2. V√©rifiez que vous avez des permissions pour ES futures")
        print("   3. V√©rifiez que le march√© est ouvert")
        sys.exit(1)





