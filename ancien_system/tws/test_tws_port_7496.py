#!/usr/bin/env python3
"""
Test connexion TWS port 7496 (live)
"""
from ib_insync import *
import time
import socket

def test_port_connection():
    """Test connexion socket basique"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('127.0.0.1', 7496))
        sock.close()
        return result == 0
    except Exception as e:
        print(f"‚ùå Erreur test port: {e}")
        return False

def test_tws_port_7496():
    """Test connexion TWS port 7496"""
    print("üîå Test connexion TWS port 7496...")
    
    # Test port d'abord
    print("üì° Test port 7496...")
    if not test_port_connection():
        print("‚ùå Port 7496 non accessible - TWS pas d√©marr√© ou mal configur√©")
        return False
    print("‚úÖ Port 7496 accessible")
    
    # Configuration TWS port 7496
    config = {
        'host': '127.0.0.1',
        'port': 7496,  # Port TWS live
        'client_id': 1,
        'timeout': 30
    }
    
    try:
        # Connexion TWS
        ib = IB()
        print(f"üì° Tentative connexion TWS: {config['host']}:{config['port']}")
        print("‚ö†Ô∏è Assurez-vous que TWS est ouvert et connect√©")
        
        ib.connect(
            config['host'], 
            config['port'], 
            clientId=config['client_id'],
            timeout=10
        )
        
        print("‚úÖ Connexion TWS r√©ussie !")
        
        # Test donn√©es compte
        print("\nüìä Test donn√©es compte...")
        account_summary = ib.accountSummary()
        print(f"‚úÖ Compte connect√©: {len(account_summary)} √©l√©ments trouv√©s")
        
        # Afficher quelques d√©tails du compte
        for item in account_summary[:3]:
            print(f"   {item.tag}: {item.value}")
        
        # Test donn√©es march√© ES
        print("\nüìà Test donn√©es march√© ES...")
        contract = Future('ES', '202412', 'CME')
        
        try:
            ib.qualifyContracts(contract)
            print("‚úÖ Contrat ES qualifi√©")
            
            # Subscribe market data
            ib.reqMktData(contract)
            time.sleep(3)
            
            ticker = ib.ticker(contract)
            if ticker and ticker.marketName():
                print(f"‚úÖ Donn√©es ES: {ticker.marketName()} - Bid: {ticker.bid} Ask: {ticker.ask}")
            else:
                print("‚ö†Ô∏è Pas de donn√©es ES en temps r√©el")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur donn√©es ES: {e}")
        
        # D√©connexion
        ib.disconnect()
        print("\n‚úÖ Test TWS port 7496 termin√© avec succ√®s !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur connexion TWS port 7496: {e}")
        return False

if __name__ == "__main__":
    test_tws_port_7496() 