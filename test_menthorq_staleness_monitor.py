#!/usr/bin/env python3
"""
Test du syst√®me de monitoring automatique de staleness MenthorQ
"""

import sys
from pathlib import Path
import time
from datetime import datetime, timezone
sys.path.insert(0, str(Path(__file__).parent))

from core.menthorq_staleness_monitor import (
    MenthorQStalenessMonitor, 
    MonitoringConfig, 
    AlertLevel,
    create_menthorq_staleness_monitor
)

def test_menthorq_staleness_monitor():
    """Test du syst√®me de monitoring automatique"""
    print("üöÄ === TEST MONITORING AUTOMATIQUE STALENESS MENTHORQ ===\n")
    
    # Test 1: Cr√©ation du moniteur
    print("üéØ Test 1: Cr√©ation du moniteur")
    config = MonitoringConfig(
        check_interval_seconds=5,  # Check rapide pour le test
        alert_cooldown_seconds=10,  # Cooldown court pour le test
        max_alerts_per_hour=5,
        enable_discord_alerts=False,
        enable_email_alerts=False
    )
    
    monitor = create_menthorq_staleness_monitor(config)
    print(f"‚úÖ Moniteur cr√©√©: {monitor}")
    
    # Test 2: Ajout de sources √† surveiller
    print("\nüéØ Test 2: Ajout de sources √† surveiller")
    monitor.add_monitored_source("ESZ5", "gamma_levels", 60)
    monitor.add_monitored_source("ESZ5", "blind_spots", 60)
    monitor.add_monitored_source("NQZ5", "gamma_levels", 60)
    monitor.add_monitored_source("NQZ5", "swing_levels", 60)
    
    print(f"‚úÖ Sources ajout√©es: {len(monitor.monitored_sources)}")
    for source in monitor.monitored_sources:
        print(f"   - {source['source_id']}")
    
    # Test 3: Ajout de callback d'alerte
    print("\nüéØ Test 3: Ajout de callback d'alerte")
    alert_count = 0
    
    def test_alert_callback(alert):
        nonlocal alert_count
        alert_count += 1
        print(f"üö® Callback re√ßu: {alert.alert_level.value} - {alert.message}")
    
    monitor.add_alert_callback(test_alert_callback)
    print("‚úÖ Callback d'alerte ajout√©")
    
    # Test 4: D√©marrage du monitoring
    print("\nüéØ Test 4: D√©marrage du monitoring")
    success = monitor.start_monitoring()
    print(f"‚úÖ Monitoring d√©marr√©: {success}")
    
    if not success:
        print("‚ùå Impossible de d√©marrer le monitoring - arr√™t du test")
        return
    
    # Test 5: Surveillance pendant quelques cycles
    print("\nüéØ Test 5: Surveillance pendant 20 secondes")
    print("   (Le monitoring va v√©rifier la staleness toutes les 5 secondes)")
    
    for i in range(4):  # 4 cycles de 5 secondes = 20 secondes
        time.sleep(5)
        status = monitor.get_monitoring_status()
        print(f"   Cycle {i+1}: {status['total_checks']} checks, {status['alerts_sent']} alertes")
    
    # Test 6: Statut final
    print("\nüéØ Test 6: Statut final du monitoring")
    final_status = monitor.get_monitoring_status()
    print(f"‚úÖ Statut final:")
    print(f"   - En cours: {final_status['is_running']}")
    print(f"   - Sources surveill√©es: {final_status['sources_monitored']}")
    print(f"   - Total checks: {final_status['total_checks']}")
    print(f"   - Alertes envoy√©es: {final_status['alerts_sent']}")
    print(f"   - Uptime: {final_status['uptime_seconds']:.1f}s")
    print(f"   - Callbacks re√ßus: {alert_count}")
    
    # Test 7: Alertes r√©centes
    print("\nüéØ Test 7: Alertes r√©centes")
    recent_alerts = monitor.get_recent_alerts(5)
    print(f"‚úÖ Alertes r√©centes ({len(recent_alerts)}):")
    for alert in recent_alerts:
        print(f"   - {alert['timestamp']}: {alert['alert_level']} - {alert['message']}")
    
    # Test 8: Arr√™t du monitoring
    print("\nüéØ Test 8: Arr√™t du monitoring")
    monitor.stop_monitoring()
    time.sleep(2)  # Attendre l'arr√™t
    
    final_status = monitor.get_monitoring_status()
    print(f"‚úÖ Monitoring arr√™t√©: {not final_status['is_running']}")
    
    # Test 9: Statistiques finales
    print("\nüéØ Test 9: Statistiques finales")
    print(f"‚úÖ R√©sum√© du test:")
    print(f"   - Sources configur√©es: {len(monitor.monitored_sources)}")
    print(f"   - Cycles de monitoring: {final_status['total_checks']}")
    print(f"   - Alertes g√©n√©r√©es: {final_status['alerts_sent']}")
    print(f"   - Callbacks ex√©cut√©s: {alert_count}")
    print(f"   - Dur√©e du test: {final_status['uptime_seconds']:.1f}s")
    
    print(f"\nüéâ Test du monitoring automatique termin√©!")
    print(f"üìä Le syst√®me de monitoring est {'‚úÖ OP√âRATIONNEL' if final_status['total_checks'] > 0 else '‚ùå NON FONCTIONNEL'}")

if __name__ == "__main__":
    test_menthorq_staleness_monitor()

