#!/usr/bin/env python3
"""
Test TWS Real - MIA_IA_SYSTEM
==============================

Test TWS en mode r√©el sur le port 7496.

USAGE:
python scripts/test_tws_real.py
"""

import sys
import os
import time
from datetime import datetime

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

def test_tws_real():
    """Test TWS en mode r√©el"""
    
    print("üöÄ TEST TWS R√âEL")
    print("=" * 35)
    print(f"‚è∞ D√©but: {datetime.now().strftime('%H:%M:%S')}")
    
    try:
        # Import direct ib_insync
        from ib_insync import IB, Future, Stock
        
        # 1. Connexion TWS R√©el
        print("\n1Ô∏è‚É£ Connexion TWS R√©el (Port 7496)...")
        ib = IB()
        ib.connect('127.0.0.1', 7496, clientId=1, timeout=10)
        
        if ib.isConnected():
            print("‚úÖ Connexion TWS R√©el OK")
        else:
            print("‚ùå √âchec connexion TWS R√©el")
            return
        
        # 2. Test ES Futures
        print("\n2Ô∏è‚É£ Test ES Futures...")
        contract = Future('ES', '202412', 'CME')
        ib.qualifyContracts(contract)
        print("‚úÖ Contrat ES qualifi√©")
        
        # 3. Demande donn√©es temps r√©el
        print("\n3Ô∏è‚É£ Demande donn√©es ES...")
        ticker = ib.reqMktData(contract)
        
        # Attendre max 10 secondes
        print("   ‚è≥ Attente donn√©es...")
        for i in range(10):
            time.sleep(1)
            if ticker.marketPrice() or ticker.bid or ticker.ask:
                break
            print(f"   ‚è≥ {i+1}/10 secondes...")
        
        # 4. Affichage r√©sultats
        print("\n4Ô∏è‚É£ R√©sultats ES:")
        if ticker.marketPrice():
            print(f"‚úÖ Prix ES: {ticker.marketPrice()}")
        else:
            print("‚ùå Pas de prix ES")
            
        if ticker.bid:
            print(f"‚úÖ Bid ES: {ticker.bid}")
        else:
            print("‚ùå Pas de bid ES")
            
        if ticker.ask:
            print(f"‚úÖ Ask ES: {ticker.ask}")
        else:
            print("‚ùå Pas de ask ES")
            
        if ticker.last:
            print(f"‚úÖ Last ES: {ticker.last}")
        else:
            print("‚ùå Pas de last ES")
        
        # 5. Test SPY pour comparaison
        print("\n5Ô∏è‚É£ Test SPY (comparaison):")
        spy_contract = Stock('SPY', 'SMART', 'USD')
        ib.qualifyContracts(spy_contract)
        spy_ticker = ib.reqMktData(spy_contract)
        
        time.sleep(3)
        
        if spy_ticker.marketPrice():
            print(f"‚úÖ Prix SPY: {spy_ticker.marketPrice()}")
        else:
            print("‚ùå Pas de prix SPY")
        
        # 6. Test Account Info
        print("\n6Ô∏è‚É£ Test Account Info:")
        try:
            account = ib.accountSummary()
            if account:
                print("‚úÖ Account Info OK")
                for item in account:
                    if 'NetLiquidation' in item.tag:
                        print(f"   Balance: ${item.value}")
                    elif 'BuyingPower' in item.tag:
                        print(f"   Buying Power: ${item.value}")
            else:
                print("‚ùå Pas d'info compte")
        except Exception as e:
            print(f"‚ùå Erreur Account: {e}")
        
        # 7. Test Level 2 (si disponible)
        print("\n7Ô∏è‚É£ Test Level 2...")
        try:
            depth = ib.reqMktDepth(contract, numRows=5)
            time.sleep(2)
            
            if depth:
                print("‚úÖ Level 2 disponible")
                print(f"   Bids: {len(depth.bids)} niveaux")
                print(f"   Asks: {len(depth.asks)} niveaux")
            else:
                print("‚ùå Level 2 non disponible")
        except Exception as e:
            print(f"‚ùå Erreur Level 2: {e}")
        
        # 8. R√©sum√© final
        print("\n" + "=" * 35)
        print("üìä R√âSUM√â TWS R√âEL")
        print("=" * 35)
        print("‚úÖ Connexion: OK")
        print("‚úÖ TWS: Connect√©")
        print("‚úÖ Mode: R√âEL")
        
        if ticker.marketPrice() or ticker.bid or ticker.ask:
            print("‚úÖ Donn√©es ES: R√âCUP√âR√âES")
            print("üéâ SUCC√àS ! TWS R√©el fonctionne !")
        else:
            print("‚ùå Donn√©es ES: MANQUANTES")
            
        print(f"‚è∞ Fin: {datetime.now().strftime('%H:%M:%S')}")
        
        # D√©connexion
        ib.disconnect()
        print("‚úÖ D√©connexion propre")
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    try:
        test_tws_real()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrompu")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()


