#!/usr/bin/env python3
"""
Prepare Paper Trading - MIA_IA_SYSTEM
=====================================

Script de pr√©paration pour Paper Trading IBKR
avec Level 2 + Options.

USAGE:
python scripts/prepare_paper_trading.py
"""

import sys
import os
import asyncio
from datetime import datetime
import json

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from config.ibkr_config import IB_GATEWAY_CONFIG, MARKET_DATA_CONFIG

def check_ib_gateway_installation():
    """V√©rifie l'installation IB Gateway"""
    print("üîç V√âRIFICATION INSTALLATION IB GATEWAY")
    print("=" * 50)
    
    # V√©rifications syst√®me
    print("1Ô∏è‚É£ V√©rifications syst√®me...")
    
    # V√©rifier Python
    print(f"   Python version : {sys.version}")
    
    # V√©rifier ib_insync
    try:
        import ib_insync
        print("‚úÖ ib_insync install√©")
    except ImportError:
        print("‚ùå ib_insync non install√©")
        print("   Installez avec : pip install ib_insync")
        return False
    
    # V√©rifier configuration
    print("\n2Ô∏è‚É£ V√©rification configuration...")
    
    config_file = "config/ibkr_config.py"
    if os.path.exists(config_file):
        print("‚úÖ Fichier de configuration trouv√©")
    else:
        print("‚ùå Fichier de configuration manquant")
        return False
    
    print("\n3Ô∏è‚É£ Configuration IB Gateway...")
    print("   Host :", IB_GATEWAY_CONFIG['host'])
    print("   Port :", IB_GATEWAY_CONFIG['port'])
    print("   Client ID :", IB_GATEWAY_CONFIG['client_id'])
    
    print("\n4Ô∏è‚É£ Donn√©es souscrites...")
    print("   CME Level 2 :", MARKET_DATA_CONFIG['cme_level2']['cost'], "$/mois")
    print("   OPRA Level 1 :", MARKET_DATA_CONFIG['opra_level1']['cost'], "$/mois")
    print("   Total :", MARKET_DATA_CONFIG['cme_level2']['cost'] + MARKET_DATA_CONFIG['opra_level1']['cost'], "$/mois")
    
    return True

def create_paper_trading_config():
    """Cr√©e la configuration Paper Trading"""
    print("\nüìù CR√âATION CONFIGURATION PAPER TRADING")
    print("=" * 50)
    
    config = {
        'paper_trading': {
            'enabled': True,
            'account_type': 'Paper',
            'data_source': 'IBKR',
            'trading_platform': 'MFFU/Tradovate'
        },
        'market_data': {
            'cme_level2': MARKET_DATA_CONFIG['cme_level2'],
            'opra_level1': MARKET_DATA_CONFIG['opra_level1']
        },
        'testing_plan': {
            'phase_1': 'Validation Order Book Imbalance',
            'phase_2': 'Test Options Greeks',
            'phase_3': 'Validation Signaux',
            'phase_4': 'Optimisation Param√®tres',
            'phase_5': 'Pr√©paration Live'
        },
        'performance_targets': {
            'win_rate_min': 0.55,
            'profit_factor_min': 1.5,
            'max_drawdown': 0.10,
            'latency_max': 0.5
        }
    }
    
    # Sauvegarder configuration
    config_file = "config/paper_trading_config.json"
    with open(config_file, 'w') as f:
        json.dump(config, f, indent=2)
    
    print("‚úÖ Configuration Paper Trading cr√©√©e :", config_file)
    return config

def create_test_plan():
    """Cr√©e le plan de test d√©taill√©"""
    print("\nüìã PLAN DE TEST PAPER TRADING")
    print("=" * 50)
    
    test_plan = {
        'week_1': {
            'day_1_2': 'Installation et configuration IB Gateway',
            'day_3_4': 'Test connexion et donn√©es Level 2',
            'day_5_7': 'Test Order Book Imbalance'
        },
        'week_2': {
            'day_1_3': 'Test Options Greeks et OPRA',
            'day_4_5': 'Int√©gration avec bot MIA_IA_SYSTEM',
            'day_6_7': 'Test signaux g√©n√©r√©s'
        },
        'week_3': {
            'day_1_3': 'Validation performances (win rate)',
            'day_4_5': 'Optimisation param√®tres',
            'day_6_7': 'Test stabilit√© 24/7'
        },
        'week_4': {
            'day_1_3': 'Validation finale',
            'day_4_5': 'Pr√©paration passage live',
            'day_6_7': 'Configuration MFFU/Tradovate'
        }
    }
    
    # Sauvegarder plan
    plan_file = "config/paper_trading_plan.json"
    with open(plan_file, 'w') as f:
        json.dump(test_plan, f, indent=2)
    
    print("‚úÖ Plan de test cr√©√© :", plan_file)
    return test_plan

def print_next_steps():
    """Affiche les prochaines √©tapes"""
    print("\nüöÄ PROCHAINES √âTAPES")
    print("=" * 50)
    
    print("1Ô∏è‚É£ En attente du compte Paper IBKR...")
    print("   - V√©rifiez vos emails IBKR")
    print("   - Compte cr√©√© sous 24-48h")
    
    print("\n2Ô∏è‚É£ Une fois le compte cr√©√© :")
    print("   - Connectez-vous √† IB Gateway")
    print("   - S√©lectionnez compte Paper")
    print("   - Lancez : python scripts/test_ib_connection.py")
    
    print("\n3Ô∏è‚É£ Test complet :")
    print("   - Test Level 2 ES/NQ")
    print("   - Test Options SPX")
    print("   - Test Order Book Imbalance")
    
    print("\n4Ô∏è‚É£ Int√©gration bot :")
    print("   - Test avec votre bot MIA_IA_SYSTEM")
    print("   - Validation des signaux")
    print("   - Optimisation performances")

async def main():
    """Fonction principale"""
    print("üöÄ PR√âPARATION PAPER TRADING MIA_IA_SYSTEM")
    print("=" * 60)
    print(f"‚è∞ Pr√©paration d√©marr√©e : {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    # 1. V√©rification installation
    if not check_ib_gateway_installation():
        print("\n‚ùå Probl√®mes d√©tect√©s. Corrigez avant de continuer.")
        return
    
    # 2. Cr√©ation configuration
    config = create_paper_trading_config()
    
    # 3. Cr√©ation plan de test
    test_plan = create_test_plan()
    
    # 4. Prochaines √©tapes
    print_next_steps()
    
    print("\n" + "=" * 60)
    print("‚úÖ PR√âPARATION TERMIN√âE")
    print("=" * 60)
    print("üìß Attendez l'email de cr√©ation du compte Paper")
    print("üîß Tout est pr√™t pour commencer les tests !")
    print("üí∞ Co√ªt mensuel : $12.50 (CME L2 + OPRA L1)")

if __name__ == "__main__":
    asyncio.run(main()) 