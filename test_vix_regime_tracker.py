#!/usr/bin/env python3
"""
Test du syst√®me de tracking du r√©gime VIX dans les d√©cisions de trading
"""

import sys
from pathlib import Path
import time
from datetime import datetime, timezone, timedelta
sys.path.insert(0, str(Path(__file__).parent))

from core.vix_regime_tracker import (
    VIXRegimeTracker, 
    VIXRegime, 
    TradingDecisionType,
    create_vix_regime_tracker
)

def test_vix_regime_tracker():
    """Test du syst√®me de tracking du r√©gime VIX"""
    print("üöÄ === TEST TRACKING R√âGIME VIX ===\n")
    
    # Test 1: Cr√©ation du tracker
    print("üéØ Test 1: Cr√©ation du tracker VIX")
    tracker = create_vix_regime_tracker(max_history_size=100)
    print(f"‚úÖ Tracker cr√©√©: {tracker}")
    
    # Test 2: Simulation d'√©volution VIX normale
    print("\nüéØ Test 2: Simulation d'√©volution VIX normale")
    
    # Simuler une √©volution VIX normale
    vix_levels_normal = [18.5, 19.2, 20.1, 21.5, 22.8, 24.2, 25.1, 26.3, 27.8, 29.2]
    
    for i, vix_level in enumerate(vix_levels_normal):
        snapshot = tracker.update_vix_level(vix_level, context={"simulation": True, "step": i+1})
        print(f"   VIX {i+1}: {vix_level:.1f} ({snapshot.regime.value}) - Tendance: {snapshot.volatility_trend}")
        time.sleep(0.1)  # Petite pause pour simuler le temps
    
    print(f"‚úÖ {len(vix_levels_normal)} niveaux VIX normaux simul√©s")
    
    # Test 3: Simulation d'un spike VIX
    print("\nüéØ Test 3: Simulation d'un spike VIX")
    
    # Simuler un spike VIX (transition vers HIGH_VIX)
    vix_levels_spike = [30.5, 35.2, 42.8, 48.5, 52.1, 55.8, 58.2, 60.5, 62.8, 65.1]
    
    for i, vix_level in enumerate(vix_levels_spike):
        snapshot = tracker.update_vix_level(vix_level, context={"simulation": True, "spike": True, "step": i+1})
        print(f"   VIX Spike {i+1}: {vix_level:.1f} ({snapshot.regime.value}) - Changement: {snapshot.change_percent:+.1f}%")
        time.sleep(0.1)
    
    print(f"‚úÖ {len(vix_levels_spike)} niveaux VIX spike simul√©s")
    
    # Test 4: Simulation d'un crash VIX
    print("\nüéØ Test 4: Simulation d'un crash VIX")
    
    # Simuler un crash VIX (retour vers NORMAL)
    vix_levels_crash = [58.2, 52.1, 45.8, 38.5, 32.2, 28.1, 24.5, 21.8, 19.2, 16.5]
    
    for i, vix_level in enumerate(vix_levels_crash):
        snapshot = tracker.update_vix_level(vix_level, context={"simulation": True, "crash": True, "step": i+1})
        print(f"   VIX Crash {i+1}: {vix_level:.1f} ({snapshot.regime.value}) - Changement: {snapshot.change_percent:+.1f}%")
        time.sleep(0.1)
    
    print(f"‚úÖ {len(vix_levels_crash)} niveaux VIX crash simul√©s")
    
    # Test 5: Simulation de d√©cisions de trading
    print("\nüéØ Test 5: Simulation de d√©cisions de trading")
    
    # Simuler des d√©cisions de trading dans diff√©rents r√©gimes
    trading_scenarios = [
        (TradingDecisionType.SIGNAL_GENERATED, "success", 0.3, {"signal_strength": 0.8}),
        (TradingDecisionType.POSITION_OPENED, "success", 0.2, {"position_size": 2}),
        (TradingDecisionType.SIGNAL_BLOCKED, "neutral", 0.7, {"reason": "high_vix"}),
        (TradingDecisionType.RISK_ADJUSTED, "success", 0.5, {"risk_reduction": 0.3}),
        (TradingDecisionType.POSITION_CLOSED, "success", 0.1, {"pnl": 150.0}),
        (TradingDecisionType.SIZING_MODIFIED, "success", 0.4, {"size_reduction": 0.5}),
        (TradingDecisionType.SIGNAL_GENERATED, "failure", 0.6, {"signal_strength": 0.4}),
        (TradingDecisionType.POSITION_OPENED, "failure", 0.8, {"position_size": 1}),
    ]
    
    for i, (decision_type, outcome, vix_impact, context) in enumerate(trading_scenarios):
        decision = tracker.record_trading_decision(decision_type, outcome, vix_impact, context)
        print(f"   D√©cision {i+1}: {decision_type.value} ({outcome}) - Impact VIX: {vix_impact:.1f}")
        time.sleep(0.05)
    
    print(f"‚úÖ {len(trading_scenarios)} d√©cisions de trading simul√©es")
    
    # Test 6: D√©marrage du monitoring automatique
    print("\nüéØ Test 6: D√©marrage du monitoring automatique")
    success = tracker.start_monitoring(check_interval_seconds=2)
    print(f"‚úÖ Monitoring d√©marr√©: {success}")
    
    if not success:
        print("‚ùå Impossible de d√©marrer le monitoring - arr√™t du test")
        return
    
    # Test 7: Surveillance pendant quelques cycles
    print("\nüéØ Test 7: Surveillance pendant 8 secondes")
    print("   (Le monitoring va analyser les tendances VIX)")
    
    for i in range(4):  # 4 cycles de 2 secondes = 8 secondes
        time.sleep(2)
        summary = tracker.get_vix_summary()
        print(f"   Cycle {i+1}: {summary['total_snapshots']} snapshots, {summary['total_transitions']} transitions, {summary['alerts_generated']} alertes")
    
    # Test 8: R√©sum√© VIX
    print("\nüéØ Test 8: R√©sum√© VIX")
    summary = tracker.get_vix_summary()
    print(f"‚úÖ R√©sum√© VIX:")
    print(f"   - VIX actuel: {summary['current_vix_level']:.2f}")
    print(f"   - R√©gime actuel: {summary['current_regime']}")
    print(f"   - Total snapshots: {summary['total_snapshots']}")
    print(f"   - Total transitions: {summary['total_transitions']}")
    print(f"   - Total d√©cisions: {summary['total_decisions']}")
    print(f"   - Alertes g√©n√©r√©es: {summary['alerts_generated']}")
    print(f"   - Monitoring actif: {summary['monitoring_active']}")
    
    # Test 9: Performance par r√©gime
    print("\nüéØ Test 9: Performance par r√©gime")
    regime_performance = tracker.get_regime_performance()
    print(f"‚úÖ Performance par r√©gime:")
    for regime_name, perf in regime_performance.items():
        print(f"   - {regime_name}:")
        print(f"     * D√©cisions: {perf['total_decisions']}")
        print(f"     * Taux de succ√®s: {perf['success_rate']:.1%}")
        print(f"     * VIX moyen: {perf['avg_vix_level']:.2f}")
        print(f"     * VIX min/max: {perf['min_vix_level']:.2f}/{perf['max_vix_level']:.2f}")
        print(f"     * Impact moyen: {perf['avg_decision_impact']:.2f}")
    
    # Test 10: Transitions r√©centes
    print("\nüéØ Test 10: Transitions r√©centes")
    recent_transitions = tracker.get_recent_transitions(5)
    print(f"‚úÖ Transitions r√©centes ({len(recent_transitions)}):")
    for transition in recent_transitions:
        print(f"   - {transition['timestamp']}: {transition['from_regime']} ‚Üí {transition['to_regime']}")
        print(f"     Type: {transition['transition_type']}")
        print(f"     VIX: {transition['vix_level']:.2f}")
        print(f"     Impact: {transition['impact_score']:.2f}")
        print(f"     Implications: {', '.join(transition['trading_implications'][:2])}")
    
    # Test 11: Alertes r√©centes
    print("\nüéØ Test 11: Alertes r√©centes")
    recent_alerts = tracker.get_recent_alerts(10)
    print(f"‚úÖ Alertes r√©centes ({len(recent_alerts)}):")
    for alert in recent_alerts:
        print(f"   - {alert['timestamp']}: {alert['severity'].upper()} - {alert['message']}")
        print(f"     R√©gime: {alert['regime']}")
    
    # Test 12: Export des donn√©es
    print("\nüéØ Test 12: Export des donn√©es")
    try:
        exported_data = tracker.export_vix_data('json')
        print(f"‚úÖ Donn√©es VIX export√©es: {len(exported_data)} caract√®res")
        print(f"   (Format JSON avec r√©sum√©, performance, transitions, alertes)")
    except Exception as e:
        print(f"‚ùå Erreur export: {e}")
    
    # Test 13: Arr√™t du monitoring
    print("\nüéØ Test 13: Arr√™t du monitoring")
    tracker.stop_monitoring()
    time.sleep(2)  # Attendre l'arr√™t
    
    final_summary = tracker.get_vix_summary()
    print(f"‚úÖ Monitoring arr√™t√©: {not final_summary['monitoring_active']}")
    
    # Test 14: Statistiques finales
    print("\nüéØ Test 14: Statistiques finales")
    print(f"‚úÖ R√©sum√© du test:")
    print(f"   - Snapshots VIX: {final_summary['total_snapshots']}")
    print(f"   - Transitions d√©tect√©es: {final_summary['total_transitions']}")
    print(f"   - D√©cisions enregistr√©es: {final_summary['total_decisions']}")
    print(f"   - Alertes g√©n√©r√©es: {final_summary['alerts_generated']}")
    print(f"   - R√©gimes VIX test√©s: {len([r for r in regime_performance.values() if r['total_decisions'] > 0])}")
    print(f"   - Dur√©e du test: ~{len(vix_levels_normal + vix_levels_spike + vix_levels_crash) * 0.1:.1f}s")
    
    print(f"\nüéâ Test du tracking VIX termin√©!")
    print(f"üìä Le syst√®me de tracking VIX est {'‚úÖ OP√âRATIONNEL' if final_summary['total_snapshots'] > 0 else '‚ùå NON FONCTIONNEL'}")

if __name__ == "__main__":
    test_vix_regime_tracker()

