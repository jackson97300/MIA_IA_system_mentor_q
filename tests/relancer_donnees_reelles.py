
#!/usr/bin/env python3
"""
Relance syst√®me avec donn√©es ES r√©elles
"""

import os
import sys
import subprocess
import time
from datetime import datetime

def relancer_avec_donnees_reelles():
    """Relancer le syst√®me avec donn√©es ES r√©elles"""
    
    print("üöÄ Relance avec donn√©es ES r√©elles...")
    
    # 1. V√©rifier configuration
    print("\nüîç √âtape 1: V√©rification configuration")
    try:
        result = subprocess.run("python verifier_donnees_reelles.py", shell=True, capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è Erreurs: {result.stderr}")
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
    
    # 2. Test donn√©es r√©elles
    print("\nüß™ √âtape 2: Test donn√©es r√©elles")
    try:
        result = subprocess.run("python test_donnees_reelles.py", shell=True, capture_output=True, text=True)
        print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è Erreurs: {result.stderr}")
    except Exception as e:
        print(f"‚ùå Erreur test: {e}")
    
    # 3. Attendre un peu
    print("\n‚è∞ Attente 5 secondes...")
    time.sleep(5)
    
    # 4. Relancer le syst√®me
    print("\nüöÄ √âtape 3: Relance syst√®me")
    restart_commands = [
        "python launch_24_7_orderflow_trading.py",
        "python lance_mia_ia_tws.py"
    ]
    
    for command in restart_commands:
        if os.path.exists(command.split()[1]):
            try:
                print(f"   üöÄ Lancement: {command}")
                subprocess.Popen(command, shell=True)
                print(f"   ‚úÖ Syst√®me relanc√©: {command}")
                break
            except Exception as e:
                print(f"   ‚ùå Erreur relance: {command} - {e}")
    
    print("\n‚úÖ Relance avec donn√©es r√©elles termin√©e")

if __name__ == "__main__":
    relancer_avec_donnees_reelles()
