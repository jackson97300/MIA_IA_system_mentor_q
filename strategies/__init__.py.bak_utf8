"""
MIA_IA_SYSTEM - Strategies Package
Orchestration compl√®te des strat√©gies de trading
Version: Production Ready avec SignalGenerator
# Configuration encodage UTF-8
import sys
import io
import codecs

# Configuration plus robuste de l'encodage UTF-8
if sys.platform == "win32":
    # √âviter de reconfigurer si d√©j√† fait
    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
    else:
        # Fallback pour Python < 3.7
        try:
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')
        except:
            # Si erreur, ne rien faire (√©viter le crash)
            pass



COMPOSANTS :
- TrendStrategy : Strat√©gie de tendance
- RangeStrategy : Strat√©gie de range  
- SignalGenerator : CERVEAU CENTRAL - Orchestrateur de tous les signaux
- StrategySelector : S√©lecteur intelligent de strat√©gies

WORKFLOW PRINCIPAL :
MarketData ‚Üí SignalGenerator ‚Üí FinalSignal ‚Üí Execution

Le SignalGenerator est le point d'entr√©e principal pour g√©n√©rer
des signaux de trading en orchestrant :
1. Bataille Navale (votre m√©thode signature)
2. Feature Calculator (8 features + confluence)
3. Market Regime Detector (trend vs range)
4. Trend/Range Strategies selon r√©gime
5. Confluence Analyzer (filtrage final)
"""

# Strategy classes
from .trend_strategy import (
    TrendStrategy, TrendSignalData, TrendSignalType, TrendDirection
)
from .range_strategy import (
    RangeStrategy, RangeSignalData, RangeSignalType
)

# üß† CERVEAU CENTRAL - Point d'entr√©e principal
from .signal_generator import (
    SignalGenerator, FinalSignal, SignalComponents,
    SignalDecision, SignalSource, QualityLevel,
    create_signal_generator, generate_trading_signal
)

# Strategy selector (si existe)
try:
    from .strategy_selector import (
        StrategySelector, StrategySelectionResult
    )
    STRATEGY_SELECTOR_AVAILABLE = True
except ImportError:
    STRATEGY_SELECTOR_AVAILABLE = False

# Factory functions principales
def create_complete_signal_system(config=None):
    """
    üéØ FACTORY PRINCIPALE - Syst√®me complet de signaux
    
    Cr√©e un syst√®me complet pr√™t √† l'emploi :
    - SignalGenerator configur√©
    - Toutes les strat√©gies int√©gr√©es
    - Pr√™t pour g√©n√©ration signaux temps r√©el
    """
    return create_signal_generator(config)

def analyze_trading_opportunity(market_data, **kwargs):
    """
    üöÄ POINT D'ENTR√âE PRINCIPAL - Analyse opportunit√© compl√®te
    
    Usage simplifi√© :
        signal = analyze_trading_opportunity(market_data, order_flow, options_data)
        if signal.decision == SignalDecision.EXECUTE_LONG:
            execute_trade(signal)
    """
    return generate_trading_signal(market_data, **kwargs)

# Version info
__version__ = "3.0.0"  # Version avec SignalGenerator
__author__ = "MIA Trading System"

# Exports principaux
__all__ = [
    # üß† CERVEAU CENTRAL (priorit√© 1)
    'SignalGenerator',
    'FinalSignal', 
    'SignalComponents',
    'SignalDecision',
    'SignalSource',
    'QualityLevel',
    
    # Factory functions principales
    'create_signal_generator',
    'generate_trading_signal',
    'create_complete_signal_system',
    'analyze_trading_opportunity',
    
    # Strat√©gies individuelles
    'TrendStrategy',
    'RangeStrategy',
    'TrendSignalData',
    'RangeSignalData',
    'TrendSignalType',
    'TrendDirection',
    
    # Info version
    '__version__'
]

# Usage simplifi√© pour utilisateurs
def get_signal_now(market_data, **data_sources):
    """
    üéØ USAGE ULTRA SIMPLIFI√â
    
    Point d'entr√©e en 1 ligne pour obtenir un signal :
    
    signal = get_signal_now(market_data, order_flow=order_flow)
    """
    generator = create_signal_generator()
    return generator.generate_signal(market_data, **data_sources)

# Ajout √† __all__
__all__.append('get_signal_now')
