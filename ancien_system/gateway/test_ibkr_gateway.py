#!/usr/bin/env python3
"""
Test de connexion au Client Portal Gateway IBKR BETA
"""

import sys
import time
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent))

from core.ibkr_beta_connector import IBKRBetaConnector, IBKRBetaConfig

def test_gateway_connection():
    """Tester la connexion au gateway IBKR"""
    
    print("üîå Test de connexion au Client Portal Gateway IBKR BETA")
    print("=" * 60)
    
    # Configuration
    config = IBKRBetaConfig()
    print(f"üìç URL de base: {config.base_url}")
    print(f"üîê WebSocket URL: {config.ws_url}")
    
    # Cr√©er le connecteur
    connector = IBKRBetaConnector(config)
    
    try:
        # 1. Test de connexion
        print("\n1Ô∏è‚É£ Test de connexion au gateway...")
        if connector.connect():
            print("‚úÖ Gateway accessible")
        else:
            print("‚ùå Gateway non accessible")
            print("üí° V√©rifiez que le gateway est d√©marr√© sur https://localhost:5000/")
            return False
        
        # 2. Test d'authentification
        print("\n2Ô∏è‚É£ Test d'authentification...")
        print("üåê Ouvrez votre navigateur et allez sur: https://localhost:5000/")
        print("üìù Connectez-vous avec vos identifiants IBKR")
        
        if connector.authenticate():
            print("‚úÖ Authentification r√©ussie!")
        else:
            print("‚ùå Authentification √©chou√©e")
            return False
        
        # 3. Test r√©cup√©ration compte
        print("\n3Ô∏è‚É£ Test r√©cup√©ration informations compte...")
        account_info = connector.get_account_info()
        if account_info:
            print("‚úÖ Informations compte r√©cup√©r√©es")
            print(f"   Compte: {account_info.get('accounts', [])}")
        else:
            print("‚ùå Impossible de r√©cup√©rer les informations compte")
        
        # 4. Test recherche ES futures
        print("\n4Ô∏è‚É£ Test recherche ES futures...")
        es_conid = connector.get_es_futures_conid()
        if es_conid:
            print(f"‚úÖ ES futures trouv√©: {es_conid}")
        else:
            print("‚ùå ES futures non trouv√©")
        
        # 5. Test donn√©es de march√©
        if es_conid:
            print("\n5Ô∏è‚É£ Test donn√©es de march√© ES...")
            market_data = connector.get_market_data(es_conid)
            if market_data:
                print("‚úÖ Donn√©es de march√© r√©cup√©r√©es")
                print(f"   Donn√©es: {market_data}")
            else:
                print("‚ùå Impossible de r√©cup√©rer les donn√©es de march√©")
        
        print("\nüéâ Tests termin√©s avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False
        
    finally:
        connector.disconnect()

if __name__ == "__main__":
    success = test_gateway_connection()
    if not success:
        print("\nüí° Solutions possibles:")
        print("   1. V√©rifiez que le gateway est d√©marr√©")
        print("   2. V√©rifiez que le port 5000 est libre")
        print("   3. V√©rifiez vos identifiants IBKR")
        print("   4. V√©rifiez la configuration SSL")
        sys.exit(1)

