#!/usr/bin/env python3
"""
üîç DIAGNOSTIC FEATURES - MIA_IA_SYSTEM
Test de diagnostic pour identifier les probl√®mes dans les modules de features
"""

import sys
import time
import numpy as np
import pandas as pd
from pathlib import Path
from datetime import datetime, timedelta

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

def test_imports():
    """Test des imports de base"""
    print("üîç TEST 1: Imports de base")
    
    try:
        from core.logger import get_logger
        print("‚úÖ core.logger import√©")
    except Exception as e:
        print(f"‚ùå core.logger: {e}")
        return False
    
    try:
        from core.base_types import MarketData, OrderFlowData
        print("‚úÖ core.base_types import√©")
    except Exception as e:
        print(f"‚ùå core.base_types: {e}")
        return False
    
    return True

def test_feature_calculator_imports():
    """Test des imports feature_calculator"""
    print("\nüîç TEST 2: Feature Calculator imports")
    
    try:
        from features.feature_calculator import (
            FeatureCalculator, 
            CONFLUENCE_WEIGHTS,
            TRADING_THRESHOLDS
        )
        print("‚úÖ FeatureCalculator import√©")
        print(f"‚úÖ CONFLUENCE_WEIGHTS: {CONFLUENCE_WEIGHTS}")
        print(f"‚úÖ TRADING_THRESHOLDS: {TRADING_THRESHOLDS}")
        
        # Test validation poids
        total_weight = sum(CONFLUENCE_WEIGHTS.values())
        print(f"‚úÖ Total poids: {total_weight:.3f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå FeatureCalculator: {e}")
        return False

def test_smart_money_imports():
    """Test des imports smart_money_tracker"""
    print("\nüîç TEST 3: Smart Money imports")
    
    try:
        from features.smart_money_tracker import (
            SmartMoneyTracker,
            SmartMoneyAnalysis
        )
        print("‚úÖ SmartMoneyTracker import√©")
        
        # Test cr√©ation tracker
        tracker = SmartMoneyTracker()
        print("‚úÖ SmartMoneyTracker cr√©√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå SmartMoneyTracker: {e}")
        return False

def test_delta_divergence_imports():
    """Test des imports delta_divergence"""
    print("\nüîç TEST 4: Delta Divergence imports")
    
    try:
        from features.advanced.delta_divergence import (
            DeltaDivergenceDetector,
            DeltaDivergenceResult
        )
        print("‚úÖ DeltaDivergenceDetector import√©")
        
        # Test cr√©ation d√©tecteur
        detector = DeltaDivergenceDetector()
        print("‚úÖ DeltaDivergenceDetector cr√©√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå DeltaDivergenceDetector: {e}")
        return False

def test_volatility_regime_imports():
    """Test des imports volatility_regime"""
    print("\nüîç TEST 5: Volatility Regime imports")
    
    try:
        from features.advanced.volatility_regime import (
            VolatilityRegimeCalculator,
            VolatilityRegimeResult
        )
        print("‚úÖ VolatilityRegimeCalculator import√©")
        
        # Test cr√©ation calculateur
        calculator = VolatilityRegimeCalculator()
        print("‚úÖ VolatilityRegimeCalculator cr√©√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå VolatilityRegimeCalculator: {e}")
        return False

def test_order_book_imbalance_imports():
    """Test des imports order_book_imbalance"""
    print("\nüîç TEST 6: Order Book Imbalance imports")
    
    try:
        from features.order_book_imbalance import (
            calculate_order_book_imbalance_feature,
            OrderBookSnapshot
        )
        print("‚úÖ OrderBookSnapshot import√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå OrderBookSnapshot: {e}")
        return False

def test_mtf_confluence_imports():
    """Test des imports mtf_confluence_elite"""
    print("\nüîç TEST 7: MTF Confluence imports")
    
    try:
        from features.mtf_confluence_elite import (
            calculate_mtf_confluence_score,
            EliteMTFConfluence
        )
        print("‚úÖ EliteMTFConfluence import√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå EliteMTFConfluence: {e}")
        return False

def run_diagnostic():
    """Ex√©cute le diagnostic complet"""
    print("üöÄ D√âMARRAGE DIAGNOSTIC FEATURES")
    print("="*50)
    
    tests = [
        test_imports,
        test_feature_calculator_imports,
        test_smart_money_imports,
        test_delta_divergence_imports,
        test_volatility_regime_imports,
        test_order_book_imbalance_imports,
        test_mtf_confluence_imports
    ]
    
    results = {}
    for test in tests:
        results[test.__name__] = test()
    
    # R√©sultats finaux
    print("\n" + "="*50)
    print("üìä R√âSULTATS DIAGNOSTIC")
    print("="*50)
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for test_name, result in results.items():
        status = "‚úÖ SUCC√àS" if result else "‚ùå √âCHEC"
        print(f"{test_name}: {status}")
    
    print(f"\nüìà R√âSULTAT GLOBAL: {passed_tests}/{total_tests} tests r√©ussis")
    
    if passed_tests == total_tests:
        print("üéâ TOUS LES IMPORTS SONT CORRECTS")
    else:
        print("‚ö†Ô∏è CERTAINS IMPORTS ONT √âCHOU√â - CORRECTION REQUISE")

def main():
    """Fonction principale"""
    run_diagnostic()

if __name__ == "__main__":
    main() 