#!/usr/bin/env python3
"""
Script pour trouver le bon conid ES futures
"""

import sys
import json
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent))

from core.ibkr_beta_connector import IBKRBetaConnector, IBKRBetaConfig

def find_es_conid():
    """Trouver le bon conid pour ES futures"""
    
    print("üîç Recherche du conid ES futures")
    print("=" * 50)
    
    # Configuration
    config = IBKRBetaConfig()
    connector = IBKRBetaConnector(config)
    
    try:
        # Connexion
        if not connector.connect():
            print("‚ùå Impossible de se connecter")
            return None
        
        # Authentification
        if not connector.config.authenticated:
            if not connector.authenticate():
                print("‚ùå Authentification √©chou√©e")
                return None
        
        print("‚úÖ Connect√© et authentifi√©")
        
        # Recherche ES futures
        print("\nüîç Recherche contrats ES...")
        
        # Essayer diff√©rents symboles
        symbols_to_try = [
            "ES",
            "ES1!",
            "ESZ4",
            "ESM4",
            "ESU4",
            "ESH5",
            "ESM5"
        ]
        
        for symbol in symbols_to_try:
            print(f"\n   Recherche: {symbol}")
            contracts = connector.search_contract(symbol, "FUT")
            
            if contracts:
                print(f"   ‚úÖ {len(contracts)} contrat(s) trouv√©(s)")
                
                # Afficher les d√©tails des contrats
                for i, contract in enumerate(contracts[:5]):  # Limiter √† 5
                    print(f"      Contrat {i+1}:")
                    print(f"         Conid: {contract.get('conid')}")
                    print(f"         Header: {contract.get('companyHeader', 'N/A')}")
                    print(f"         Description: {contract.get('description', 'N/A')}")
                    print(f"         Symbol: {contract.get('symbol', 'N/A')}")
                    print(f"         SecType: {contract.get('secType', 'N/A')}")
                    
                    # V√©rifier si c'est un vrai contrat ES futures
                    contract_info = str(contract.get('companyHeader', '')) + str(contract.get('description', ''))
                    if 'ES' in contract_info and ('future' in contract_info.lower() or 'e-mini' in contract_info.lower()):
                        conid = contract.get('conid')
                        if conid and conid != "-1":
                            print(f"         üéØ CONTRAT ES FUTURES TROUV√â!")
                            print(f"         üìã Conid √† utiliser: {conid}")
                            return conid
            else:
                print(f"   ‚ùå Aucun contrat trouv√©")
        
        print("\n‚ùå Aucun contrat ES futures valide trouv√©")
        return None
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return None
        
    finally:
        connector.disconnect()

def test_conid(conid):
    """Tester un conid sp√©cifique"""
    print(f"\nüß™ Test du conid: {conid}")
    
    config = IBKRBetaConfig()
    connector = IBKRBetaConnector(config)
    
    try:
        if not connector.connect() or not connector.authenticate():
            return False
        
        # Test donn√©es de march√©
        market_data = connector.get_market_data(conid, ["31", "84"])  # bid, last
        if market_data:
            print(f"‚úÖ Conid {conid} valide - donn√©es r√©cup√©r√©es")
            print(f"   Donn√©es: {market_data}")
            return True
        else:
            print(f"‚ùå Conid {conid} invalide")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur test conid {conid}: {e}")
        return False
        
    finally:
        connector.disconnect()

if __name__ == "__main__":
    # Rechercher le conid
    es_conid = find_es_conid()
    
    if es_conid:
        print(f"\nüéâ Conid ES futures trouv√©: {es_conid}")
        
        # Tester le conid
        if test_conid(es_conid):
            print(f"\n‚úÖ Le conid {es_conid} fonctionne correctement!")
            print(f"üí° Utilisez ce conid dans vos scripts: {es_conid}")
        else:
            print(f"\n‚ö†Ô∏è Le conid {es_conid} ne fonctionne pas")
    else:
        print("\n‚ùå Aucun conid ES futures trouv√©")
        print("üí° Essayez de:")
        print("   1. V√©rifier que vous avez acc√®s aux futures")
        print("   2. Rechercher manuellement dans TWS")
        print("   3. V√©rifier que le march√© est ouvert")

