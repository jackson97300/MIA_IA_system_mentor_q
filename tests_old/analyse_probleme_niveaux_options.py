#!/usr/bin/env python3
"""
MIA_IA_SYSTEM - Analyse Probl√®me Niveaux Options
Analyse d√©taill√©e du probl√®me de niveaux options non confirm√©s
"""

import os
import sys
import asyncio
from datetime import datetime

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def analyser_probleme_niveaux():
    """Analyse d√©taill√©e du probl√®me niveaux options"""
    
    print("MIA_IA_SYSTEM - ANALYSE PROBL√àME NIVEAUX OPTIONS")
    print("=" * 60)
    print(f"Analyse: {datetime.now()}")
    print("=" * 60)
    
    # 1. V√©rification configuration syst√®me
    print("\n1. V√âRIFICATION CONFIGURATION SYST√àME")
    print("-" * 40)
    
    try:
        from config.automation_config import get_automation_config
        config = get_automation_config()
        print("‚úÖ Configuration charg√©e")
        
        # V√©rifier param√®tres critiques
        print(f"   Simulation mode: {getattr(config, 'simulation_mode', 'N/A')}")
        print(f"   Use real data: {getattr(config, 'USE_REAL_DATA', 'N/A')}")
        print(f"   Force real data: {getattr(config, 'FORCE_REAL_DATA', 'N/A')}")
        
    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")
    
    # 2. V√©rification connexion IBKR
    print("\n2. V√âRIFICATION CONNEXION IBKR")
    print("-" * 40)
    
    try:
        from core.ibkr_connector import IBKRConnector
        
        config_ibkr = {
            'ibkr_host': '127.0.0.1',
            'ibkr_port': 7497,
            'ibkr_client_id': 1,
            'simulation_mode': False,
            'require_real_data': True,
            'fallback_to_saved_data': False
        }
        
        connector = IBKRConnector(config_ibkr)
        print("‚úÖ IBKRConnector cr√©√©")
        
        # Test connexion rapide
        try:
            connected = await asyncio.wait_for(connector.connect(), timeout=5.0)
            if connected:
                print("‚úÖ Connexion IBKR r√©ussie")
                print(f"   Status: {connector.connection_status}")
                print(f"   Connected: {connector.is_connected_flag}")
            else:
                print("‚ùå Connexion IBKR √©chou√©e")
                return False
        except asyncio.TimeoutError:
            print("‚ùå Timeout connexion IBKR")
            return False
        except Exception as e:
            print(f"‚ùå Erreur connexion: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur IBKR: {e}")
        return False
    
    # 3. V√©rification SPX Options Retriever
    print("\n3. V√âRIFICATION SPX OPTIONS RETRIEVER")
    print("-" * 40)
    
    try:
        from features.spx_options_retriever import SPXOptionsRetriever
        
        spx_retriever = SPXOptionsRetriever(connector)
        print("‚úÖ SPXOptionsRetriever cr√©√©")
        
        # V√©rifier attributs critiques
        print(f"   Force real data: {getattr(spx_retriever, 'force_real_data', 'N/A')}")
        print(f"   Use ib insync: {getattr(spx_retriever, 'use_ib_insync', 'N/A')}")
        
        # Test r√©cup√©ration donn√©es
        print("\n   Test r√©cup√©ration donn√©es SPX...")
        spx_data = await spx_retriever.get_real_spx_data()
        
        print(f"   Donn√©es r√©cup√©r√©es: {spx_data is not None}")
        if spx_data:
            print(f"   Source: {spx_data.get('data_source', 'N/A')}")
            print(f"   Put/Call Ratio: {spx_data.get('put_call_ratio', 'N/A')}")
            print(f"   VIX Level: {spx_data.get('vix_level', 'N/A')}")
            
            # Analyse source
            data_source = spx_data.get('data_source', 'N/A')
            if data_source == 'ibkr_real':
                print("‚úÖ Source confirm√©e comme r√©elle")
                return True
            else:
                print(f"‚ùå Source non r√©elle: {data_source}")
                
                # Analyse causes possibles
                print("\n   ANALYSE CAUSES POSSIBLES:")
                print("   - TWS non connect√© ou port ferm√©")
                print("   - Souscription donn√©es SPX non activ√©e")
                print("   - Donn√©es SPX non disponibles en temps r√©el")
                print("   - Configuration IBKR incorrecte")
                print("   - Fallback vers donn√©es simul√©es activ√©")
                
                return False
        else:
            print("‚ùå Aucune donn√©e r√©cup√©r√©e")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur SPX retriever: {e}")
        return False

def main():
    """Fonction principale"""
    try:
        print("D√©marrage analyse probl√®me niveaux options...")
        
        # Ex√©cuter analyse
        success = asyncio.run(analyser_probleme_niveaux())
        
        print("\n" + "=" * 60)
        print("R√âSULTATS ANALYSE")
        print("=" * 60)
        
        if success:
            print("‚úÖ SUCC√àS: Niveaux options r√©els confirm√©s")
            print("‚úÖ Syst√®me pr√™t pour test 2h")
            print("üöÄ Lancement recommand√©: python lance_mia_ia_tws.py")
        else:
            print("‚ùå √âCHEC: Niveaux options non confirm√©s")
            print("\nüîß ACTIONS CORRECTIVES RECOMMAND√âES:")
            print("1. V√©rifier TWS est d√©marr√© et connect√©")
            print("2. V√©rifier port 7497 ouvert")
            print("3. Activer souscription donn√©es SPX options")
            print("4. V√©rifier configuration IBKR")
            print("5. S'assurer march√©s SPX sont ouverts")
            print("6. V√©rifier pas de fallback vers simulation")
        
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå Erreur analyse: {e}")

if __name__ == "__main__":
    main()


