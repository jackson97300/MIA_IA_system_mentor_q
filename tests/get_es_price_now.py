#!/usr/bin/env python3
"""
R√©cup√©rer le prix ES actuel (6480) avec Client Portal Gateway BETA
"""

import sys
import json
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

from core.ibkr_beta_connector import IBKRBetaConnector, IBKRBetaConfig

def get_es_price():
    """R√©cup√©rer le prix ES actuel"""
    
    print("üöÄ R√©cup√©ration prix ES actuel")
    print("Prix attendu: ~6480")
    print("=" * 40)
    
    config = IBKRBetaConfig()
    connector = IBKRBetaConnector(config)
    
    try:
        # Connexion et authentification
        print("üîå Connexion...")
        if not connector.connect() or not connector.authenticate():
            print("‚ùå Connexion √©chou√©e")
            return None
        
        print("‚úÖ Connect√© et authentifi√©")
        
        # Conid ES connu (265598)
        es_conid = "265598"
        print(f"\nüìä R√©cup√©ration prix ES (conid: {es_conid})")
        
        # R√©cup√©rer donn√©es
        fields = ["31", "83", "84", "86"]  # bid, ask, last, volume
        market_data = connector.get_market_data(es_conid, fields)
        
        if market_data and isinstance(market_data, list) and len(market_data) > 0:
            data = market_data[0]
            
            # Extraire prix bruts
            bid_raw = float(data.get('31', 0))
            ask_raw = float(data.get('83', 0))
            last_raw = float(data.get('84', 0))
            volume = data.get('86', 'N/A')
            
            # Calculer multiplicateur (6480 / prix brut)
            if bid_raw > 0:
                multiplier = 6480 / bid_raw
                print(f"   Multiplicateur calcul√©: {multiplier:.2f}")
            else:
                multiplier = 28  # Valeur par d√©faut
            
            # Appliquer correction
            bid_corrected = bid_raw * multiplier
            ask_corrected = ask_raw * multiplier
            last_corrected = last_raw * multiplier
            
            print(f"‚úÖ Prix ES corrig√©s:")
            print(f"   Bid: {bid_corrected:.2f} (brut: {bid_raw})")
            print(f"   Ask: {ask_corrected:.2f} (brut: {ask_raw})")
            print(f"   Last: {last_corrected:.2f} (brut: {last_raw})")
            print(f"   Volume: {volume}")
            
            # R√©cup√©rer donn√©es historiques
            print(f"\nüìà Donn√©es historiques...")
            historical = connector.get_historical_data(es_conid, "1d", "1min")
            
            if historical and len(historical) > 0:
                print(f"   ‚úÖ {len(historical)} barres r√©cup√©r√©es")
                
                # Corriger derni√®re barre
                last_bar = historical[-1]
                corrected_bar = {
                    'open': float(last_bar.get('o', 0)) * multiplier,
                    'high': float(last_bar.get('h', 0)) * multiplier,
                    'low': float(last_bar.get('l', 0)) * multiplier,
                    'close': float(last_bar.get('c', 0)) * multiplier,
                    'volume': last_bar.get('v')
                }
                
                print(f"   Derni√®re barre corrig√©e:")
                print(f"   O={corrected_bar['open']:.2f}, H={corrected_bar['high']:.2f}, L={corrected_bar['low']:.2f}, C={corrected_bar['close']:.2f}, V={corrected_bar['volume']}")
            
            # Pr√©parer r√©sultat
            result = {
                'current_price': {
                    'bid': bid_corrected,
                    'ask': ask_corrected,
                    'last': last_corrected,
                    'volume': volume
                },
                'raw_data': {
                    'bid': bid_raw,
                    'ask': ask_raw,
                    'last': last_raw
                },
                'correction': {
                    'multiplier': multiplier,
                    'conid': es_conid
                }
            }
            
            print(f"\nüéâ Prix ES actuel: {last_corrected:.2f}")
            print(f"üí° Multiplicateur: x{multiplier:.2f}")
            
            return result
            
        else:
            print("‚ùå Pas de donn√©es")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return None
    finally:
        connector.disconnect()

def save_price_data(data, filename="es_price_current.json"):
    """Sauvegarder les donn√©es de prix"""
    try:
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
        print(f"üíæ Donn√©es sauvegard√©es: {filename}")
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde: {e}")

if __name__ == "__main__":
    # R√©cup√©rer prix ES
    price_data = get_es_price()
    
    if price_data:
        # Sauvegarder
        save_price_data(price_data)
        
        print(f"\n‚úÖ Prix ES r√©cup√©r√© avec succ√®s!")
        print(f"   Prix actuel: {price_data['current_price']['last']:.2f}")
        print(f"   Conid utilis√©: {price_data['correction']['conid']}")
        print(f"   Multiplicateur: x{price_data['correction']['multiplier']:.2f}")
    else:
        print("\n‚ùå Impossible de r√©cup√©rer le prix ES")

