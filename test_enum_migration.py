#!/usr/bin/env python3
"""
üß™ TEST MIGRATION ENUMS - MIA_IA_SYSTEM
=======================================

Script de test pour v√©rifier que la migration des enums centralis√©s
fonctionne correctement sans casser le syst√®me existant.

TESTS EFFECTU√âS :
1. Import du module centralis√© core.enums
2. V√©rification des enums dans les fichiers migr√©s
3. Test de compatibilit√© avec les anciens imports
4. Validation des valeurs et m√©thodes
"""

import sys
from pathlib import Path
import traceback

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent))

def test_centralized_enums():
    """Test du module centralis√© core.enums"""
    print("üîß Test du module centralis√© core.enums...")
    
    try:
        from core.enums import (
            AlertLevel, AlertSeverity, AlertCategory,
            PerformanceMetric, PerformancePeriod,
            ComponentStatus, MetricType
        )
        
        # Test AlertLevel
        assert AlertLevel.INFO.value == "info"
        assert AlertLevel.WARNING.value == "warning"
        assert AlertLevel.CRITICAL.value == "critical"
        assert AlertLevel.EMERGENCY.value == "emergency"
        
        # Test AlertSeverity
        assert AlertSeverity.INFO.value == "info"
        assert AlertSeverity.ERROR.value == "error"
        assert AlertSeverity.CRITICAL.value == "critical"
        
        # Test des m√©thodes utilitaires
        assert AlertLevel.from_string("warning") == AlertLevel.WARNING
        assert AlertSeverity.from_string("critical") == AlertSeverity.CRITICAL
        
        print("‚úÖ Module centralis√© core.enums : OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur module centralis√© : {e}")
        traceback.print_exc()
        return False

def test_migrated_files():
    """Test des fichiers migr√©s"""
    print("\nüîÑ Test des fichiers migr√©s...")
    
    test_files = [
        "core.menthorq_staleness_monitor",
        "monitoring.performance_tracker", 
        "scripts.analyze_performance",
        "performance.automation_metrics",
        "monitoring.live_monitor"
    ]
    
    success_count = 0
    
    for module_name in test_files:
        try:
            print(f"  üìÅ Test {module_name}...")
            
            # Import du module
            module = __import__(module_name, fromlist=['AlertLevel', 'AlertSeverity'])
            
            # Test des enums
            if hasattr(module, 'AlertLevel'):
                alert_level = module.AlertLevel
                assert alert_level.INFO.value == "info"
                assert alert_level.CRITICAL.value == "critical"
                print(f"    ‚úÖ AlertLevel : OK")
            
            if hasattr(module, 'AlertSeverity'):
                alert_severity = module.AlertSeverity
                assert alert_severity.INFO.value == "info"
                assert alert_severity.CRITICAL.value == "critical"
                print(f"    ‚úÖ AlertSeverity : OK")
            
            success_count += 1
            
        except Exception as e:
            print(f"    ‚ùå Erreur {module_name} : {e}")
            traceback.print_exc()
    
    print(f"\nüìä R√©sultat : {success_count}/{len(test_files)} fichiers migr√©s OK")
    return success_count == len(test_files)

def test_enum_usage():
    """Test d'utilisation des enums dans le contexte r√©el"""
    print("\nüéØ Test d'utilisation des enums...")
    
    try:
        # Test avec core.menthorq_staleness_monitor
        from core.menthorq_staleness_monitor import AlertLevel
        
        # Simulation d'utilisation
        alert_level = AlertLevel.CRITICAL
        assert alert_level.value == "critical"
        
        # Test avec monitoring.performance_tracker
        from monitoring.performance_tracker import AlertLevel as PTAlertLevel
        assert PTAlertLevel.WARNING.value == "warning"
        
        # Test avec performance.automation_metrics
        from performance.automation_metrics import AlertSeverity
        assert AlertSeverity.EMERGENCY.value == "emergency"
        
        print("‚úÖ Utilisation des enums : OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur utilisation enums : {e}")
        traceback.print_exc()
        return False

def test_enum_compatibility():
    """Test de compatibilit√© avec les anciens imports"""
    print("\nüîÑ Test de compatibilit√©...")
    
    try:
        # Test que les anciens imports fonctionnent toujours
        from core.menthorq_staleness_monitor import AlertLevel as MQAlertLevel
        from monitoring.performance_tracker import AlertLevel as PTAlertLevel
        from scripts.analyze_performance import AlertLevel as SAAlertLevel
        
        # V√©rification que tous pointent vers les m√™mes valeurs
        assert MQAlertLevel.INFO.value == PTAlertLevel.INFO.value
        assert PTAlertLevel.INFO.value == SAAlertLevel.INFO.value
        
        # Test des m√©thodes de conversion
        from core.enums import AlertLevel
        assert AlertLevel.from_string("warning") == AlertLevel.WARNING
        assert AlertLevel.from_string("invalid") == AlertLevel.INFO  # Fallback
        
        print("‚úÖ Compatibilit√© : OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur compatibilit√© : {e}")
        traceback.print_exc()
        return False

def test_enum_serialization():
    """Test de s√©rialisation/d√©s√©rialisation"""
    print("\nüíæ Test de s√©rialisation...")
    
    try:
        from core.enums import AlertLevel, serialize_enum, deserialize_enum
        
        # Test s√©rialisation
        alert = AlertLevel.CRITICAL
        serialized = serialize_enum(alert)
        
        assert serialized['enum_type'] == 'AlertLevel'
        assert serialized['value'] == 'critical'
        assert serialized['name'] == 'CRITICAL'
        
        # Test d√©s√©rialisation
        deserialized = deserialize_enum(serialized)
        assert deserialized == AlertLevel.CRITICAL
        
        print("‚úÖ S√©rialisation : OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur s√©rialisation : {e}")
        traceback.print_exc()
        return False

def main():
    """Fonction principale de test"""
    print("üß™ D√âMARRAGE DES TESTS DE MIGRATION ENUMS")
    print("=" * 50)
    
    tests = [
        ("Module centralis√©", test_centralized_enums),
        ("Fichiers migr√©s", test_migrated_files),
        ("Utilisation enums", test_enum_usage),
        ("Compatibilit√©", test_enum_compatibility),
        ("S√©rialisation", test_enum_serialization)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}...")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur critique dans {test_name} : {e}")
            results.append((test_name, False))
    
    # R√©sum√© final
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    print(f"\nüéØ R√âSULTAT FINAL : {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ MIGRATION R√âUSSIE ! Tous les tests passent.")
        print("‚úÖ Le syst√®me est pr√™t pour la phase de nettoyage.")
        return True
    else:
        print("‚ö†Ô∏è  MIGRATION PARTIELLE. V√©rifiez les erreurs ci-dessus.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)


