#!/usr/bin/env python3
"""
üîß Correction recherche contrats ES Futures
Script pour trouver les vrais contrats ES avec les bons param√®tres
"""

import sys
import requests
import json
from pathlib import Path
from datetime import datetime

# Ajouter le chemin du projet
sys.path.append(str(Path(__file__).parent.parent))

def find_real_es_contracts():
    """Trouver les vrais contrats ES"""
    print("üîß Recherche des vrais contrats ES Futures")
    print("="*50)
    
    base_url = "https://localhost:5000/v1/api"
    
    try:
        # 1. V√©rifier l'authentification
        print("üîê V√©rification authentification...")
        auth_response = requests.get(
            f"{base_url}/iserver/auth/status",
            verify=False,
            timeout=10
        )
        
        if auth_response.status_code != 200:
            print("‚ùå Probl√®me d'authentification")
            return None
        
        auth_data = auth_response.json()
        if not auth_data.get('authenticated'):
            print("‚ùå Non authentifi√©")
            return None
        
        print("‚úÖ Authentifi√©")
        
        # 2. Essayer diff√©rentes m√©thodes de recherche
        search_methods = [
            # M√©thode 1: Recherche simple ES
            {
                "name": "Recherche ES simple",
                "params": {"symbol": "ES", "secType": "FUT"}
            },
            # M√©thode 2: Recherche avec exchange
            {
                "name": "Recherche ES + CME",
                "params": {"symbol": "ES", "secType": "FUT", "exchange": "CME"}
            },
            # M√©thode 3: Recherche avec nom complet
            {
                "name": "Recherche E-mini S&P 500",
                "params": {"symbol": "E-mini S&P 500", "secType": "FUT"}
            },
            # M√©thode 4: Recherche avec symbole local
            {
                "name": "Recherche ESM25",
                "params": {"symbol": "ESM25", "secType": "FUT"}
            },
            # M√©thode 5: Recherche avec symbole local
            {
                "name": "Recherche ESH25",
                "params": {"symbol": "ESH25", "secType": "FUT"}
            },
            # M√©thode 6: Recherche sans secType
            {
                "name": "Recherche ES sans type",
                "params": {"symbol": "ES"}
            },
            # M√©thode 7: Recherche avec currency
            {
                "name": "Recherche ES + USD",
                "params": {"symbol": "ES", "secType": "FUT", "currency": "USD"}
            }
        ]
        
        found_contracts = []
        
        for method in search_methods:
            print(f"\nüîç {method['name']}...")
            
            try:
                search_response = requests.get(
                    f"{base_url}/iserver/secdef/search",
                    params=method['params'],
                    verify=False,
                    timeout=10
                )
                
                if search_response.status_code == 200:
                    contracts = search_response.json()
                    print(f"  üìã {len(contracts)} contrats trouv√©s")
                    
                    # Filtrer les contrats valides (ConID > 0)
                    valid_contracts = []
                    for contract in contracts:
                        conid = contract.get("conid")
                        if conid and str(conid) != "-1" and str(conid) != "0":
                            valid_contracts.append(contract)
                    
                    print(f"  ‚úÖ {len(valid_contracts)} contrats valides")
                    
                    if valid_contracts:
                        found_contracts.extend(valid_contracts)
                        print(f"  üìä Premier contrat valide:")
                        first_valid = valid_contracts[0]
                        print(f"    ConID: {first_valid.get('conid')}")
                        print(f"    Symbole: {first_valid.get('localSymbol')}")
                        print(f"    Description: {first_valid.get('description')}")
                        print(f"    Exchange: {first_valid.get('exchange')}")
                        print(f"    Type: {first_valid.get('secType')}")
                        print(f"    Devise: {first_valid.get('currency')}")
                    else:
                        print(f"  ‚ö†Ô∏è Aucun contrat valide")
                        
                        # Afficher les premiers contrats pour debug
                        if contracts:
                            print(f"  üîç Aper√ßu des contrats trouv√©s:")
                            for i, contract in enumerate(contracts[:3]):
                                print(f"    {i+1}. ConID: {contract.get('conid')}, Type: {contract.get('secType')}, Symbole: {contract.get('localSymbol')}")
                else:
                    print(f"  ‚ùå Erreur {search_response.status_code}")
                    
            except Exception as e:
                print(f"  ‚ùå Erreur: {e}")
        
        # 3. Essayer une recherche directe par ConID connu
        print(f"\nüéØ Test avec ConID connu...")
        
        # ConID typiques pour ES futures (√† ajuster selon votre compte)
        known_conids = [
            "265598",  # ES March 2025
            "265599",  # ES June 2025
            "265600",  # ES September 2025
            "265601",  # ES December 2025
            "265602",  # ES March 2026
        ]
        
        for conid in known_conids:
            print(f"  Test ConID: {conid}")
            
            try:
                # Essayer de r√©cup√©rer les donn√©es directement
                market_response = requests.get(
                    f"{base_url}/iserver/marketdata/snapshot",
                    params={
                        "conids": conid,
                        "fields": "31,83,84,86"
                    },
                    verify=False,
                    timeout=10
                )
                
                if market_response.status_code == 200:
                    data = market_response.json()
                    if data and isinstance(data, list) and len(data) > 0:
                        tick_data = data[0]
                        if tick_data.get('conid') != -1:
                            print(f"    ‚úÖ ConID {conid} valide!")
                            print(f"    Donn√©es: {tick_data}")
                            found_contracts.append({
                                "conid": conid,
                                "localSymbol": f"ES_{conid}",
                                "description": f"ES Futures ConID {conid}",
                                "exchange": "CME",
                                "secType": "FUT",
                                "currency": "USD"
                            })
                        else:
                            print(f"    ‚ö†Ô∏è ConID {conid} invalide")
                    else:
                        print(f"    ‚ùå Pas de donn√©es pour ConID {conid}")
                else:
                    print(f"    ‚ùå Erreur {market_response.status_code} pour ConID {conid}")
                    
            except Exception as e:
                print(f"    ‚ùå Erreur test ConID {conid}: {e}")
        
        # 4. Afficher les r√©sultats
        if found_contracts:
            print(f"\n‚úÖ {len(found_contracts)} contrats ES valides trouv√©s!")
            print(f"\nüìã Liste des contrats:")
            
            for i, contract in enumerate(found_contracts):
                print(f"\n--- Contrat {i+1} ---")
                print(f"ConID: {contract.get('conid')}")
                print(f"Symbole: {contract.get('localSymbol')}")
                print(f"Description: {contract.get('description')}")
                print(f"Exchange: {contract.get('exchange')}")
                print(f"Type: {contract.get('secType')}")
                print(f"Devise: {contract.get('currency')}")
            
            return found_contracts
        else:
            print(f"\n‚ùå Aucun contrat ES valide trouv√©")
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()
        return None

def test_market_data(contracts):
    """Tester les donn√©es de march√© pour les contrats trouv√©s"""
    if not contracts:
        return
    
    print(f"\nüìà Test donn√©es de march√© pour les contrats trouv√©s")
    print("="*50)
    
    base_url = "https://localhost:5000/v1/api"
    
    for i, contract in enumerate(contracts[:3]):  # Tester les 3 premiers
        conid = str(contract.get("conid"))
        symbol = contract.get("localSymbol", "ES")
        
        print(f"\nüîç Test contrat {i+1}: {symbol} (ConID: {conid})")
        
        try:
            market_response = requests.get(
                f"{base_url}/iserver/marketdata/snapshot",
                params={
                    "conids": conid,
                    "fields": "31,83,84,86"
                },
                verify=False,
                timeout=10
            )
            
            if market_response.status_code == 200:
                data = market_response.json()
                if data and isinstance(data, list) and len(data) > 0:
                    tick_data = data[0]
                    print(f"  ‚úÖ Donn√©es re√ßues")
                    print(f"  ConID: {tick_data.get('conid')}")
                    print(f"  Timestamp: {tick_data.get('_updated')}")
                    print(f"  Donn√©es brutes: {json.dumps(tick_data, indent=2)}")
                    
                    # Essayer de parser les prix
                    prices = {}
                    for key, value in tick_data.items():
                        if key == '31':
                            prices['bid'] = value
                        elif key == '83':
                            prices['ask'] = value
                        elif key == '84':
                            prices['last'] = value
                        elif key == '86':
                            prices['volume'] = value
                    
                    if prices:
                        print(f"  üí∞ Prix extraits:")
                        for price_type, value in prices.items():
                            print(f"    {price_type}: {value}")
                    else:
                        print(f"  ‚ö†Ô∏è Aucun prix extrait")
                else:
                    print(f"  ‚ùå Pas de donn√©es")
            else:
                print(f"  ‚ùå Erreur {market_response.status_code}")
                
        except Exception as e:
            print(f"  ‚ùå Erreur: {e}")

def main():
    """Fonction principale"""
    print("üöÄ Correction recherche contrats ES")
    print("="*50)
    
    # Trouver les contrats
    contracts = find_real_es_contracts()
    
    # Tester les donn√©es de march√©
    if contracts:
        test_market_data(contracts)
        print(f"\n‚úÖ Recherche termin√©e avec succ√®s!")
    else:
        print(f"\n‚ùå Aucun contrat trouv√©")
    
    print(f"\nüëã Script termin√©")

if __name__ == "__main__":
    main()

