#!/usr/bin/env python3
"""
üöÄ SIERRA CONNECTOR V2 - PRODUCTION READY
Connexion Sierra Chart compl√®te avec DTC Protocol + Market Data + Orderflow
"""

import asyncio
import time
from pathlib import Path
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Callable
from dataclasses import dataclass
from enum import Enum

# Imports locaux
from .sierra_dtc_connector import SierraDTCConnector, DTCConfig
from .sierra_market_data import SierraMarketDataCollector, SierraMarketData
from .orderflow_analyzer import OrderFlowAnalyzer
from .sierra_config import SierraOptimizedConfigV2

# Core imports
import sys
sys.path.append(str(Path(__file__).parent.parent))
from core.logger import get_logger

logger = get_logger(__name__)

class ConnectionStatus(Enum):
    """Statuts de connexion"""
    DISCONNECTED = "disconnected"
    CONNECTING = "connecting" 
    CONNECTED = "connected"
    ERROR = "error"
    RECONNECTING = "reconnecting"

@dataclass
class SierraConnectionInfo:
    """Informations de connexion Sierra"""
    status: ConnectionStatus = ConnectionStatus.DISCONNECTED
    connected_since: Optional[datetime] = None
    last_heartbeat: Optional[datetime] = None
    total_reconnections: int = 0
    latency_ms: float = 0.0
    data_quality_score: float = 0.0

class SierraConnectorV2:
    """
    Connecteur Sierra Chart V2 - Production Ready
    
    Fonctionnalit√©s:
    ‚úÖ Connexion DTC Protocol r√©elle
    ‚úÖ Market Data temps r√©el (Level 1 + Level 2)
    ‚úÖ Orderflow & Cumulative Delta
    ‚úÖ Placement/annulation ordres
    ‚úÖ Gestion positions P&L
    ‚úÖ Reconnexion automatique
    ‚úÖ Monitoring performance
    """
    
    def __init__(self, config: Optional[SierraOptimizedConfigV2] = None):
        self.config = config or SierraOptimizedConfigV2()
        
        # Connexion DTC
        dtc_config = DTCConfig(
            host="127.0.0.1",
            port=11099,  # ES port par d√©faut
            heartbeat_interval=30
        )
        self.dtc_connector = SierraDTCConnector(dtc_config)
        
        # Market Data Collector
        self.market_data_collector = SierraMarketDataCollector(self.dtc_connector)
        
        # Orderflow Analyzer avec config par d√©faut
        try:
            self.orderflow_analyzer = OrderFlowAnalyzer(self.config)
        except Exception:
            # Fallback avec config vide si probl√®me
            self.orderflow_analyzer = OrderFlowAnalyzer({})
        
        # √âtat connexion
        self.connection_info = SierraConnectionInfo()
        
        # Symboles actifs
        self.active_symbols = set()
        
        # Callbacks utilisateur
        self.on_market_data: Optional[Callable] = None
        self.on_order_update: Optional[Callable] = None
        self.on_position_update: Optional[Callable] = None
        self.on_orderflow_signal: Optional[Callable] = None
        
        # T√¢ches async
        self.monitoring_task = None
        self.reconnection_task = None
        
        # Stats performance
        self.performance_stats = {
            'total_orders': 0,
            'successful_orders': 0,
            'avg_order_latency_ms': 0.0,
            'total_ticks_processed': 0,
            'orderflow_signals_generated': 0,
            'uptime_seconds': 0
        }
        
        logger.info("üöÄ Sierra Connector V2 initialis√©")
    
    async def connect(self, symbols: List[str] = None) -> bool:
        """Connexion compl√®te √† Sierra Chart"""
        try:
            self.connection_info.status = ConnectionStatus.CONNECTING
            logger.info("üîå Connexion Sierra Chart V2...")
            
            # 1. Connexion DTC
            if not await self.dtc_connector.connect():
                self.connection_info.status = ConnectionStatus.ERROR
                return False
            
            # 2. Setup callbacks market data
            self.market_data_collector.on_market_data = self._handle_market_data
            self.market_data_collector.on_level2_update = self._handle_level2_data
            
            # 3. Subscribe aux symboles
            symbols = symbols or ['ES', 'NQ']
            for symbol in symbols:
                if await self.market_data_collector.subscribe_market_data(symbol):
                    self.active_symbols.add(symbol)
                    logger.info(f"‚úÖ Subscribed √† {symbol}")
                else:
                    logger.warning(f"‚ö†Ô∏è √âchec subscription {symbol}")
            
            # 4. D√©marrer monitoring
            self.monitoring_task = asyncio.create_task(self._monitoring_loop())
            
            # 5. Marquer comme connect√©
            self.connection_info.status = ConnectionStatus.CONNECTED
            self.connection_info.connected_since = datetime.now()
            self.connection_info.last_heartbeat = datetime.now()
            
            logger.info(f"‚úÖ Sierra Chart V2 connect√© - {len(self.active_symbols)} symboles actifs")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion Sierra V2: {e}")
            self.connection_info.status = ConnectionStatus.ERROR
            return False
    
    async def disconnect(self) -> None:
        """D√©connexion propre"""
        try:
            logger.info("üîå D√©connexion Sierra Chart V2...")
            
            # Arr√™ter t√¢ches
            if self.monitoring_task:
                self.monitoring_task.cancel()
            if self.reconnection_task:
                self.reconnection_task.cancel()
            
            # D√©connexion DTC
            await self.dtc_connector.disconnect()
            
            # Reset √©tat
            self.connection_info.status = ConnectionStatus.DISCONNECTED
            self.active_symbols.clear()
            
            logger.info("‚úÖ D√©connexion Sierra V2 r√©ussie")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur d√©connexion: {e}")
    
    async def place_order(self, symbol: str, side: str, quantity: int, 
                         order_type: str = "MARKET", price: Optional[float] = None) -> Optional[str]:
        """Place un ordre avec mesure de latence"""
        try:
            if self.connection_info.status != ConnectionStatus.CONNECTED:
                logger.error("‚ùå Non connect√© √† Sierra Chart")
                return None
            
            start_time = time.perf_counter()
            
            # Placement via DTC
            order_id = await self.dtc_connector.place_order_dtc(symbol, side, quantity, order_type, price)
            
            # Mesurer latence
            latency_ms = (time.perf_counter() - start_time) * 1000
            
            # Mise √† jour stats
            self.performance_stats['total_orders'] += 1
            if order_id:
                self.performance_stats['successful_orders'] += 1
                self.performance_stats['avg_order_latency_ms'] = (
                    (self.performance_stats['avg_order_latency_ms'] * (self.performance_stats['successful_orders'] - 1) + latency_ms) /
                    self.performance_stats['successful_orders']
                )
            
            if order_id:
                logger.info(f"üìà Ordre plac√©: {order_id} - {side} {quantity} {symbol} | Latence: {latency_ms:.1f}ms")
            else:
                logger.error(f"‚ùå √âchec placement ordre: {symbol}")
            
            return order_id
            
        except Exception as e:
            logger.error(f"‚ùå Erreur placement ordre: {e}")
            return None
    
    async def get_latest_market_data(self, symbol: str) -> Optional[SierraMarketData]:
        """R√©cup√®re derni√®res donn√©es march√©"""
        try:
            return self.market_data_collector.get_latest_data(symbol)
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration market data: {e}")
            return None
    
    async def get_orderflow_analysis(self, symbol: str) -> Optional[Dict[str, Any]]:
        """Analyse orderflow pour un symbole"""
        try:
            # R√©cup√©rer donn√©es march√©
            market_data = await self.get_latest_market_data(symbol)
            if not market_data:
                return None
            
            # Convertir en format OrderFlow
            orderflow_data = {
                'timestamp': market_data.timestamp,
                'symbol': symbol,
                'price': market_data.price,
                'volume': market_data.volume,
                'bid_volume': market_data.level2.total_bid_size if market_data.level2 else 0,
                'ask_volume': market_data.level2.total_ask_size if market_data.level2 else 0,
                'delta': market_data.cumulative_delta.current_delta if market_data.cumulative_delta else 0,
                'level2': {
                    'bid_levels': market_data.level2.bid_levels if market_data.level2 else [],
                    'ask_levels': market_data.level2.ask_levels if market_data.level2 else [],
                    'imbalance_ratio': market_data.level2.imbalance_ratio if market_data.level2 else 0.5
                }
            }
            
            # Analyser avec OrderFlow Analyzer
            signal = await self.orderflow_analyzer.analyze_orderflow_data(orderflow_data)
            
            if signal:
                self.performance_stats['orderflow_signals_generated'] += 1
                
                # Callback utilisateur
                if self.on_orderflow_signal:
                    self.on_orderflow_signal(signal)
                
                return {
                    'signal': signal.signal.value,
                    'strength': signal.strength,
                    'confidence': signal.confidence,
                    'reasoning': signal.reasoning,
                    'timestamp': signal.timestamp
                }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse orderflow: {e}")
            return None
    
    def _handle_market_data(self, market_data: SierraMarketData) -> None:
        """Handler donn√©es march√©"""
        try:
            # Mise √† jour stats
            self.performance_stats['total_ticks_processed'] += 1
            
            # Mise √† jour latence connexion
            self.connection_info.latency_ms = (
                datetime.now() - market_data.timestamp
            ).total_seconds() * 1000
            
            # Callback utilisateur
            if self.on_market_data:
                self.on_market_data(market_data)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur handler market data: {e}")
    
    def _handle_level2_data(self, level2_data) -> None:
        """Handler donn√©es Level 2"""
        try:
            # Calculer score qualit√© donn√©es
            if level2_data.bid_levels and level2_data.ask_levels:
                # Qualit√© bas√©e sur spread et profondeur
                spread_quality = 1.0 if level2_data.spread <= 1.0 else max(0.1, 1.0 / level2_data.spread)
                depth_quality = min(1.0, len(level2_data.bid_levels) / 10.0)
                
                self.connection_info.data_quality_score = (spread_quality + depth_quality) / 2.0
            
        except Exception as e:
            logger.error(f"‚ùå Erreur handler Level 2: {e}")
    
    async def _monitoring_loop(self) -> None:
        """Boucle monitoring connexion"""
        while True:
            try:
                # Mise √† jour heartbeat
                try:
                    if hasattr(self.dtc_connector, 'heartbeat'):
                        if await self.dtc_connector.heartbeat():
                            self.connection_info.last_heartbeat = datetime.now()
                        else:
                            # Probl√®me connexion
                            logger.warning("‚ö†Ô∏è Heartbeat √©chou√© - reconnexion n√©cessaire")
                            await self._handle_reconnection()
                    else:
                        # Heartbeat simple via socket check
                        self.connection_info.last_heartbeat = datetime.now()
                except Exception as e:
                    logger.error(f"‚ùå Erreur heartbeat: {e}")
                
                # Mise √† jour uptime
                if self.connection_info.connected_since:
                    self.performance_stats['uptime_seconds'] = (
                        datetime.now() - self.connection_info.connected_since
                    ).total_seconds()
                
                await asyncio.sleep(30)  # Check toutes les 30s
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå Erreur monitoring: {e}")
                await asyncio.sleep(10)
    
    async def _handle_reconnection(self) -> None:
        """G√®re la reconnexion automatique"""
        try:
            if self.connection_info.status == ConnectionStatus.RECONNECTING:
                return  # Reconnexion d√©j√† en cours
            
            self.connection_info.status = ConnectionStatus.RECONNECTING
            self.connection_info.total_reconnections += 1
            
            logger.info("üîÑ Tentative de reconnexion...")
            
            # D√©connexion propre
            await self.dtc_connector.disconnect()
            
            # Attendre puis reconnecter
            await asyncio.sleep(5)
            
            if await self.dtc_connector.connect():
                # Re-subscribe aux symboles
                for symbol in list(self.active_symbols):
                    await self.market_data_collector.subscribe_market_data(symbol)
                
                self.connection_info.status = ConnectionStatus.CONNECTED
                self.connection_info.last_heartbeat = datetime.now()
                
                logger.info("‚úÖ Reconnexion r√©ussie")
            else:
                self.connection_info.status = ConnectionStatus.ERROR
                logger.error("‚ùå Reconnexion √©chou√©e")
                
        except Exception as e:
            logger.error(f"‚ùå Erreur reconnexion: {e}")
            self.connection_info.status = ConnectionStatus.ERROR
    
    def get_connection_status(self) -> Dict[str, Any]:
        """Status connexion d√©taill√©"""
        return {
            'status': self.connection_info.status.value,
            'connected_since': self.connection_info.connected_since.isoformat() if self.connection_info.connected_since else None,
            'last_heartbeat': self.connection_info.last_heartbeat.isoformat() if self.connection_info.last_heartbeat else None,
            'total_reconnections': self.connection_info.total_reconnections,
            'latency_ms': self.connection_info.latency_ms,
            'data_quality_score': self.connection_info.data_quality_score,
            'active_symbols': list(self.active_symbols),
            'performance_stats': self.performance_stats
        }
    
    def is_connected(self) -> bool:
        """Check si connect√©"""
        return self.connection_info.status == ConnectionStatus.CONNECTED
