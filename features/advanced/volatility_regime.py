"""
üéØ PHASE 2: ADVANCED FEATURES - FEATURE #3
VOLATILITY REGIME FILTER

üéØ IMPACT: +1-2% win rate
Ajuste les seuils de trading selon r√©gime de volatilit√©
Combine ATR + VIX pour d√©tection pr√©cise des conditions de march√©

Performance: <0.5ms par calcul
Int√©gration: Compatible avec FeatureCalculator existant
"""

import time
import numpy as np
import pandas as pd
from typing import List, Dict, Optional, Tuple, NamedTuple
from dataclasses import dataclass
from collections import deque
from enum import Enum
import logging

# Imports locaux (selon architecture projet)
from core.base_types import MarketData

logger = logging.getLogger(__name__)

# ===== TYPES DE DONN√âES =====

class VolatilityRegime(Enum):
    """R√©gimes de volatilit√© d√©tect√©s"""
    LOW_VOL = "low_vol"              # VIX < 15, ATR faible
    NORMAL_VOL = "normal_vol"        # Conditions standard
    HIGH_VOL = "high_vol"            # VIX > 25, ATR √©lev√©
    TRANSITIONING = "transitioning"   # Changement de r√©gime
    EXTREME_VOL = "extreme_vol"      # Conditions extr√™mes

class VolatilityTrend(Enum):
    """Tendance volatilit√©"""
    DECREASING = "decreasing"        # Volatilit√© en baisse
    STABLE = "stable"                # Volatilit√© stable
    INCREASING = "increasing"        # Volatilit√© en hausse
    EXPLOSIVE = "explosive"          # Explosion volatilit√©

@dataclass
class VolatilityMetrics:
    """M√©triques de volatilit√©"""
    current_atr: float              # ATR actuel
    avg_atr_20: float              # ATR moyenne 20 p√©riodes
    atr_ratio: float               # ATR actuel / moyenne
    current_vix: float             # VIX actuel
    vix_percentile: float          # Percentile VIX sur 252 jours
    realized_vol: float            # Volatilit√© r√©alis√©e
    vol_of_vol: float              # Volatilit√© de la volatilit√©

@dataclass
class TradingThresholds:
    """Seuils de trading adapt√©s"""
    long_threshold: float          # Seuil signal long
    short_threshold: float         # Seuil signal short
    position_multiplier: float     # Multiplicateur taille position
    stop_loss_multiplier: float    # Multiplicateur stop loss
    take_profit_multiplier: float  # Multiplicateur take profit
    max_positions: int             # Nombre max positions

@dataclass
class VolatilityRegimeResult:
    """R√©sultat complet analyse volatilit√©"""
    regime: VolatilityRegime
    trend: VolatilityTrend
    metrics: VolatilityMetrics
    thresholds: TradingThresholds
    regime_confidence: float       # Confiance r√©gime [0, 1]
    stability_score: float         # Score stabilit√© [0, 1]
    risk_adjustment: float         # Ajustement risque [0.5, 2.0]
    calculation_time_ms: float     # Temps calcul
    days_in_regime: int           # Jours dans r√©gime actuel

# ===== VOLATILITY REGIME CALCULATOR =====

class VolatilityRegimeCalculator:
    """
    Calculateur de r√©gime de volatilit√© avec ajustement seuils adaptatifs
    
    Fonctionnalit√©s:
    - Analyse ATR + VIX combin√©e
    - D√©tection transitions de r√©gime
    - Seuils adaptatifs par r√©gime
    - Cache optimis√© pour performance
    - Tracking stabilit√© r√©gime
    """
    
    def __init__(self, config: Optional[Dict] = None):
        """Initialisation calculateur"""
        self.config = config or {}
        
        # Param√®tres ATR
        self.atr_period = self.config.get('atr_period', 20)
        self.atr_lookback = self.config.get('atr_lookback', 100)
        
        # Param√®tres VIX
        self.vix_lookback = self.config.get('vix_lookback', 252)  # 1 an
        self.vix_low_threshold = self.config.get('vix_low', 15.0)
        self.vix_high_threshold = self.config.get('vix_high', 25.0)
        
        # Seuils ATR ratio
        self.atr_low_ratio = self.config.get('atr_low_ratio', 0.8)
        self.atr_high_ratio = self.config.get('atr_high_ratio', 1.5)
        
        # Historiques pour calculs
        self.max_history = self.config.get('max_history', 500)
        self.price_history: deque = deque(maxlen=self.max_history)
        self.atr_history: deque = deque(maxlen=self.max_history)
        self.vix_history: deque = deque(maxlen=self.max_history)
        self.regime_history: deque = deque(maxlen=50)  # Historique r√©gimes
        
        # Cache pour optimisation
        self.cache: Dict[str, Tuple[float, VolatilityRegimeResult]] = {}
        self.cache_max_size = 20
        self.cache_ttl = 10.0  # 10 secondes (r√©gime change lentement)
        
        # Suivi r√©gime actuel
        self.current_regime: Optional[VolatilityRegime] = None
        self.regime_start_time: Optional[float] = None
        self.regime_stability_days = 0
        
        # Statistiques
        self.stats = {
            'total_calculations': 0,
            'regime_changes': 0,
            'low_vol_periods': 0,
            'high_vol_periods': 0,
            'extreme_vol_periods': 0,
            'avg_calc_time_ms': 0.0,
            'cache_hits': 0
        }
        
        logger.info(f"VolatilityRegimeCalculator initialis√© (ATR={self.atr_period}, VIX thresholds={self.vix_low_threshold}/{self.vix_high_threshold})")
    
    def add_market_data(self, 
                       price_data: MarketData,
                       current_vix: float,
                       timestamp: Optional[float] = None) -> None:
        """
        Ajoute donn√©es de march√© pour analyse
        
        Args:
            price_data: Donn√©es OHLC
            current_vix: Valeur VIX actuelle
            timestamp: Timestamp (auto si None)
        """
        if timestamp is None:
            timestamp = time.time()
        
        # Calcul ATR pour cette barre
        atr_value = self._calculate_true_range(price_data)
        
        # Ajout aux historiques
        self.price_history.append(price_data)
        self.atr_history.append(atr_value)
        self.vix_history.append(current_vix)
        
        # Nettoyage cache
        self._cleanup_cache()
    
    def calculate_volatility_regime(self) -> VolatilityRegimeResult:
        """
        üéØ CALCUL PRINCIPAL: Analyse r√©gime de volatilit√©
        
        Analyse:
        1. Calcul m√©triques volatilit√© (ATR + VIX)
        2. D√©tection r√©gime actuel
        3. Analyse tendance volatilit√©
        4. G√©n√©ration seuils adaptatifs
        5. Score stabilit√© r√©gime
        
        Returns:
            VolatilityRegimeResult avec r√©gime et seuils
        """
        start_time = time.perf_counter()
        
        try:
            # V√©rification cache
            cache_key = f"vol_regime_{len(self.atr_history)}_{len(self.vix_history)}"
            cached_result = self._get_from_cache(cache_key)
            if cached_result:
                self.stats['cache_hits'] += 1
                return cached_result
            
            # V√©rification donn√©es suffisantes
            if len(self.atr_history) < self.atr_period or len(self.vix_history) < 10:
                return self._create_default_result(start_time)
            
            # 1. CALCUL M√âTRIQUES VOLATILIT√â
            metrics = self._calculate_volatility_metrics()
            
            # 2. D√âTECTION R√âGIME
            regime = self._detect_volatility_regime(metrics)
            
            # 3. ANALYSE TENDANCE
            trend = self._analyze_volatility_trend(metrics)
            
            # 4. G√âN√âRATION SEUILS ADAPTATIFS
            thresholds = self._generate_adaptive_thresholds(regime, metrics)
            
            # 5. CALCUL SCORES CONFIANCE/STABILIT√â
            regime_confidence = self._calculate_regime_confidence(regime, metrics)
            stability_score = self._calculate_stability_score(regime)
            
            # 6. AJUSTEMENT RISQUE
            risk_adjustment = self._calculate_risk_adjustment(regime, metrics)
            
            # 7. SUIVI DUR√âE R√âGIME
            days_in_regime = self._update_regime_tracking(regime)
            
            # 8. CR√âATION R√âSULTAT
            calc_time = (time.perf_counter() - start_time) * 1000
            
            result = VolatilityRegimeResult(
                regime=regime,
                trend=trend,
                metrics=metrics,
                thresholds=thresholds,
                regime_confidence=regime_confidence,
                stability_score=stability_score,
                risk_adjustment=risk_adjustment,
                calculation_time_ms=calc_time,
                days_in_regime=days_in_regime
            )
            
            # Cache et stats
            self._cache_result(cache_key, result)
            self._update_stats(calc_time, regime)
            
            return result
            
        except Exception as e:
            logger.error(f"Erreur calcul r√©gime volatilit√©: {e}")
            return self._create_default_result(start_time)
    
    def _calculate_true_range(self, price_data: MarketData) -> float:
        """Calcule True Range pour une barre"""
        if len(self.price_history) == 0:
            return price_data.high - price_data.low
        
        prev_close = self.price_history[-1].close
        
        tr1 = price_data.high - price_data.low
        tr2 = abs(price_data.high - prev_close)
        tr3 = abs(price_data.low - prev_close)
        
        return max(tr1, tr2, tr3)
    
    def _calculate_volatility_metrics(self) -> VolatilityMetrics:
        """
        Calcule toutes les m√©triques de volatilit√©
        
        Returns:
            VolatilityMetrics compl√®tes
        """
        # ATR metrics
        current_atr = list(self.atr_history)[-1]
        atr_values = list(self.atr_history)[-self.atr_period:]
        avg_atr_20 = np.mean(atr_values)
        atr_ratio = current_atr / avg_atr_20 if avg_atr_20 > 0 else 1.0
        
        # VIX metrics
        current_vix = list(self.vix_history)[-1]
        vix_values = list(self.vix_history)
        vix_percentile = self._calculate_percentile(current_vix, vix_values)
        
        # Volatilit√© r√©alis√©e (√©cart-type returns)
        if len(self.price_history) >= 20:
            prices = [p.close for p in list(self.price_history)[-20:]]
            returns = np.diff(np.log(prices))
            realized_vol = np.std(returns) * np.sqrt(252) * 100  # Annualis√©e en %
        else:
            realized_vol = current_vix  # Fallback
        
        # Volatilit√© de la volatilit√©
        if len(self.vix_history) >= 10:
            recent_vix = list(self.vix_history)[-10:]
            vol_of_vol = np.std(recent_vix)
        else:
            vol_of_vol = 0.0
        
        return VolatilityMetrics(
            current_atr=current_atr,
            avg_atr_20=avg_atr_20,
            atr_ratio=atr_ratio,
            current_vix=current_vix,
            vix_percentile=vix_percentile,
            realized_vol=realized_vol,
            vol_of_vol=vol_of_vol
        )
    
    def _detect_volatility_regime(self, metrics: VolatilityMetrics) -> VolatilityRegime:
        """
        D√©tecte le r√©gime de volatilit√© actuel
        
        Logique combin√©e ATR + VIX:
        - LOW_VOL: VIX < 15 ET ATR ratio < 0.8
        - HIGH_VOL: VIX > 25 OU ATR ratio > 1.5  
        - EXTREME_VOL: VIX > 35 OU ATR ratio > 2.0
        - NORMAL_VOL: Conditions standard
        """
        vix = metrics.current_vix
        atr_ratio = metrics.atr_ratio
        
        # Conditions extr√™mes
        if vix > 35 or atr_ratio > 2.0:
            return VolatilityRegime.EXTREME_VOL
        
        # Haute volatilit√©
        if vix > self.vix_high_threshold or atr_ratio > self.atr_high_ratio:
            return VolatilityRegime.HIGH_VOL
        
        # Basse volatilit√© (conditions strictes)
        if vix < self.vix_low_threshold and atr_ratio < self.atr_low_ratio:
            return VolatilityRegime.LOW_VOL
        
        # Transition (change r√©cent de r√©gime)
        if self._is_regime_transitioning():
            return VolatilityRegime.TRANSITIONING
        
        # Conditions normales par d√©faut
        return VolatilityRegime.NORMAL_VOL
    
    def _analyze_volatility_trend(self, metrics: VolatilityMetrics) -> VolatilityTrend:
        """Analyse la tendance de volatilit√©"""
        if len(self.vix_history) < 5:
            return VolatilityTrend.STABLE
        
        # Analyse slope VIX r√©cent
        recent_vix = list(self.vix_history)[-5:]
        vix_slope = np.polyfit(range(len(recent_vix)), recent_vix, 1)[0]
        
        # Analyse slope ATR
        recent_atr = list(self.atr_history)[-5:]
        atr_slope = np.polyfit(range(len(recent_atr)), recent_atr, 1)[0]
        
        # Combinaison slopes
        combined_slope = (vix_slope + atr_slope * 10) / 2  # Normalisation ATR
        
        # Classification tendance
        if combined_slope > 2.0:
            return VolatilityTrend.EXPLOSIVE
        elif combined_slope > 0.5:
            return VolatilityTrend.INCREASING
        elif combined_slope < -0.5:
            return VolatilityTrend.DECREASING
        else:
            return VolatilityTrend.STABLE
    
    def _generate_adaptive_thresholds(self, 
                                    regime: VolatilityRegime, 
                                    metrics: VolatilityMetrics) -> TradingThresholds:
        """
        üéØ G√âN√àRE SEUILS ADAPTATIFS selon r√©gime volatilit√©
        
        Logique:
        - LOW_VOL: Seuils plus bas (plus de trades)
        - HIGH_VOL: Seuils plus √©lev√©s (trades s√©lectifs)
        - EXTREME_VOL: Seuils tr√®s √©lev√©s (protection)
        """
        # Seuils de base
        base_long = 0.25
        base_short = -0.25
        base_multiplier = 1.0
        base_stop_mult = 1.0
        base_tp_mult = 1.0
        base_max_pos = 3
        
        # Ajustements par r√©gime
        if regime == VolatilityRegime.LOW_VOL:
            # Conditions calmes = plus de trades, stops plus serr√©s
            long_threshold = base_long * 0.8    # 0.20
            short_threshold = base_short * 0.8  # -0.20
            position_multiplier = base_multiplier * 1.2  # Size √ó1.2
            stop_multiplier = base_stop_mult * 0.8       # Stop plus serr√©
            tp_multiplier = base_tp_mult * 0.9           # TP plus proche
            max_positions = base_max_pos + 1             # Plus de positions
            
        elif regime == VolatilityRegime.HIGH_VOL:
            # Haute volatilit√© = trades s√©lectifs, stops larges
            long_threshold = base_long * 1.4    # 0.35
            short_threshold = base_short * 1.4  # -0.35
            position_multiplier = base_multiplier * 0.8  # Size √ó0.8
            stop_multiplier = base_stop_mult * 1.5       # Stop plus large
            tp_multiplier = base_tp_mult * 1.5           # TP plus loin
            max_positions = base_max_pos - 1             # Moins de positions
            
        elif regime == VolatilityRegime.EXTREME_VOL:
            # Conditions extr√™mes = tr√®s s√©lectif
            long_threshold = base_long * 2.0    # 0.50
            short_threshold = base_short * 2.0  # -0.50
            position_multiplier = base_multiplier * 0.5  # Size √ó0.5
            stop_multiplier = base_stop_mult * 2.0       # Stop tr√®s large
            tp_multiplier = base_tp_mult * 2.0           # TP tr√®s loin
            max_positions = 1                            # Position unique
            
        elif regime == VolatilityRegime.TRANSITIONING:
            # Transition = prudence
            long_threshold = base_long * 1.2    # 0.30
            short_threshold = base_short * 1.2  # -0.30
            position_multiplier = base_multiplier * 0.7  # Size r√©duit
            stop_multiplier = base_stop_mult * 1.2       # Stop prudent
            tp_multiplier = base_tp_mult * 1.1           # TP prudent
            max_positions = base_max_pos - 1             # Moins de positions
            
        else:  # NORMAL_VOL
            # Conditions standard
            long_threshold = base_long           # 0.25
            short_threshold = base_short         # -0.25
            position_multiplier = base_multiplier # 1.0
            stop_multiplier = base_stop_mult     # 1.0
            tp_multiplier = base_tp_mult         # 1.0
            max_positions = base_max_pos         # 3
        
        # Ajustement fine selon m√©triques
        atr_adjustment = min(1.5, max(0.7, metrics.atr_ratio))
        position_multiplier *= atr_adjustment
        
        return TradingThresholds(
            long_threshold=long_threshold,
            short_threshold=short_threshold,
            position_multiplier=position_multiplier,
            stop_loss_multiplier=stop_multiplier,
            take_profit_multiplier=tp_multiplier,
            max_positions=max_positions
        )
    
    def _calculate_regime_confidence(self, 
                                   regime: VolatilityRegime, 
                                   metrics: VolatilityMetrics) -> float:
        """Calcule confiance dans la d√©tection de r√©gime"""
        vix = metrics.current_vix
        atr_ratio = metrics.atr_ratio
        
        # Distance aux seuils = confiance
        if regime == VolatilityRegime.LOW_VOL:
            vix_dist = (self.vix_low_threshold - vix) / self.vix_low_threshold
            atr_dist = (self.atr_low_ratio - atr_ratio) / self.atr_low_ratio
            confidence = (vix_dist + atr_dist) / 2
            
        elif regime == VolatilityRegime.HIGH_VOL:
            vix_dist = (vix - self.vix_high_threshold) / self.vix_high_threshold
            atr_dist = (atr_ratio - self.atr_high_ratio) / self.atr_high_ratio
            confidence = (vix_dist + atr_dist) / 2
            
        elif regime == VolatilityRegime.EXTREME_VOL:
            # Conditions extr√™mes = haute confiance
            confidence = 0.9
            
        else:
            # Normal/Transition = confiance mod√©r√©e
            confidence = 0.6
        
        return np.clip(confidence, 0.0, 1.0)
    
    def _calculate_stability_score(self, current_regime: VolatilityRegime) -> float:
        """Calcule score de stabilit√© du r√©gime actuel"""
        if len(self.regime_history) < 5:
            return 0.5  # Score neutre
        
        # Consistance r√©gime r√©cent
        recent_regimes = list(self.regime_history)[-5:]
        same_regime_count = sum(1 for r in recent_regimes if r == current_regime)
        consistency = same_regime_count / len(recent_regimes)
        
        # Bonus stabilit√© temporelle
        time_bonus = min(1.0, self.regime_stability_days / 5.0)  # Max apr√®s 5 jours
        
        stability = (consistency * 0.7) + (time_bonus * 0.3)
        return np.clip(stability, 0.0, 1.0)
    
    def _calculate_risk_adjustment(self, 
                                 regime: VolatilityRegime, 
                                 metrics: VolatilityMetrics) -> float:
        """
        Calcule facteur d'ajustement du risque
        
        Returns:
            float: Facteur [0.5, 2.0] pour ajuster exposition
        """
        base_adjustment = {
            VolatilityRegime.LOW_VOL: 1.2,      # Plus d'exposition
            VolatilityRegime.NORMAL_VOL: 1.0,   # Exposition normale
            VolatilityRegime.HIGH_VOL: 0.8,     # Moins d'exposition
            VolatilityRegime.EXTREME_VOL: 0.5,  # Exposition minimale
            VolatilityRegime.TRANSITIONING: 0.7 # Exposition r√©duite
        }.get(regime, 1.0)
        
        # Ajustement selon vol of vol
        vol_of_vol_factor = 1.0 - (metrics.vol_of_vol / 20.0)  # Plus de vol of vol = moins d'exposition
        vol_of_vol_factor = np.clip(vol_of_vol_factor, 0.5, 1.2)
        
        final_adjustment = base_adjustment * vol_of_vol_factor
        return np.clip(final_adjustment, 0.5, 2.0)
    
    def _is_regime_transitioning(self) -> bool:
        """D√©tecte si on est en transition de r√©gime"""
        if len(self.regime_history) < 3:
            return False
        
        # V√©rifier changements r√©cents
        recent_regimes = list(self.regime_history)[-3:]
        unique_regimes = len(set(recent_regimes))
        
        # Transition = plus d'un r√©gime dans les 3 derni√®res p√©riodes
        return unique_regimes > 1
    
    def _update_regime_tracking(self, current_regime: VolatilityRegime) -> int:
        """Met √† jour le suivi du r√©gime actuel"""
        # Premier r√©gime d√©tect√©
        if self.current_regime is None:
            self.current_regime = current_regime
            self.regime_start_time = time.time()
            self.regime_stability_days = 0
        
        # Changement de r√©gime
        elif self.current_regime != current_regime:
            self.stats['regime_changes'] += 1
            self.current_regime = current_regime
            self.regime_start_time = time.time()
            self.regime_stability_days = 0
        
        # M√™me r√©gime = incr√©mente stabilit√©
        else:
            if self.regime_start_time:
                days_elapsed = (time.time() - self.regime_start_time) / 86400  # Secondes -> jours
                self.regime_stability_days = int(days_elapsed)
        
        # Ajout √† l'historique
        self.regime_history.append(current_regime)
        
        return self.regime_stability_days
    
    def _calculate_percentile(self, value: float, data: List[float]) -> float:
        """Calcule percentile d'une valeur dans un dataset"""
        if len(data) < 2:
            return 50.0
        
        data_sorted = sorted(data)
        position = np.searchsorted(data_sorted, value)
        percentile = (position / len(data)) * 100
        
        return np.clip(percentile, 0.0, 100.0)
    
    def _create_default_result(self, start_time: float) -> VolatilityRegimeResult:
        """Cr√©e r√©sultat par d√©faut en cas de donn√©es insuffisantes"""
        calc_time = (time.perf_counter() - start_time) * 1000
        
        default_metrics = VolatilityMetrics(
            current_atr=1.0,
            avg_atr_20=1.0,
            atr_ratio=1.0,
            current_vix=20.0,
            vix_percentile=50.0,
            realized_vol=20.0,
            vol_of_vol=0.0
        )
        
        default_thresholds = TradingThresholds(
            long_threshold=0.25,
            short_threshold=-0.25,
            position_multiplier=1.0,
            stop_loss_multiplier=1.0,
            take_profit_multiplier=1.0,
            max_positions=3
        )
        
        return VolatilityRegimeResult(
            regime=VolatilityRegime.NORMAL_VOL,
            trend=VolatilityTrend.STABLE,
            metrics=default_metrics,
            thresholds=default_thresholds,
            regime_confidence=0.5,
            stability_score=0.5,
            risk_adjustment=1.0,
            calculation_time_ms=calc_time,
            days_in_regime=0
        )
    
    # ===== CACHE ET OPTIMISATION =====
    
    def _get_from_cache(self, key: str) -> Optional[VolatilityRegimeResult]:
        """R√©cup√©ration depuis cache avec TTL"""
        if key in self.cache:
            timestamp, result = self.cache[key]
            if time.time() - timestamp < self.cache_ttl:
                return result
            else:
                del self.cache[key]
        return None
    
    def _cache_result(self, key: str, result: VolatilityRegimeResult) -> None:
        """Sauvegarde en cache"""
        if len(self.cache) >= self.cache_max_size:
            oldest_key = next(iter(self.cache))
            del self.cache[oldest_key]
        
        self.cache[key] = (time.time(), result)
    
    def _cleanup_cache(self) -> None:
        """Nettoyage cache expir√©"""
        current_time = time.time()
        expired_keys = [
            key for key, (timestamp, _) in self.cache.items()
            if current_time - timestamp > self.cache_ttl
        ]
        for key in expired_keys:
            del self.cache[key]
    
    def _update_stats(self, calc_time: float, regime: VolatilityRegime) -> None:
        """Mise √† jour statistiques"""
        self.stats['total_calculations'] += 1
        
        # Rolling average calc time
        count = self.stats['total_calculations']
        prev_avg = self.stats['avg_calc_time_ms']
        self.stats['avg_calc_time_ms'] = ((prev_avg * (count - 1)) + calc_time) / count
        
        # Comptage r√©gimes
        if regime == VolatilityRegime.LOW_VOL:
            self.stats['low_vol_periods'] += 1
        elif regime == VolatilityRegime.HIGH_VOL:
            self.stats['high_vol_periods'] += 1
        elif regime == VolatilityRegime.EXTREME_VOL:
            self.stats['extreme_vol_periods'] += 1
    
    # ===== M√âTHODES UTILITAIRES =====
    
    def get_current_thresholds(self) -> Optional[TradingThresholds]:
        """Retourne les seuils actuels pour int√©gration externe"""
        if len(self.atr_history) > 0 and len(self.vix_history) > 0:
            result = self.calculate_volatility_regime()
            return result.thresholds
        return None
    
    def get_statistics(self) -> Dict[str, any]:
        """Statistiques calculateur"""
        total = self.stats['total_calculations']
        cache_hit_rate = (self.stats['cache_hits'] / max(1, total)) * 100
        
        return {
            'total_calculations': total,
            'regime_changes': self.stats['regime_changes'],
            'low_vol_periods': self.stats['low_vol_periods'],
            'high_vol_periods': self.stats['high_vol_periods'],
            'extreme_vol_periods': self.stats['extreme_vol_periods'],
            'avg_calculation_time_ms': round(self.stats['avg_calc_time_ms'], 3),
            'cache_hit_rate_pct': round(cache_hit_rate, 1),
            'current_regime': self.current_regime.value if self.current_regime else None,
            'regime_stability_days': self.regime_stability_days,
            'data_points_atr': len(self.atr_history),
            'data_points_vix': len(self.vix_history)
        }
    
    def reset_history(self) -> None:
        """Reset historique (pour tests/debug)"""
        self.price_history.clear()
        self.atr_history.clear()
        self.vix_history.clear()
        self.regime_history.clear()
        self.cache.clear()
        self.current_regime = None
        self.regime_start_time = None
        self.regime_stability_days = 0
        logger.info("Historique volatility regime reset√©")

# ===== FACTORY ET HELPERS =====

def create_volatility_regime_calculator(config: Optional[Dict] = None) -> VolatilityRegimeCalculator:
    """Factory function pour calculateur r√©gime volatilit√©"""
    return VolatilityRegimeCalculator(config)

def simulate_volatility_scenario(scenario: str = "normal") -> List[Tuple[MarketData, float]]:
    """
    G√©n√®re sc√©nario de volatilit√© pour testing
    
    Args:
        scenario: "low", "normal", "high", "extreme"
        
    Returns:
        List[(MarketData, VIX)]
    """
    data_points = []
    base_price = 4500.0
    
    # Param√®tres par sc√©nario
    scenario_params = {
        "low": {"vix_base": 12, "vix_var": 2, "price_var": 5},
        "normal": {"vix_base": 20, "vix_var": 5, "price_var": 15},
        "high": {"vix_base": 30, "vix_var": 8, "price_var": 30},
        "extreme": {"vix_base": 45, "vix_var": 15, "price_var": 50}
    }
    
    params = scenario_params.get(scenario, scenario_params["normal"])
    
    for i in range(50):
        # G√©n√©ration VIX
        vix = max(5, params["vix_base"] + np.random.normal(0, params["vix_var"]))
        
        # G√©n√©ration prix avec volatilit√© correspondante
        price_change = np.random.normal(0, params["price_var"])
        base_price += price_change
        
        # G√©n√©ration OHLC
        open_price = base_price
        high_price = base_price + abs(np.random.normal(0, params["price_var"] / 2))
        low_price = base_price - abs(np.random.normal(0, params["price_var"] / 2))
        close_price = base_price + np.random.normal(0, params["price_var"] / 4)
        
        market_data = MarketData(
            timestamp=pd.Timestamp.now(),
            symbol="ES",
            open=open_price,
            high=high_price,
            low=low_price,
            close=close_price,
            volume=np.random.randint(1000, 5000)
        )
        
        data_points.append((market_data, vix))
        base_price = close_price
    
    return data_points


def get_volatility_multiplier_for_time(hour: int = None) -> float:
    """
    Helper rapide pour obtenir multiplicateur volatilit√© selon heure
    
    Args:
        hour: Heure EST (d√©faut: maintenant)
        
    Returns:
        float: Multiplicateur volatilit√©
    """
    if hour is None:
        est = pytz.timezone('US/Eastern')
        hour = datetime.now(est).hour
    
    # Multiplicateurs volatilit√© par heure
    hour_multipliers = {
        # London Open (4-8h EST) - Volatilit√© √©lev√©e
        4: 1.1, 5: 1.1, 6: 1.1, 7: 1.1,
        # NY Premarket (8-9h30 EST)  
        8: 1.0, 9: 1.0,
        # NY Open (9h30-11h EST) - Tr√®s volatile
        10: 1.3, 11: 1.2,
        # NY Midday (11-14h EST) - Calme
        12: 0.8, 13: 0.7,
        # NY Power Hour (14-16h EST) - Volatile
        14: 1.2, 15: 1.2,
        # After Hours (16-18h EST) - Faible
        16: 0.6, 17: 0.5,
        # Overnight (18-4h EST) - Tr√®s faible
        18: 0.4, 19: 0.4, 20: 0.4, 21: 0.4, 22: 0.4, 23: 0.4,
        0: 0.4, 1: 0.4, 2: 0.4, 3: 0.4
    }
    
    return hour_multipliers.get(hour, 1.0)

# ===== TESTING =====

def test_volatility_regime_calculator():
    """Test complet volatility regime calculator"""
    print("=" * 50)
    print("üéØ TEST VOLATILITY REGIME CALCULATOR")
    print("=" * 50)
    
    # Configuration test
    config = {
        'atr_period': 20,
        'vix_low': 15,
        'vix_high': 25,
        'atr_low_ratio': 0.8,
        'atr_high_ratio': 1.5
    }
    
    calculator = create_volatility_regime_calculator(config)
    
    # Test 1: R√©gime low volatility
    print("\nüìâ TEST 1: R√©gime Low Volatility")
    low_vol_data = simulate_volatility_scenario("low")
    
    for market_data, vix in low_vol_data:
        calculator.add_market_data(market_data, vix)
    
    result = calculator.calculate_volatility_regime()
    print(f"R√©gime d√©tect√©: {result.regime.value}")
    print(f"Tendance: {result.trend.value}")
    print(f"Seuil long: {result.thresholds.long_threshold:.3f}")
    print(f"Multiplicateur position: {result.thresholds.position_multiplier:.2f}")
    print(f"Confiance r√©gime: {result.regime_confidence:.3f}")
    print(f"Score stabilit√©: {result.stability_score:.3f}")
    print(f"Temps calcul: {result.calculation_time_ms:.2f}ms")
    
    # Test 2: Reset et r√©gime high volatility
    print("\nüìà TEST 2: R√©gime High Volatility")
    calculator.reset_history()
    
    high_vol_data = simulate_volatility_scenario("high")
    for market_data, vix in high_vol_data:
        calculator.add_market_data(market_data, vix)
    
    result = calculator.calculate_volatility_regime()
    print(f"R√©gime d√©tect√©: {result.regime.value}")
    print(f"Seuil long: {result.thresholds.long_threshold:.3f}")
    print(f"Multiplicateur position: {result.thresholds.position_multiplier:.2f}")
    print(f"Max positions: {result.thresholds.max_positions}")
    print(f"Ajustement risque: {result.risk_adjustment:.2f}")
    
    # Test 3: R√©gime extreme
    print("\n‚ö° TEST 3: R√©gime Extreme Volatility")
    calculator.reset_history()
    
    extreme_vol_data = simulate_volatility_scenario("extreme")
    for market_data, vix in extreme_vol_data:
        calculator.add_market_data(market_data, vix)
    
    result = calculator.calculate_volatility_regime()
    print(f"R√©gime d√©tect√©: {result.regime.value}")
    print(f"Seuil long: {result.thresholds.long_threshold:.3f}")
    print(f"Multiplicateur position: {result.thresholds.position_multiplier:.2f}")
    print(f"Jours dans r√©gime: {result.days_in_regime}")
    
    # Test 4: Performance cache
    print("\n‚ö° TEST 4: Performance cache")
    start = time.perf_counter()
    for _ in range(10):
        calculator.calculate_volatility_regime()
    cache_time = (time.perf_counter() - start) * 1000
    print(f"10 calculs avec cache: {cache_time:.2f}ms")
    
    # Test 5: Seuils adaptatifs
    print("\nüéØ TEST 5: Comparaison seuils par r√©gime")
    scenarios = ["low", "normal", "high", "extreme"]
    for scenario in scenarios:
        calculator.reset_history()
        data = simulate_volatility_scenario(scenario)
        for market_data, vix in data[-10:]:  # Derniers points seulement
            calculator.add_market_data(market_data, vix)
        
        result = calculator.calculate_volatility_regime()
        print(f"{scenario.upper()}: Long={result.thresholds.long_threshold:.3f}, "
              f"Mult={result.thresholds.position_multiplier:.2f}, "
              f"MaxPos={result.thresholds.max_positions}")
    
    # Statistiques finales
    stats = calculator.get_statistics()
    print(f"\nüìä STATISTIQUES:")
    for key, value in stats.items():
        print(f"   ‚Ä¢ {key}: {value}")
    
    print("\n‚úÖ VOLATILITY REGIME CALCULATOR TEST COMPLETED")
    return True

if __name__ == "__main__":
    test_volatility_regime_calculator()