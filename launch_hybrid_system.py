#!/usr/bin/env python3
"""
Lanceur du syst√®me MIA IA v2.1-Hybrid
Version am√©lior√©e avec validation automatique et monitoring
"""

import subprocess
import sys
import os
import time
import argparse
import datetime
import json
import signal
from typing import Optional, Dict, Any

# Variables globales pour le monitoring
trading_process: Optional[subprocess.Popen] = None
unifier_process: Optional[subprocess.Popen] = None

def signal_handler(signum, frame):
    """Gestionnaire de signal pour arr√™t propre"""
    print(f"\nüõë Signal {signum} re√ßu - Arr√™t en cours...")
    cleanup_processes()
    sys.exit(0)

def cleanup_processes():
    """Nettoie les processus en cours"""
    global trading_process, unifier_process
    
    if trading_process:
        print("üõë Arr√™t du syst√®me de trading...")
        trading_process.terminate()
        try:
            trading_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            trading_process.kill()
        trading_process = None
    
    if unifier_process:
        print("üõë Arr√™t du unifier...")
        unifier_process.terminate()
        try:
            unifier_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            unifier_process.kill()
        unifier_process = None

def validate_data_files(date: str = None) -> bool:
    """Valide les fichiers de donn√©es avant lancement"""
    if not date:
        date = datetime.datetime.now().strftime("%Y%m%d")
    
    print(f"=== VALIDATION DES DONN√âES ({date}) ===")
    
    try:
        cmd = ["python", "utils/enhanced_data_validator.py", "--date", date]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Validation des donn√©es r√©ussie")
            return True
        else:
            print("‚ùå Validation des donn√©es √©chou√©e:")
            print(result.stdout)
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur validation: {e}")
        return False

def get_system_status() -> Dict[str, Any]:
    """R√©cup√®re le statut du syst√®me"""
    status = {
        "timestamp": datetime.datetime.now().isoformat(),
        "trading_running": trading_process is not None and trading_process.poll() is None,
        "unifier_running": unifier_process is not None and unifier_process.poll() is None,
        "trading_pid": trading_process.pid if trading_process else None,
        "unifier_pid": unifier_process.pid if unifier_process else None
    }
    return status

def monitor_system():
    """Monitore le syst√®me en cours d'ex√©cution"""
    print("=== MONITORING SYST√àME ===")
    print("Appuyez sur Ctrl+C pour arr√™ter")
    
    try:
        while True:
            status = get_system_status()
            
            if status["trading_running"]:
                print(f"‚úÖ Trading actif (PID: {status['trading_pid']})")
            else:
                print("‚ùå Trading arr√™t√©")
                
            if status["unifier_running"]:
                print(f"‚úÖ Unifier actif (PID: {status['unifier_pid']})")
            else:
                print("‚ùå Unifier arr√™t√©")
            
            time.sleep(10)  # Check every 10 seconds
            
    except KeyboardInterrupt:
        print("\nüõë Monitoring arr√™t√©")

def launch_unifier(date: str = None, background: bool = False) -> bool:
    """Lance le unifier avec les param√®tres optimaux et structure organis√©e"""
    global unifier_process
    
    if not date:
        date = "today"
    
    print("=== LANCEMENT MIA UNIFIER v2.1-HYBRID ===")
    print(f"  - Date: {date}")
    print("  - Structure organis√©e: DATA_SIERRA_CHART/DATA_YYYY/MONTH_NAME/YYYYMMDD/")
    print("  - Cr√©ation automatique des dossiers")
    print("  - Fallback vers ancienne structure si n√©cessaire")
    print()
    
    cmd = [
        "python", "features/mia_unifier.py",
        "--indir", ".",
        "--date", date,
        "--minute-mode",
        "--max_depth_levels", "20",
        "--append-stream",
        "--watch-seconds", "55",
        "--ttl-seconds", "7200",
        "--correlation-ttl-seconds", "600",
        "--rollover-bytes", "134217728",
        "--timezone-offset", "-6",
        "--pg-distance", "2.5",
        "--touch-thr", "1.0",
        "--zone-cooldown", "300", 
        "--menthorq-decisions",
        "--mia-optimal",
        "--verbose"
    ]
    
    print(f"Commande: {' '.join(cmd)}")
    print()
    
    try:
        if background:
            # Lancer en arri√®re-plan
            unifier_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            print(f"‚úÖ Unifier lanc√© en arri√®re-plan (PID: {unifier_process.pid})")
            return True
        else:
            # Lancer en mode synchrone
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Unifier termin√© avec succ√®s")
                print("Sortie:")
                print(result.stdout)
                return True
            else:
                print("‚ùå Erreur unifier:")
                print(result.stderr)
                return False
            
    except Exception as e:
        print(f"‚ùå Erreur lancement unifier: {e}")
        return False

def launch_trading_system(paper_trading=True, background: bool = False):
    """Lance le syst√®me de trading COMPLET (16 strat√©gies + Risk Manager + Sierra Chart)"""
    global trading_process
    
    print("=== LANCEMENT SYST√àME DE TRADING COMPLET ===")
    print("  - 16 strat√©gies de trading")
    print("  - Risk Manager avanc√©")
    print("  - Trading Executor avec Sierra Chart")
    print("  - Advanced Metrics calculator")
    print("  - Market Regime Detector")
    print("  - Performance Tracker")
    print("  - Validation automatique des donn√©es")
    print()
    
    cmd = [
        "python", "LAUNCH/launch_24_7_menthorq_final.py"
    ]
    
    if paper_trading:
        cmd.extend(["--paper-trading"])
        print("  - Mode: PAPER TRADING")
    else:
        print("  - Mode: LIVE TRADING")
    
    print(f"Commande: {' '.join(cmd)}")
    print()
    
    try:
        if background:
            # Lancer en arri√®re-plan
            trading_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            print(f"‚úÖ Syst√®me de trading COMPLET lanc√© en arri√®re-plan (PID: {trading_process.pid})")
            return True
        else:
            # Lancer en mode synchrone
            trading_process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            print(f"‚úÖ Syst√®me de trading COMPLET lanc√© (PID: {trading_process.pid})")
            print("Appuyez sur Ctrl+C pour arr√™ter")
            
            # Attendre l'interruption
            try:
                trading_process.wait()
            except KeyboardInterrupt:
                print("\nüõë Arr√™t demand√©...")
                cleanup_processes()
                print("‚úÖ Syst√®me arr√™t√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lancement syst√®me: {e}")
        return False

def main():
    # Configuration des gestionnaires de signal
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    parser = argparse.ArgumentParser(description="Lanceur syst√®me MIA IA v2.1-Hybrid am√©lior√©")
    parser.add_argument("--unifier-only", action="store_true", help="Lancer seulement le unifier")
    parser.add_argument("--trading-only", action="store_true", help="Lancer seulement le syst√®me de trading")
    parser.add_argument("--live", action="store_true", help="Mode live (pas paper trading)")
    parser.add_argument("--date", type=str, default="today", help="Date √† traiter (YYYYMMDD ou 'today')")
    parser.add_argument("--validate-only", action="store_true", help="Valider seulement les donn√©es")
    parser.add_argument("--monitor", action="store_true", help="Mode monitoring seulement")
    parser.add_argument("--background", action="store_true", help="Lancer en arri√®re-plan")
    parser.add_argument("--no-validation", action="store_true", help="Passer la validation des donn√©es")
    
    args = parser.parse_args()
    
    print("=== MIA IA SYSTEM v2.1-HYBRID LANCER ===")
    print(f"Timestamp: {datetime.datetime.now().isoformat()}")
    print(f"Date cible: {args.date}")
    print()
    
    # Mode validation seulement
    if args.validate_only:
        validate_data_files(args.date)
        return
    
    # Mode monitoring seulement
    if args.monitor:
        monitor_system()
        return
    
    # Validation des donn√©es (sauf si d√©sactiv√©e)
    if not args.no_validation:
        if not validate_data_files(args.date):
            print("‚ùå Validation √©chou√©e - Arr√™t du syst√®me")
            return
    
    # Mode unifier seulement
    if args.unifier_only:
        launch_unifier(args.date, background=args.background)
        if not args.background:
            print("‚úÖ Unifier termin√©")
        return
    
    # Mode trading seulement
    if args.trading_only:
        launch_trading_system(paper_trading=not args.live, background=args.background)
        if not args.background:
            print("‚úÖ Syst√®me de trading termin√©")
        return
    
    # Mode complet: unifier puis trading
    print("=== MODE COMPLET ===")
    
    # 1. Lancer le unifier
    if launch_unifier(args.date, background=args.background):
        print("\n" + "="*50)
        time.sleep(2)
        
        # 2. Lancer le syst√®me de trading
        if launch_trading_system(paper_trading=not args.live, background=args.background):
            if args.background:
                print("‚úÖ Syst√®me complet lanc√© en arri√®re-plan")
                monitor_system()
            else:
                print("‚úÖ Syst√®me complet termin√©")
        else:
            print("‚ùå Erreur lancement syst√®me de trading")
    else:
        print("‚ùå Impossible de continuer sans unifier")

if __name__ == "__main__":
    main()
