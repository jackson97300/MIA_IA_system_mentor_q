# 🚀 MIA TRADING SYSTEM - ARCHITECTURE COMPLÈTE V3.0
## Bot Trading ES Futures avec Edge Options SPX

---

## 📁 STRUCTURE COMPLÈTE DU PROJET

```
D:\MIA_IA_system\
├── 📁 config/
│   ├── __init__.py
│   ├── logging_config.py
│   ├── constants.py  
│   ├── data_collection_risk_config.py
│   ├── trading_config.py              # Configuration centralisée
│   ├── sierra_config.py               # Configuration Sierra Chart
│   ├── automation_config.py           # Configuration automation & live
│   └── ml_config.py                   # Configuration ML progressive
│
├── 📁 core/
│   ├── __init__.py
│   ├── structure_data.py              # Structures de données partagées
│   ├── base_types.py                  # Types de base (AUCUN import local)
│   ├── ibkr_connector.py              # Connecteur IBKR API
│   ├── sierra_connector.py            # Connecteur Sierra Chart
│   ├── battle_navale.py               # Méthode signature propriétaire
│   └── patterns_detector.py           # Détecteur des 3 patterns elite
│
├── 📁 features/
│   ├── __init__.py
│   ├── feature_calculator.py          # Calcul des 8 features
│   ├── feature_calculator_optimized.py
│   ├── market_regime.py               # Détection Trend/Range
│   ├── market_regime_optimized.py
│   └── confluence_analyzer.py         # Analyseur multi-level
│
├── 📁 strategies/
│   ├── __init__.py
│   ├── signal_generator.py            # Cerveau central orchestrateur
│   ├── trend_strategy.py              # Stratégie mode tendance
│   ├── range_strategy.py              # Stratégie mode range
│   └── strategy_selector.py           # Sélection intelligente
│
├── 📁 execution/
│   ├── __init__.py
│   ├── order_manager.py               # Gestionnaire d'ordres
│   ├── risk_manager.py                # Gestion du risque
│   ├── simple_trader.py               # Automation trading loop
│   └── trade_snapshotter.py           # Capture données trades
│
├── 📁 monitoring/
│   ├── __init__.py
│   ├── live_monitor.py                # Monitoring temps réel
│   ├── health_checker.py              # Vérification santé système
│   ├── discord_notifier.py            # Notifications Discord
│   ├── performance_tracker.py         # Tracking performance
│   └── alert_system.py                # Système d'alertes
│
├── 📁 data/
│   ├── __init__.py
│   ├── data_collector.py              # Collection données marché
│   └── market_data_feed.py            # Feed données temps réel
│
├── 📁 ml/
│   ├── __init__.py
│   ├── simple_model.py                # Modèle linéaire de base
│   ├── data_processor.py              # Préparation données ML
│   ├── model_validator.py             # Validation modèles
│   └── model_trainer.py               # Training modèles
│
├── 📁 performance/
│   ├── __init__.py
│   ├── trade_logger.py                # Logger trades + métriques
│   ├── performance_analyzer.py        # Analyse performance
│   ├── adaptive_optimizer.py          # Auto-amélioration
│   └── automation_metrics.py          # Métriques automation
│
├── 📁 tests/
│   ├── test_core/
│   ├── test_features/
│   ├── test_strategies/
│   ├── test_execution/
│   ├── test_monitoring/
│   └── test_ml/
│
├── 📁 scripts/
│   ├── run_backtest.py
│   ├── start_automation.py
│   ├── backup_data.py
│   ├── analyze_performance.py
│   ├── train_models.py
│   └── deploy_live.py
│
├── main.py                         # Point d'entrée principal
├── automation_main.py              # Point d'entrée automation
└── data_collection_main.py         # Point d'entrée data collection
```

---

## 🔧 RÈGLES D'IMPORTS ANTI-ERREURS

### ⚠️ RÈGLE #1: HIÉRARCHIE STRICTE DES IMPORTS

```python
# ORDRE OBLIGATOIRE DANS CHAQUE FICHIER:
# 1. STDLIB
import time
import json
from typing import Dict, List, Optional
from dataclasses import dataclass

# 2. THIRD-PARTY
import numpy as np
import pandas as pd
from ib_insync import IB

# 3. LOCAL (TOUJOURS imports absolus)
from config.trading_config import TradingConfig
from core.base_types import SignalType, MarketRegime
```

### ⚠️ RÈGLE #2: DÉPENDANCES ENTRE MODULES

```
HIÉRARCHIE DES DÉPENDANCES (du plus bas au plus haut):

1. config/* → AUCUNE dépendance locale (LEAF)
2. core/base_types.py → AUCUNE dépendance locale (LEAF)
3. core/* → peut importer: config, base_types
4. features/* → peut importer: config, core
5. strategies/* → peut importer: config, core, features
6. execution/* → peut importer: config, core, features, strategies
7. monitoring/* → peut importer: TOUT sauf ml
8. ml/* → peut importer: TOUT sauf monitoring
9. main files → peuvent importer TOUT
```

### ⚠️ RÈGLE #3: IMPORTS INTERDITS (ÉVITER CIRCULARITÉ)

```python
# ❌ JAMAIS FAIRE:
# Dans features/feature_calculator.py
from strategies.signal_generator import SignalGenerator  # INTERDIT!

# ❌ JAMAIS FAIRE:
# Dans core/battle_navale.py
from features.market_regime import MarketRegimeDetector  # INTERDIT!

# ✅ TOUJOURS FAIRE:
# Passer les dépendances en paramètres plutôt qu'importer
```

---

## 📊 DESCRIPTION DÉTAILLÉE DES MODULES PRINCIPAUX

### 🎯 CORE - Fondation du Système

#### **core/base_types.py**
```python
# RESPONSABILITÉ: Types partagés par TOUT le système
# IMPORTS: AUCUN import local (pour éviter circularité)
# CONTIENT:
- Enums: SignalType, MarketRegime, OrderStatus
- Dataclasses: TradingSignal, MarketData, Position
- Constants: TICK_SIZE, CONTRACT_SIZE
```

#### **core/battle_navale.py**
```python
# RESPONSABILITÉ: Votre méthode signature
# IMPORTS: base_types uniquement
# MÉTHODE PRINCIPALE:
def detect_battle_navale(
    market_data: MarketData,
    market_profile: MarketProfile
) -> BattleNavaleSignal
```

#### **core/patterns_detector.py**
```python
# RESPONSABILITÉ: Détection 5 patterns ES
# IMPORTS: base_types uniquement
# PATTERNS:
1. VAH/VAL Rejection
2. VWAP Deviation Trade
3. Gamma Flip Momentum
4. Battle Navale Pattern
5. Multi-Level Confluence
```

### 🧮 FEATURES - Calcul des Indicateurs

#### **features/feature_calculator.py**
```python
# RESPONSABILITÉ: Calcul des 18 features
# IMPORTS: core.base_types, core.structure_data
# FEATURES:
- 8 Order Flow (CVD, Delta, Footprint)
- 6 Options (Gamma, Charm, GEX)
- 4 Context (Regime, Trend, Volume)
```

#### **features/market_regime.py**
```python
# RESPONSABILITÉ: Détection Trend vs Range
# IMPORTS: core.base_types
# OUTPUT: MarketRegime.TREND ou MarketRegime.RANGE
```

### 🎲 STRATEGIES - Génération des Signaux

#### **strategies/signal_generator.py**
```python
# RESPONSABILITÉ: Orchestrateur principal des signaux
# IMPORTS: core, features
# WORKFLOW:
1. Récupère features
2. Détecte régime marché
3. Sélectionne stratégie appropriée
4. Génère signal final avec confluence
```

### ⚡ EXECUTION - Trading Automatisé

#### **execution/simple_trader.py**
```python
# RESPONSABILITÉ: Loop automation principal
# IMPORTS: strategies, core, monitoring
# CYCLE:
while market_open:
    data = get_market_data()
    signal = generate_signal(data)
    if signal.is_valid:
        execute_trade(signal)
    monitor_positions()
```

#### **execution/risk_manager.py**
```python
# RESPONSABILITÉ: Gestion du risque
# IMPORTS: core.base_types
# FONCTIONS:
- calculate_position_size() # Kelly Criterion
- set_stop_loss()
- manage_drawdown()
- emergency_close_all()
```

### 📊 MONITORING - Surveillance Temps Réel

#### **monitoring/live_monitor.py**
```python
# RESPONSABILITÉ: Dashboard temps réel
# IMPORTS: execution, features, strategies
# AFFICHE:
- P&L temps réel
- Positions ouvertes
- Signaux générés
- Health système
```

### 🧠 ML - Intelligence Artificielle

#### **ml/simple_model.py**
```python
# RESPONSABILITÉ: Modèle ML linéaire
# IMPORTS: features, data
# MODÈLE: LinearRegression optimisé pour prédiction signaux
```

---

## 🔄 WORKFLOW D'INTÉGRATION

### 1. DÉMARRAGE DU SYSTÈME
```python
# main.py
1. Load configurations
2. Initialize connectors (IBKR, Sierra)
3. Start market data feed
4. Initialize strategies
5. Start automation loop
6. Enable monitoring
```

### 2. CYCLE DE TRADING
```
Market Data → Features → Regime → Strategy → Signal → Risk Check → Execution → Monitoring
     ↑                                                                              ↓
     ←───────────────────────── Feedback Loop ────────────────────────────────────
```

### 3. POINTS D'INTÉGRATION CRITIQUES

#### **Data Flow**
```
Sierra Chart → core/sierra_connector → features/feature_calculator → strategies/*
IQFeed → core/structure_data → features/market_regime → execution/*
```

#### **Signal Flow**
```
patterns_detector + battle_navale + confluence → signal_generator → risk_manager → order_manager
```

#### **Monitoring Flow**
```
Toutes les composantes → performance_tracker → live_monitor → discord_notifier
```

---

## 🛡️ GESTION DES ERREURS

### PATTERN STANDARD POUR CHAQUE MODULE
```python
import logging
from typing import Optional

logger = logging.getLogger(__name__)

def critical_function() -> Optional[Result]:
    try:
        # Code principal
        return result
    except SpecificError as e:
        logger.error(f"Specific error in {__name__}: {e}")
        # Gestion spécifique
        return None
    except Exception as e:
        logger.critical(f"Unexpected error in {__name__}: {e}")
        # Notification urgente
        alert_system.send_critical_alert(e)
        return None
```

---

## 📦 DÉPENDANCES EXTERNES

### REQUIREMENTS.TXT PRINCIPAL
```
# Core
numpy==1.24.3
pandas==2.0.3
scipy==1.11.1

# Trading
ib_insync==0.9.81
python-dotenv==1.0.0

# ML
scikit-learn==1.3.0
joblib==1.3.1

# Monitoring
discord.py==2.3.1
plotly==5.15.0

# Utils
pyyaml==6.0.1
colorama==0.4.6
```

---

## 🚀 COMMANDES DE DÉMARRAGE

### MODE DÉVELOPPEMENT
```bash
# Test unitaire d'un module
python -m pytest tests/test_core/test_battle_navale.py

# Backtest stratégie
python scripts/run_backtest.py --strategy trend --period 30d

# Monitoring seul
python monitoring/live_monitor.py --no-trading
```

### MODE PRODUCTION
```bash
# Démarrage complet avec automation
python automation_main.py --config production

# Data collection uniquement
python data_collection_main.py --save-snapshots

# Live trading (après validation)
python main.py --live --risk-limit conservative
```

---

## 📈 MÉTRIQUES DE PERFORMANCE CIBLES

- **Latence Pipeline**: < 10ms (de la data au signal)
- **Win Rate**: ≥ 60%
- **Profit Factor**: ≥ 1.8
- **Sharpe Ratio**: ≥ 1.5
- **Max Drawdown**: ≤ 8%
- **Uptime Système**: > 99%

---

## 🎯 CHECKLIST INTÉGRATION

- [ ] Tous les imports suivent la hiérarchie
- [ ] Pas de dépendances circulaires
- [ ] base_types.py n'importe RIEN de local
- [ ] Chaque module a son logger
- [ ] Tests unitaires pour chaque module
- [ ] Documentation des interfaces entre modules
- [ ] Gestion d'erreur robuste partout
- [ ] Monitoring actif sur tous les points critiques

---

**Cette structure garantit ZÉRO problème d'import et une intégration parfaite ! 🏆**