#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Backtest Syst√®me Longue Dur√©e - MIA_IA System
Backtesting du syst√®me sur donn√©es historiques √©tendues
"""

import sys
import os
import json
import time
from datetime import datetime, timedelta
import random
import glob
import yfinance as yf
import pandas as pd

# Ajouter le chemin du projet
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class BacktestSystemeLongueDuree:
    def __init__(self):
        self.test_results = {
            'timestamp': datetime.now().isoformat(),
            'backtest_period': {},
            'trading_results': {},
            'performance_metrics': {},
            'success': False
        }
        
        # Donn√©es historiques
        self.historical_data = None
        self.options_data = None
        self.orderflow_data = None
        
        # Param√®tres backtest
        self.start_date = "2024-01-01"
        self.end_date = "2024-12-31"
        self.symbol = "SPY"  # S&P 500 ETF pour donn√©es historiques
    
    def load_historical_data(self):
        """Charger donn√©es historiques √©tendues"""
        print("üìÇ Chargement donn√©es historiques...")
        
        try:
            # T√©l√©charger donn√©es historiques SPY
            ticker = yf.Ticker(self.symbol)
            self.historical_data = ticker.history(
                start=self.start_date,
                end=self.end_date,
                interval="1d"
            )
            
            print(f"‚úÖ Donn√©es historiques: {len(self.historical_data)} jours")
            print(f"   üìÖ P√©riode: {self.start_date} √† {self.end_date}")
            print(f"   üìä Prix initial: {self.historical_data['Close'].iloc[0]:.2f}")
            print(f"   üìä Prix final: {self.historical_data['Close'].iloc[-1]:.2f}")
            
            # G√©n√©rer donn√©es options simul√©es bas√©es sur volatilit√© historique
            self._generate_historical_options_data()
            
            # G√©n√©rer Order Flow bas√© sur volume et prix
            self._generate_historical_orderflow_data()
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur chargement: {e}")
            return False
    
    def _generate_historical_options_data(self):
        """G√©n√©rer donn√©es options bas√©es sur volatilit√© historique"""
        print("üìà G√©n√©ration donn√©es options historiques...")
        
        self.options_data = {}
        prices = self.historical_data['Close']
        
        for i, (date, price) in enumerate(prices.items()):
            # Calculer volatilit√© sur 20 jours
            if i >= 20:
                volatility = prices.iloc[i-20:i].pct_change().std() * 100
            else:
                volatility = 0.15  # Volatilit√© par d√©faut
            
            # G√©n√©rer niveaux GEX bas√©s sur prix et volatilit√©
            gex1 = price * (1 - volatility/100)
            gex2 = price * (1 + volatility/100)
            
            # Strike levels autour du prix
            strikes = []
            for j in range(-5, 6):
                strike = price * (1 + j * 0.01)  # 1% d'intervalle
                strikes.append({
                    'strike': strike,
                    'put_volume': random.randint(100, 1000),
                    'call_volume': random.randint(100, 1000),
                    'put_call_ratio': random.uniform(0.5, 2.0)
                })
            
            self.options_data[date] = {
                'gamma_exposure': {
                    'gex1': gex1,
                    'gex2': gex2,
                    'volatility': volatility
                },
                'strike_levels': strikes,
                'put_call_ratio': random.uniform(0.8, 1.2)
            }
        
        print(f"   ‚úÖ Options g√©n√©r√©es: {len(self.options_data)} jours")
    
    def _generate_historical_orderflow_data(self):
        """G√©n√©rer Order Flow bas√© sur volume et mouvement de prix"""
        print("üåä G√©n√©ration Order Flow historique...")
        
        self.orderflow_data = {}
        prices = self.historical_data['Close']
        volumes = self.historical_data['Volume']
        
        for i, (date, price) in enumerate(prices.items()):
            if i == 0:
                price_change = 0
                volume_ratio = 1.0
            else:
                price_change = (price - prices.iloc[i-1]) / prices.iloc[i-1] * 100
                volume_ratio = volumes.iloc[i] / volumes.iloc[i-1] if volumes.iloc[i-1] > 0 else 1.0
            
            # D√©terminer direction du flow
            if price_change > 0.5:
                flow_direction = 'BULLISH'
                flow_intensity = min(abs(price_change) / 2.0, 3.0)
            elif price_change < -0.5:
                flow_direction = 'BEARISH'
                flow_intensity = min(abs(price_change) / 2.0, 3.0)
            else:
                flow_direction = 'NEUTRAL'
                flow_intensity = 1.0
            
            # Ajuster avec volume
            if volume_ratio > 1.5:
                flow_intensity *= 1.5
            elif volume_ratio < 0.7:
                flow_intensity *= 0.7
            
            self.orderflow_data[date] = {
                'aggressive_flow': {
                    'flow_direction': flow_direction,
                    'flow_intensity': flow_intensity,
                    'price_change': price_change,
                    'volume_ratio': volume_ratio
                },
                'bid_ask_imbalance': {
                    'imbalance_percent': random.uniform(-20, 20),
                    'bid_volume': volumes.iloc[i] * random.uniform(0.4, 0.6),
                    'ask_volume': volumes.iloc[i] * random.uniform(0.4, 0.6)
                },
                'cumulative_delta': {
                    'delta': price_change * 1000,  # Delta approximatif
                    'trend': 'BULLISH' if price_change > 0 else 'BEARISH'
                }
            }
        
        print(f"   ‚úÖ Order Flow g√©n√©r√©: {len(self.orderflow_data)} jours")
    
    def run_backtest(self):
        """Ex√©cuter backtest sur longue dur√©e"""
        print("üéØ D√©marrage backtest longue dur√©e...")
        
        if self.historical_data is None:
            print("‚ùå Pas de donn√©es historiques")
            return False
        
        # Param√®tres trading
        initial_capital = 100000  # 100k USD
        position_size = 0.02  # 2% du capital par trade
        max_positions = 5
        
        # Variables tracking
        capital = initial_capital
        positions = []
        trades = []
        equity_curve = []
        
        print(f"   üí∞ Capital initial: ${initial_capital:,.0f}")
        print(f"   üìä Taille position: {position_size*100}%")
        
        # Parcourir chaque jour
        for i, (date, row) in enumerate(self.historical_data.iterrows()):
            current_price = row['Close']
            current_volume = row['Volume']
            
            # Donn√©es du jour
            day_options = self.options_data.get(date, {})
            day_orderflow = self.orderflow_data.get(date, {})
            
            # G√©n√©rer signaux
            signals = self._generate_daily_signals(date, current_price, day_options, day_orderflow)
            
            # Ex√©cuter trades
            for signal in signals:
                if len(positions) < max_positions:
                    # Calculer taille position
                    trade_size = capital * position_size
                    shares = int(trade_size / current_price)
                    
                    if shares > 0:
                        position = {
                            'id': len(positions) + 1,
                            'side': signal['action'],
                            'entry_price': current_price,
                            'entry_date': date,
                            'shares': shares,
                            'signal': signal['type'],
                            'strength': signal['strength']
                        }
                        positions.append(position)
                        
                        trades.append({
                            'date': date,
                            'action': signal['action'],
                            'price': current_price,
                            'shares': shares,
                            'signal': signal['type'],
                            'capital': capital
                        })
                        
                        print(f"   {date.strftime('%Y-%m-%d')} - {signal['action']} {shares} @ {current_price:.2f} ({signal['type']})")
            
            # G√©rer positions existantes
            for position in positions[:]:
                if position['side'] == 'BUY':
                    # Take profit 2% ou Stop loss 1%
                    if current_price > position['entry_price'] * 1.02:
                        pnl = (current_price - position['entry_price']) * position['shares']
                        capital += pnl
                        positions.remove(position)
                        trades.append({
                            'date': date,
                            'action': 'CLOSE_LONG',
                            'price': current_price,
                            'pnl': pnl,
                            'capital': capital
                        })
                        print(f"   {date.strftime('%Y-%m-%d')} - ‚úÖ CLOSE LONG: +${pnl:.2f}")
                    elif current_price < position['entry_price'] * 0.99:
                        pnl = (current_price - position['entry_price']) * position['shares']
                        capital += pnl
                        positions.remove(position)
                        trades.append({
                            'date': date,
                            'action': 'STOP_LONG',
                            'price': current_price,
                            'pnl': pnl,
                            'capital': capital
                        })
                        print(f"   {date.strftime('%Y-%m-%d')} - ‚ùå STOP LONG: ${pnl:.2f}")
                
                elif position['side'] == 'SELL':
                    # Take profit 2% ou Stop loss 1%
                    if current_price < position['entry_price'] * 0.98:
                        pnl = (position['entry_price'] - current_price) * position['shares']
                        capital += pnl
                        positions.remove(position)
                        trades.append({
                            'date': date,
                            'action': 'CLOSE_SHORT',
                            'price': current_price,
                            'pnl': pnl,
                            'capital': capital
                        })
                        print(f"   {date.strftime('%Y-%m-%d')} - ‚úÖ CLOSE SHORT: +${pnl:.2f}")
                    elif current_price > position['entry_price'] * 1.01:
                        pnl = (position['entry_price'] - current_price) * position['shares']
                        capital += pnl
                        positions.remove(position)
                        trades.append({
                            'date': date,
                            'action': 'STOP_SHORT',
                            'price': current_price,
                            'pnl': pnl,
                            'capital': capital
                        })
                        print(f"   {date.strftime('%Y-%m-%d')} - ‚ùå STOP SHORT: ${pnl:.2f}")
            
            # Fermer positions √† la fin de la p√©riode
            if i == len(self.historical_data) - 1:
                for position in positions:
                    if position['side'] == 'BUY':
                        pnl = (current_price - position['entry_price']) * position['shares']
                    else:
                        pnl = (position['entry_price'] - current_price) * position['shares']
                    capital += pnl
                    trades.append({
                        'date': date,
                        'action': 'CLOSE_FINAL',
                        'price': current_price,
                        'pnl': pnl,
                        'capital': capital
                    })
            
            # Track equity
            equity_curve.append({
                'date': date,
                'capital': capital,
                'positions': len(positions)
            })
        
        # Calculer r√©sultats
        self._calculate_backtest_results(trades, equity_curve, initial_capital)
        
        return True
    
    def _generate_daily_signals(self, date, current_price, options, orderflow):
        """G√©n√©rer signaux quotidiens"""
        signals = []
        
        # Signal bas√© sur Order Flow
        if orderflow:
            flow = orderflow.get('aggressive_flow', {})
            flow_direction = flow.get('flow_direction', 'NEUTRAL')
            flow_intensity = flow.get('flow_intensity', 1.0)
            
            if flow_intensity > 1.5:
                if flow_direction == 'BULLISH':
                    signals.append({
                        'type': 'ORDERFLOW_BULL',
                        'action': 'BUY',
                        'strength': min(flow_intensity / 3.0, 1.0)
                    })
                elif flow_direction == 'BEARISH':
                    signals.append({
                        'type': 'ORDERFLOW_BEAR',
                        'action': 'SELL',
                        'strength': min(flow_intensity / 3.0, 1.0)
                    })
        
        # Signal bas√© sur Options (GEX)
        if options:
            gex1 = options.get('gamma_exposure', {}).get('gex1', 0)
            gex2 = options.get('gamma_exposure', {}).get('gex2', 0)
            
            if current_price < gex1 and random.random() < 0.3:
                signals.append({
                    'type': 'GEX1_SUPPORT',
                    'action': 'BUY',
                    'strength': 0.8
                })
            elif current_price > gex2 and random.random() < 0.3:
                signals.append({
                    'type': 'GEX2_RESISTANCE',
                    'action': 'SELL',
                    'strength': 0.8
                })
        
        # Signal bas√© sur momentum (prix vs moyenne mobile)
        if len(self.historical_data) > 20:
            ma20 = self.historical_data['Close'].rolling(20).mean().iloc[-1]
            if current_price > ma20 * 1.01 and random.random() < 0.4:
                signals.append({
                    'type': 'MOMENTUM_BULL',
                    'action': 'BUY',
                    'strength': 0.7
                })
            elif current_price < ma20 * 0.99 and random.random() < 0.4:
                signals.append({
                    'type': 'MOMENTUM_BEAR',
                    'action': 'SELL',
                    'strength': 0.7
                })
        
        return signals
    
    def _calculate_backtest_results(self, trades, equity_curve, initial_capital):
        """Calculer r√©sultats du backtest"""
        print("üìä Calcul r√©sultats backtest...")
        
        # Trades ferm√©s (avec P&L)
        closed_trades = [t for t in trades if 'pnl' in t]
        winning_trades = [t for t in closed_trades if t['pnl'] > 0]
        losing_trades = [t for t in closed_trades if t['pnl'] < 0]
        
        # M√©triques de base
        total_trades = len(closed_trades)
        winning_count = len(winning_trades)
        losing_count = len(losing_trades)
        win_rate = (winning_count / total_trades * 100) if total_trades > 0 else 0
        
        # P&L
        total_pnl = sum([t['pnl'] for t in closed_trades])
        winning_pnl = sum([t['pnl'] for t in winning_trades])
        losing_pnl = abs(sum([t['pnl'] for t in losing_trades]))
        
        # Profit factor
        profit_factor = winning_pnl / losing_pnl if losing_pnl > 0 else float('inf')
        
        # Retour total
        total_return = (total_pnl / initial_capital) * 100
        
        # Drawdown
        max_capital = initial_capital
        max_drawdown = 0
        for point in equity_curve:
            capital = point['capital']
            if capital > max_capital:
                max_capital = capital
            drawdown = (max_capital - capital) / max_capital * 100
            max_drawdown = max(max_drawdown, drawdown)
        
        # Sharpe ratio (approximatif)
        returns = [t['pnl'] for t in closed_trades]
        avg_return = sum(returns) / len(returns) if returns else 0
        std_return = (sum([(r - avg_return) ** 2 for r in returns]) / len(returns)) ** 0.5 if returns else 1
        sharpe_ratio = avg_return / std_return if std_return > 0 else 0
        
        # R√©sultats
        results = {
            'period': {
                'start_date': self.start_date,
                'end_date': self.end_date,
                'days': len(self.historical_data)
            },
            'trading': {
                'total_trades': total_trades,
                'winning_trades': winning_count,
                'losing_trades': losing_count,
                'win_rate': win_rate,
                'total_pnl': total_pnl,
                'winning_pnl': winning_pnl,
                'losing_pnl': losing_pnl,
                'profit_factor': profit_factor
            },
            'performance': {
                'initial_capital': initial_capital,
                'final_capital': equity_curve[-1]['capital'] if equity_curve else initial_capital,
                'total_return': total_return,
                'max_drawdown': max_drawdown,
                'sharpe_ratio': sharpe_ratio,
                'avg_trade': total_pnl / total_trades if total_trades > 0 else 0
            },
            'trades': trades,
            'equity_curve': equity_curve
        }
        
        self.test_results['backtest_period'] = results['period']
        self.test_results['trading_results'] = results['trading']
        self.test_results['performance_metrics'] = results['performance']
        
        # Affichage
        print(f"   üìä Trades totaux: {total_trades}")
        print(f"   üìä Win Rate: {win_rate:.1f}%")
        print(f"   üìä Profit Factor: {profit_factor:.2f}")
        print(f"   üìä Retour total: {total_return:.2f}%")
        print(f"   üìä Max Drawdown: {max_drawdown:.2f}%")
        print(f"   üìä Sharpe Ratio: {sharpe_ratio:.2f}")
        print(f"   üí∞ Capital final: ${results['performance']['final_capital']:,.2f}")
        
        return results
    
    def save_results(self):
        """Sauvegarder r√©sultats"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"data/test_results/backtest_longue_duree_{timestamp}.json"
        
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Sauvegard√©: {filename}")
        return filename
    
    def run_complete_backtest(self):
        """Ex√©cuter backtest complet"""
        print("üèÜ BACKTEST SYST√àME LONGUE DUR√âE - MIA_IA SYSTEM")
        print("=" * 60)
        
        # 1. Charger donn√©es historiques
        if not self.load_historical_data():
            return False
        
        # 2. Ex√©cuter backtest
        if not self.run_backtest():
            return False
        
        # 3. Sauvegarder r√©sultats
        self.save_results()
        
        # 4. R√©sultats finaux
        print("\n" + "=" * 60)
        print("üìä R√âSULTATS BACKTEST LONGUE DUR√âE")
        print("=" * 60)
        
        performance = self.test_results.get('performance_metrics', {})
        trading = self.test_results.get('trading_results', {})
        
        print(f"üìÖ P√©riode: {self.start_date} √† {self.end_date}")
        print(f"üìä Trades ex√©cut√©s: {trading.get('total_trades', 0)}")
        print(f"üìä Win Rate: {trading.get('win_rate', 0):.1f}%")
        print(f"üìä Profit Factor: {trading.get('profit_factor', 0):.2f}")
        print(f"üìä Retour total: {performance.get('total_return', 0):.2f}%")
        print(f"üìä Max Drawdown: {performance.get('max_drawdown', 0):.2f}%")
        print(f"üìä Sharpe Ratio: {performance.get('sharpe_ratio', 0):.2f}")
        print(f"üí∞ Capital final: ${performance.get('final_capital', 0):,.2f}")
        
        # Crit√®res de succ√®s
        if (trading.get('total_trades', 0) > 10 and 
            trading.get('win_rate', 0) >= 40 and 
            trading.get('profit_factor', 0) >= 1.2):
            print("\nüéâ BACKTEST R√âUSSI ! Syst√®me profitable")
            self.test_results['success'] = True
        else:
            print("\n‚ö†Ô∏è Backtest partiel - optimisations n√©cessaires")
        
        return self.test_results['success']

def main():
    """Fonction principale"""
    print("üèÜ BACKTEST SYST√àME LONGUE DUR√âE - MIA_IA SYSTEM")
    print("=" * 60)
    
    backtest = BacktestSystemeLongueDuree()
    success = backtest.run_complete_backtest()
    
    if success:
        print("\nüéâ SYST√àME VALID√â SUR LONGUE DUR√âE !")
    else:
        print("\n‚ö†Ô∏è Syst√®me n√©cessite des optimisations")
    
    return success

if __name__ == "__main__":
    main()










