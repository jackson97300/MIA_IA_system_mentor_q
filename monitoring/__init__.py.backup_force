"""
MIA_IA_SYSTEM - Monitoring Package
Surveillance temps r√©el et alertes syst√®me
Version: Production Ready
    else:
        # Fallback pour Python < 3.7
        try:
        except Exception:
            # Si erreur, ne rien faire (√©viter le crash)
            pass

Composants :
- LiveMonitor : Surveillance temps r√©el du syst√®me
- PerformanceTracker : Suivi des m√©triques de performance
- HealthChecker : V√©rification sant√© syst√®me
- AlertSystem : Gestion des alertes
- DiscordNotifier : Notifications Discord
"""

import logging
from typing import Dict, Any, Optional, List

logger = logging.getLogger(__name__)

# === IMPORTS DES COMPOSANTS ===

# Live Monitor - Surveillance temps r√©el
try:
    from .live_monitor import (
        LiveMonitor,
        MonitoringStatus,
        SystemMetrics,
        create_live_monitor,
        test_live_monitor
    )
    LIVE_MONITOR_AVAILABLE = True
except ImportError as e:
    logger.warning(f"LiveMonitor non disponible: {e}")
    LIVE_MONITOR_AVAILABLE = False
    LiveMonitor = None

# Performance Tracker - M√©triques performance
try:
    from .performance_tracker import (
        PerformanceTracker,
        PerformanceMetrics,
        TradingMetrics,
        create_performance_tracker,
        test_performance_tracker
    )
    PERFORMANCE_TRACKER_AVAILABLE = True
except ImportError as e:
    logger.warning(f"PerformanceTracker non disponible: {e}")
    PERFORMANCE_TRACKER_AVAILABLE = False
    PerformanceTracker = None

# Health Checker - Sant√© syst√®me
try:
    from .health_checker import (
        HealthChecker,
        HealthStatus,
        SystemHealth,
        create_health_checker,
        test_health_checker
    )
    HEALTH_CHECKER_AVAILABLE = True
except ImportError as e:
    logger.warning(f"HealthChecker non disponible: {e}")
    HEALTH_CHECKER_AVAILABLE = False
    HealthChecker = None

# Alert System - Gestion alertes
try:
    from .alert_system import (
        AlertSystem,
        Alert,
        AlertLevel,
        AlertType,
        create_alert_system,
        test_alert_system
    )
    ALERT_SYSTEM_AVAILABLE = True
except ImportError as e:
    logger.warning(f"AlertSystem non disponible: {e}")
    ALERT_SYSTEM_AVAILABLE = False
    AlertSystem = None

# Discord Notifier - Notifications Discord
try:
    from .discord_notifier import (
        DiscordNotifier,
        NotificationType,
        create_discord_notifier,
        test_discord_notifier
    )
    DISCORD_NOTIFIER_AVAILABLE = True
except ImportError as e:
    logger.warning(f"DiscordNotifier non disponible: {e}")
    DISCORD_NOTIFIER_AVAILABLE = False
    DiscordNotifier = None
    create_discord_notifier = None

# === FACTORY FUNCTIONS ===


def create_monitoring_system(config: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    """
    Cr√©e un syst√®me de monitoring complet

    Args:
        config: Configuration optionnelle

    Returns:
        Dict avec tous les composants monitoring disponibles
    """
    system = {}

    if LIVE_MONITOR_AVAILABLE:
        try:
            system['live_monitor'] = create_live_monitor(config)
        except Exception as e:
            logger.error(f"Erreur cr√©ation LiveMonitor: {e}")

    if PERFORMANCE_TRACKER_AVAILABLE:
        try:
            system['performance_tracker'] = create_performance_tracker(config)
        except Exception as e:
            logger.error(f"Erreur cr√©ation PerformanceTracker: {e}")

    if HEALTH_CHECKER_AVAILABLE:
        try:
            system['health_checker'] = create_health_checker(config)
        except Exception as e:
            logger.error(f"Erreur cr√©ation HealthChecker: {e}")

    if ALERT_SYSTEM_AVAILABLE:
        try:
            system['alert_system'] = create_alert_system(config)
        except Exception as e:
            logger.error(f"Erreur cr√©ation AlertSystem: {e}")

    if DISCORD_NOTIFIER_AVAILABLE:
        try:
            system['discord_notifier'] = create_discord_notifier(config)
        except Exception as e:
            logger.error(f"Erreur cr√©ation DiscordNotifier: {e}")

    return system

# === HELPERS ===


def check_monitoring_availability() -> Dict[str, bool]:
    """V√©rifie la disponibilit√© des composants monitoring"""
    return {
        'live_monitor': LIVE_MONITOR_AVAILABLE,
        'performance_tracker': PERFORMANCE_TRACKER_AVAILABLE,
        'health_checker': HEALTH_CHECKER_AVAILABLE,
        'alert_system': ALERT_SYSTEM_AVAILABLE,
        'discord_notifier': DISCORD_NOTIFIER_AVAILABLE
    }


def notify_discord_available() -> bool:
    """V√©rifie si Discord est disponible"""
    return DISCORD_NOTIFIER_AVAILABLE and create_discord_notifier is not None


def get_monitoring_status() -> Dict[str, Any]:
    """R√©cup√®re le statut global du monitoring"""
    status = {
        'components_available': check_monitoring_availability(),
        'total_components': 5,
        'active_components': sum(check_monitoring_availability().values()),
        'health': 'healthy' if sum(check_monitoring_availability().values()) >= 3 else 'degraded'
    }
    return status

# === TEST FUNCTIONS ===


def test_monitoring_package():
    """Test complet du package monitoring"""
    logger.debug("TEST MONITORING PACKAGE")
    print("=" * 50)

    # Check disponibilit√©
    availability = check_monitoring_availability()
    logger.info("\nüì¶ Composants disponibles:")
    for component, available in availability.items():
        icon = "‚úÖ" if available else "‚ùå"
        logger.info("  {icon} {component}")

    # Test chaque composant
    tests_passed = 0
    tests_total = 0

    if LIVE_MONITOR_AVAILABLE:
        tests_total += 1
        try:
            test_live_monitor()
            tests_passed += 1
            logger.info("\n‚úÖ LiveMonitor: Test r√©ussi")
        except Exception as e:
            logger.info("\n‚ùå LiveMonitor: Test √©chou√© - {e}")

    if PERFORMANCE_TRACKER_AVAILABLE:
        tests_total += 1
        try:
            test_performance_tracker()
            tests_passed += 1
            logger.info("PerformanceTracker: Test r√©ussi")
        except Exception as e:
            logger.error("PerformanceTracker: Test √©chou√© - {e}")

    if HEALTH_CHECKER_AVAILABLE:
        tests_total += 1
        try:
            test_health_checker()
            tests_passed += 1
            logger.info("HealthChecker: Test r√©ussi")
        except Exception as e:
            logger.error("HealthChecker: Test √©chou√© - {e}")

    if ALERT_SYSTEM_AVAILABLE:
        tests_total += 1
        try:
            test_alert_system()
            tests_passed += 1
            logger.info("AlertSystem: Test r√©ussi")
        except Exception as e:
            logger.error("AlertSystem: Test √©chou√© - {e}")

    if DISCORD_NOTIFIER_AVAILABLE:
        tests_total += 1
        try:
            test_discord_notifier()
            tests_passed += 1
            logger.info("DiscordNotifier: Test r√©ussi")
        except Exception as e:
            logger.error("DiscordNotifier: Test √©chou√© - {e}")

    # R√©sum√©
    logger.info("\nüìä R√©sultats: {tests_passed}/{tests_total} tests r√©ussis")

    return tests_passed == tests_total

# === EXPORTS ===


__all__ = [
    # Classes principales
    'LiveMonitor',
    'PerformanceTracker',
    'HealthChecker',
    'AlertSystem',
    'DiscordNotifier',

    # Factory functions
    'create_monitoring_system',
    'create_live_monitor',
    'create_performance_tracker',
    'create_health_checker',
    'create_alert_system',
    'create_discord_notifier',

    # Helper functions
    'check_monitoring_availability',
    'notify_discord_available',
    'get_monitoring_status',

    # Test function
    'test_monitoring_package',

    # Availability flags
    'LIVE_MONITOR_AVAILABLE',
    'PERFORMANCE_TRACKER_AVAILABLE',
    'HEALTH_CHECKER_AVAILABLE',
    'ALERT_SYSTEM_AVAILABLE',
    'DISCORD_NOTIFIER_AVAILABLE'
]

# === CONVENIENCE IMPORTS ===

# Pour compatibilit√© avec imports existants
if LIVE_MONITOR_AVAILABLE:
    from .live_monitor import MonitoringStatus, SystemMetrics

if PERFORMANCE_TRACKER_AVAILABLE:
    from .performance_tracker import PerformanceMetrics, TradingMetrics

if HEALTH_CHECKER_AVAILABLE:
    from .health_checker import HealthStatus, SystemHealth

if ALERT_SYSTEM_AVAILABLE:
    from .alert_system import Alert, AlertLevel, AlertType

if DISCORD_NOTIFIER_AVAILABLE:
    from .discord_notifier import NotificationType

# === AUTO-DIAGNOSTIC ===

if __name__ == "__main__":
    # Test automatique du package
    success = test_monitoring_package()

    # Affichage statut
    status = get_monitoring_status()
    logger.info("\nüìà Statut Monitoring: {status['health'].upper()}")
    logger.info("Composants actifs: {status['active_components']}/{status['total_components']}")

    exit(0 if success else 1)
